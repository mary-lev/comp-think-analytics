repo_name,issue_title,comment_user,comment_text,comment_datetime
comp-think/2024-2025,"Lecture ""Greedy algorithms"", exercise 1",epistrephein,"```python
def compute_change(total, payed):
    coins = [2, 1, 0.50, 0.20, 0.10, 0.05, 0.02, 0.01]
    change = payed - total

    change_coins = []
    for coin in coins:
        while change >= coin:
            change_coins.append(coin)
            change = change - coin

    return change_coins

def test_compute_change(total, payed, expected):
    result = compute_change(total, payed)
    if expected == result:
        return True
    else:
        return False

print(test_compute_change(2.63, 5,  [2, 0.2, 0.1, 0.05, 0.02]))             # True
print(test_compute_change(4.55, 5,  [0.2, 0.2, 0.05]))                      # True
print(test_compute_change(4.51, 10, [2, 2, 1, 0.2, 0.2, 0.05, 0.02, 0.02])) # True
```",2024-12-16T10:13:37+00:00
comp-think/2024-2025,"Lecture ""Greedy algorithms"", exercise 1",ValkyrieCain9,"```
def get_change_coins(amount_to_pay, amount_recieved):
    coin_values = [2, 1, 0.50, 0.20, 0.1, 0.05, 0.02, 0.01]
    if amount_to_pay == amount_recieved:
        return f""Exact amount, no change""
    else:
        change = round((amount_recieved - amount_to_pay),2)
        change_in_coins = {}
        for coin in coin_values:
            if coin <= change:
                change_in_coins[coin] = 0
                while coin <= change:
                    change = round(change-coin, 2)
                    change_in_coins[coin]+=1
            if change == 0:
                break

        return change_in_coins

def test_get_change_coins(amount_to_pay, amount_recieved, expected):
    if get_change_coins(amount_to_pay, amount_recieved) == expected:
        return True
    else:
        return False


print(test_get_change_coins(10.80,20,{2:4, 1:1, 0.2:1})) #True
print(test_get_change_coins(5,5,""Exact amount, no change"")) #True
print(test_get_change_coins(4.70, 6, {1:1, 0.2:1, 0.1:1})) #True
print(test_get_change_coins(4.51, 10, {2:2, 1:1, 0.2:2, 0.05:1, 0.02:2})) #True
```",2024-12-21T10:16:09+00:00
comp-think/2024-2025,"Lecture ""Organising information: graphs"", exercise 2",maridematteis,"<img width=""655"" alt=""Screenshot 2024-12-13 alle 21 09 03"" src=""https://github.com/user-attachments/assets/f2bccebb-2914-48b5-bd8f-308ccba57f18"" />
",2024-12-13T20:27:40+00:00
comp-think/2024-2025,"Lecture ""Organising information: graphs"", exercise 2",lisitein,"```
from networkx import DiGraph
cass = DiGraph()

cass.add_node(""Ocean's Twelve"")
cass.add_node(""Fight Club"")
cass.add_node(""Dark Shadows"")

cass.add_node(""Brad Pitt"")
cass.add_node(""Eva Green"")
cass.add_node(""George Clooney"")
cass.add_node(""Catherine Zeta-Jones"")
cass.add_node(""Johnny Depp"")
cass.add_node(""Helena Bonham Carter"")

cass.add_edge(""Brad Pitt"", ""Ocean's Twelve"")
cass.add_edge(""Brad Pitt"", ""Fight Club"")
cass.add_edge(""Eva Green"", ""Dark Shadows"")
cass.add_edge(""George Clooney"", ""Ocean's Twelve"")
cass.add_edge(""Catherine Zeta-Jones"", ""Ocean's Twelve"")
cass.add_edge(""Johnny Depp"", ""Dark Shadows"")
cass.add_edge(""Helena Bonham Carter"", ""Fight Club"")
cass.add_edge(""Helena Bonham Carter"", ""Dark Shadows"")

print(cass.edges(data = True))
```

```
[('Brad Pitt', ""Ocean's Twelve"", {}), ('Brad Pitt', 'Fight Club', {}), ('Eva Green', 'Dark Shadows', {}), ('George Clooney', ""Ocean's Twelve"", {}), ('Catherine Zeta-Jones', ""Ocean's Twelve"", {}), ('Johnny Depp', 'Dark Shadows', {}), ('Helena Bonham Carter', 'Fight Club', {}), ('Helena Bonham Carter', 'Dark Shadows', {})]
```",2024-12-13T23:20:56+00:00
comp-think/2024-2025,"Lecture ""Organising information: graphs"", exercise 2",arinee01,"<img width=""876"" alt=""Снимок экрана 2024-12-14 в 14 49 37"" src=""https://github.com/user-attachments/assets/80ef8ebb-b0a1-4aa0-9a26-933b91cd917a"" />
",2024-12-14T13:50:05+00:00
comp-think/2024-2025,"Lecture ""Organising information: graphs"", exercise 2",KikaYang,"```
from networkx import DiGraph
dg = DiGraph()

edges_dict = {
    ""Brad Pitt"": [""Fight Club"", ""Ocean's Twelve""],
    ""George Clooney"": [""Ocean's Twelve""],
    ""Catherine Zeta-Jones"": [""Ocean's Twelve""],
    ""Eva Green"": [""Dark Shadows""],
    ""Johnny Depp"": [""Dark Shadows""],
    ""Helena Bonham Carter"": [""Dark Shadows""]
}

for actor, movies in edges_dict.items():
    dg.add_edges_from((actor, movie) for movie in movies)
```",2024-12-15T15:43:24+00:00
comp-think/2024-2025,"Lecture ""Organising information: graphs"", exercise 2",shiho1000,"```python
from networkx import MultiDiGraph

actor_movie = MultiDiGraph()
actor_movie_list = [""Brad Pitt"", ""Eva Green"", ""George Clooney"", ""Catherine Zeta-Jones"", ""Johnny Depp"", ""Helena Bonham Carter"" ""Ocean's Twelve"", ""Fight Club"", ""Darkshadows""]

for index, item in enumerate(actor_movie_list):
    actor_movie.add_node(index+1, name=item)

actor_movie.add_edges_from([(1,7),(1,8),(2,9),(3,7),(4,7),(5,9),(6,8),(6,9)])
``` ",2024-12-15T17:45:48+00:00
comp-think/2024-2025,"Lecture ""Organising information: graphs"", exercise 2",theair-hub,"![image](https://github.com/user-attachments/assets/e6d535c7-4198-4f83-a5cf-b356a3f59e90)
",2024-12-15T18:35:32+00:00
comp-think/2024-2025,"Lecture ""Organising information: graphs"", exercise 1",lisitein,"```
from networkx import Graph
co_authors = Graph()

co_authors.add_node(""Tim Berners-Lee"")
co_authors.add_node(""Tom_Heath"")
co_authors.add_node(""Christian_Bizer"")
co_authors.add_node(""Sören_Auer"")
co_authors.add_node(""Michael_Hausenblas"")
co_authors.add_node(""Kingsley_Idehen"")

co_authors.add_edge(""Tim Berners-Lee"", ""Tom_Heath"", weight=19)
co_authors.add_edge(""Tim Berners-Lee"", ""Christian_Bizer"", weight=19)
co_authors.add_edge(""Tim Berners-Lee"", ""Sören_Auer"", weight=8)
co_authors.add_edge(""Tim Berners-Lee"", ""Michael_Hausenblas"", weight=5)
co_authors.add_edge(""Tim Berners-Lee"", ""Kingsley_Idehen"", weight=4)
```",2024-12-13T22:55:40+00:00
comp-think/2024-2025,"Lecture ""Organising information: graphs"", exercise 1",maridematteis,"<img width=""655"" alt=""Screenshot 2024-12-13 alle 21 06 44"" src=""https://github.com/user-attachments/assets/87ac13f8-8f2f-4bb3-b894-16e4fa5c83b4"" />
",2024-12-14T10:13:23+00:00
comp-think/2024-2025,"Lecture ""Organising information: graphs"", exercise 1",arinee01,"<img width=""831"" alt=""Снимок экрана 2024-12-14 в 14 45 57"" src=""https://github.com/user-attachments/assets/868fe016-142b-493f-802a-756c2b8130c3"" />
",2024-12-14T13:46:21+00:00
comp-think/2024-2025,"Lecture ""Organising information: graphs"", exercise 1",theair-hub,"![image](https://github.com/user-attachments/assets/f6b28f1c-0b7a-4533-8120-042f5f29b256)
",2024-12-14T19:55:45+00:00
comp-think/2024-2025,"Lecture ""Organising information: graphs"", exercise 1",KikaYang,"```
from networkx import Graph
g = Graph()

g.add_node('A', label = 'Tim Berners-Lee')
g.add_node('B', label = 'Tom Heath', articles = 19)
g.add_node('C', label = 'Christian Bizer', articles = 19)
g.add_node('D', label = 'James A. Hendler', articles = 10)
g.add_node('E', label = 'Sören Auer', articles = 10)
g.add_node('F', label = 'Nigel Shadbolt', articles = 9)

g.add_edge('A', 'B', weight = 19)
g.add_edge('A', 'C', weight = 19)
g.add_edge('A', 'D', weight = 10)
g.add_edge('A', 'E', weight = 10)
g.add_edge('A', 'F', weight = 9)
```",2024-12-15T15:42:37+00:00
comp-think/2024-2025,"Lecture ""Organising information: trees"", exercise 2",ValkyrieCain9,"At the moment I do not have my laptop with me so I cannot copy the code of my function here, although I was able to implement it. Instead I will use natural language to explain the logic I used for this exercise for anyone who wants to try implement it:

- I started by creating an empty list `node_list` which will be the output list and appended the name of `root_node`
- next i created a list of all the `root_node` descendants using `descendants=list(root_node.descendants)`. I converted to a list here because this will be used for the loop and needs to be mutable.
- Using a while loop, i iterated over the list, taking the first item,`node` appending it’s name to `node_list`
- I then use a for loop to iterate over the other items in the descendants list: 
`for sib_node in descendants`
- I check if `node` has siblings 
`if node in sib_node.siblings`
and if it does i append their names to `node_list`
- Then I check if the `node` has “cousins”, as they would also be on the same “level” as the siblings. In this case cousins are nodes with different parents but whose parents are siblings (like in real life). 
`elif node.parent in sib_node.parent.sibling`
If the item has cousins their names are also appended to `node_list`.
- Each time an item is appended to `node_list` it is removed from the descendants list I created and so the while loop runs until the descendants list is empty.
- At the end the function returns `node_list`

I used this particular implementation to have the nodes in the output list in the order described by the professor in the first question which takes all the nodes on each level. Simply using `root_node.descendants` on its own will return a list of nodes ordered along each of the branches.

I started with this question as it was easier for me to think about the implementation without recursion. I plan to adapt this idea later for the first question.

I hope this helps anyone who is trying to do the exercise. I will upload my code to compare with this once I have my computer back. 
",2024-12-10T16:14:57+00:00
comp-think/2024-2025,"Lecture ""Organising information: trees"", exercise 2",danielecamagnadhdk,"```
def breadth_first_visit_iterative(root_node):   
    result=list()
    result.append(root_node)
    for elem in result:
        for node in elem.children:
            result.append(node)
    return result
```
This is my code, it gives the correct output.",2024-12-10T22:52:01+00:00
comp-think/2024-2025,"Lecture ""Organising information: trees"", exercise 2",ValkyrieCain9,"Here is my the code for the algorithm I described in my previous comment:

```
def breadth_first_visit(root_node):
    node_list = []
    node_list.append(root_node.name)
    #save the tuple of descendants as a list which can be changed in the loop
    desc_nodes = list(root_node.descendants)
    while len(desc_nodes) > 0:
        #take the first item in the descendants list and add it to the output list
        node = desc_nodes.pop(0)
        node_list.append(node.name)
        #look for the siblings of the item and poping them and adding them to the output list
        for sib_node in desc_nodes:
            if node.parent == sib_node.parent:
                node_list.append(sib_node.name)
                desc_nodes.pop(desc_nodes.index(sib_node))
            #checking for cousins (nodes whose parents are siblings)
            elif node.parent in sib_node.parent.siblings:
                node_list.append(sib_node.name)
                desc_nodes.pop(desc_nodes.index(sib_node))
        
    return node_list
```",2024-12-12T15:01:49+00:00
comp-think/2024-2025,"Lecture ""Organising information: trees"", exercise 2",arinee01,"def breadth_first_visit_iterative(root_node):
    result = []
    queue = [root_node]
    while queue:
        current_node = queue.pop(0)
        result.append(current_node)
        queue.extend(current_node.children)
    return result
",2024-12-13T14:32:23+00:00
comp-think/2024-2025,"Lecture ""Organising information: trees"", exercise 1",arinee01,"<img width=""679"" alt=""Снимок экрана 2024-12-13 в 14 53 39"" src=""https://github.com/user-attachments/assets/9f294305-fa44-49de-ac63-f3a820f44192"" />
",2024-12-13T13:54:07+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 2",ValkyrieCain9,"For this I adapted the binary search function, using a dictionary to save the item as a key and its position as its value
```
#DYNAMIC BINARY SEARCH FUNCITON USING RECURSION
def test_binary_search(item, ordered_list, start, end, item_dict, expected):
    if expected == binary_search(item, ordered_list, start, end, item_dict):
        return True
    else:
        return False

def binary_search(item, ordered_list, start, end, item_dict):
    if end>=start: 
        if item not in item_dict:
            mid = end+start//2 
            if ordered_list[mid] == item:
                item_dict[item] = mid
            elif ordered_list[mid]<item:
                item_dict[item] = binary_search(item, ordered_list, mid+1, end, item_dict)

            else:
                item_dict[item] = binary_search(item, ordered_list, start, mid-1, item_dict)

    else: 
        return None
    
    print(item_dict)
    return item_dict.get(item)


list1 = [3,5,17,45,100,125,350,500]
list2 = [""American Gods"", ""Coraline"", ""Good Omens"", ""Neverwhere"", ""The Graveyard Book""]
list3 = [ 2, 3, 4, 10, 40 ]
list4 = [ 'a','b','c','d','e','f','g','h','i','j' ]

print(test_binary_search(125, list1, 0, len(list1)-1,dict(),5))
print(test_binary_search(""The Sandman"", list2, 0, len(list2)-1,dict(),None))
print(test_binary_search(40, list3, 0, len(list3)-1,dict(),4))
print(test_binary_search('i', list4, 0, len(list4)-1,dict(),8))

```",2024-12-02T21:45:37+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 2",martinamrc,"```
# Exponentiation

# Testing the function
def test_exponentiation(base_number, exponent, res_dict, expected):
    result = exponentiation(base_number, exponent, res_dict)
    if expected == result:
       return True
    else:
       return False

# Code 
def exponentiation(base_number, exponent, res_dict):
    n = (base_number, exponent)
    if n not in res_dict:
        if exponent == 0:
            res_dict[n] = 1
        else:
           res_dict[n] =  base_number * exponentiation(base_number, exponent - 1, res_dict) 
    
    return res_dict.get(n)

print(test_exponentiation(2, 0, dict(), 1))
print(test_exponentiation(3, 4, dict(), 81))
print(test_exponentiation(17, 1, dict(), 17))
print(test_exponentiation(2, 8, dict(), 256))
print(test_exponentiation(8, 5, dict(), 32768))
```
<img width=""365"" alt=""Screenshot 2024-12-03 alle 11 09 29"" src=""https://github.com/user-attachments/assets/ba42321c-aa59-4450-88dc-2deb5526494c"">

",2024-12-03T10:11:52+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 2",alispada,"def exponentiation (base_n, exponent, d):
    key = base_n ** exponent
    if key in d:
        return d[key]
    if exponent == 0:
        d[key] = 1
        return d[key]
    elif base_n > 0 and exponent > 0:
        d[key] = base_n * exponentiation(base_n, exponent -1, d)
        return d.get(key)
    
def exponentiation_test (base_n, exponent, d, expected):
    result = base_n * exponentiation(base_n, exponent -1, d)
    if result == expected:
        return True
    else:
        return False

dict= {}
#test
print(exponentiation_test(2,2,dict,4))
print(exponentiation_test(9,2,dict,81))
print(exponentiation_test(11,3,dict,1331))
print(exponentiation_test(2,1,dict,2))
print(exponentiation(2,0,dict))

#output
True
True
True
True
1
",2024-12-03T11:15:10+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 2",maridematteis,"<img width=""814"" alt=""Screenshot 2024-12-03 alle 16 33 20"" src=""https://github.com/user-attachments/assets/4ad48aaf-8661-42a9-ab2a-3c8bb9b6ec2b"">
",2024-12-03T15:36:44+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 2",KikaYang,"```
def exponentiation(base_number, exponent, r_dict):
    r_key = (base_number, exponent)

    if r_key not in r_dict: 
        
        if exponent == 0:
            r_dict[r_key] = 1
        elif exponent == 1:
            r_dict[r_key] = base_number
        else:
            r_dict[r_key] = base_number * exponentiation(base_number, exponent - 1, r_dict)
    
        return r_dict.get(r_key)
```",2024-12-03T17:23:25+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 2",theair-hub,"sorry but I couldn't make it work for square roots
![image](https://github.com/user-attachments/assets/b1cafdee-cb2e-4d43-9bc9-b46a64c1e721) 
",2024-12-03T19:12:35+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 2",lisitein,"
<img width=""754"" alt=""截屏2024-12-04 00 42 13"" src=""https://github.com/user-attachments/assets/55ffb5c7-eda0-42d4-837f-924139c0a07c"">

```
def binary_search(item, ordered_list, start, end, dict={}):
    if len(ordered_list) > 0 and start <= end:
        mid = (start + end) // 2
        mid_item = ordered_list[mid]
        if item == mid_item:
            dict[item] = mid
        elif mid_item < item:
            dict[item] = binary_search(item, ordered_list, mid + 1, end, dict)
        else:
            dict[item]= binary_search(item, ordered_list, start, mid - 1)
    return dict.get(item)

def test_binary_search(item, ordered_list, start, end, expected):
    result = binary_search(item, ordered_list, start, end, dict={})
    if expected == result:
        return True
    else:
        return False
    
```",2024-12-03T23:42:51+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 2",arinee01,"<img width=""806"" alt=""Снимок экрана 2024-12-04 в 17 00 09"" src=""https://github.com/user-attachments/assets/9c5efbd9-0619-49d1-91f4-b284a721c509"">
",2024-12-04T16:00:36+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 2",shiho1000,"```python
def test_exponentiation_dp(base_number, exponent, sol_dict, expected):
    result = exponentiation_dp(base_number, exponent, sol_dict)
    if expected == result:
        return True
    else:
        return False
    
def exponentiation_dp(base_number, exponent, sol_dict):
    base_and_exponent = (base_number, exponent)
    if base_and_exponent not in sol_dict:

        if exponent == 0:
            sol_dict[base_and_exponent] = 1
        elif base_number == 0:
            sol_dict[base_and_exponent] = 0
        else:
            sol_dict[base_and_exponent] = base_number * exponentiation_dp(base_number, exponent-1, sol_dict)
    return sol_dict[base_and_exponent]

 
test_dict = {}
print(test_exponentiation_dp(2,3,test_dict,8)) 
print(test_exponentiation_dp(0,0,test_dict,1))
print(test_exponentiation_dp(1,17,test_dict,1))
print(test_exponentiation_dp(3,0,test_dict,1))
print(test_exponentiation_dp(0,4,test_dict,0))
print(test_exponentiation_dp(-3,3,test_dict,-27))


``` ",2024-12-04T16:33:01+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 1",ValkyrieCain9,"For this I adapted the multiplication function even further so that it is dynamic but can also handle positive and negative integers. To do this I used the absolute value function `abs()`, which forces an integer to be positive. The nature of the multiplication function needs the second integer value to be positive to run however for the case where the first int is pos and the second int is neg, the answer returned should be neg. To handle this case I used `-abs()`, which forces an interger to be negative. 

I also used a tuple for the key of the dictionary so that I could save both values of the multiplication as the key for reference

```
# Test case for the algorithm
def test_multiplication(int_1, int_2, sol_dict):
    if int_1*int_2 == multiplication(int_1, int_2, sol_dict):
        return True 
    else:
        return False
    
# Code of the algorithm
def multiplication(int_1, int_2, sol_dict):
    #save the two numbers in a tuple to be used as the key in the dictionary 
    mult_key = (int_1,int_2) 
    if mult_key not in sol_dict:
        if int_2 == 0:
            sol_dict[mult_key] = 0
        elif int_2 < 0 and int_1 > 0:
            #if the first int is pos and the second int is neg the answer needs to remain neg 
            sol_dict[mult_key] = -abs(int_1 + multiplication(int_1, abs(int_2) - 1, sol_dict))
        elif int_2 < 0 and int_1 < 0:
            #if both ints are neg the answer will be pos
            sol_dict[mult_key] = abs(int_1) + multiplication(abs(int_1), abs(int_2) - 1, sol_dict)
        else:
            sol_dict[mult_key] = int_1 + multiplication(int_1, abs(int_2) - 1, sol_dict)
    
    return sol_dict.get(mult_key)


print(test_multiplication(3,8,dict()))
#True
print(test_multiplication(9,25,dict()))
#True
print(test_multiplication(4,-3,dict()))
#True
print(test_multiplication(-10,-8,dict()))
#True
print(test_multiplication(-25,2,dict()))
#True
```",2024-12-02T12:05:08+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 1",lisitein,"<img width=""352"" alt=""截屏2024-12-02 16 13 31"" src=""https://github.com/user-attachments/assets/54d132b0-3d5e-4d02-bd9f-569b642e3ef8"">

```
def test_multiplication(int_1, int_2, expected):
    result = multiplication(int_1, int_2, solution_dict={})
    if expected == result:
        return True

def multiplication(int_1, int_2, solution_dict):
    if int_1 not in solution_dict:
        if int_2 == 0:
            solution_dict[int_2] = 0
        elif int_2 == 1:
            solution_dict[int_2] = int_1
        elif int_2 == -1:
            solution_dict[int_2] = -int_1
        elif int_2 > 0: 
            solution_dict[int_2] = multiplication(int_1, int_2-1, solution_dict) + int_1
        else:
            solution_dict[int_2] = multiplication(int_1, int_2+1, solution_dict) - int_1

    return solution_dict[int_2]
    ```",2024-12-02T15:16:17+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 1",OLIVER792001,"<img width=""522"" alt=""截屏2024-12-02 19 45 40"" src=""https://github.com/user-attachments/assets/56827a2f-44cf-40b8-8dc7-13eca5c7cdaf"">
",2024-12-02T18:45:54+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 1",yutong316,"Because I am not very familiar with how to handle negative number operations🙁, my result is the multiplication of `int_1` and `int_2` under the condition that both are greater than or equal to 0

![image](https://github.com/user-attachments/assets/c2c6b9ef-6864-4368-94f8-5494095a3a36)
",2024-12-02T20:47:32+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 1",martinamrc,"```
# Testing
def test_multiplication(int_1, int_2, solution_dict, expected):
    result = multiplication(int_1, int_2, solution_dict)
    if expected == result:
        return True
    else:
        return False

# Code    
def multiplication(int_1, int_2, solution_dict):
    n = (int_1, int_2)                                 
    if n not in solution_dict:        
       if int_2 == 0:               
            solution_dict[n] = 0
       else:
            solution_dict[n] = int_1 + multiplication(int_1, int_2 - 1, solution_dict)

    return solution_dict.get(n)     


print(test_multiplication(0, 0, dict(), 0))  
print(test_multiplication(3, 4, dict(), 12))
print(test_multiplication(1, 1, dict(), 1))
print(test_multiplication(5, 6, dict(), 30))
```

<img width=""229"" alt=""Screenshot 2024-12-03 alle 11 14 47"" src=""https://github.com/user-attachments/assets/f6694430-2140-4c5a-85e9-0e79265d1792"">
",2024-12-03T10:16:25+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 1",maridematteis,"
<img width=""756"" alt=""Screenshot 2024-12-03 alle 16 26 45"" src=""https://github.com/user-attachments/assets/3404f339-cb2d-4427-a107-956d4ab5aeee"">

",2024-12-03T10:36:47+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 1",KikaYang,"```
def multiplication(int_1, int_2, s_dict):
    if s_dict is None:
        s_dict = {}
    
    key_1 = (min(int_1, int_2), max(int_1, int_2))
    
    if key_1 not in s_dict:
        if int_1 < 0 and int_2 < 0:
            s_dict[key_1] = multiplication(-int_1, -int_2, s_dict)
        elif int_1 < 0 or int_2 < 0:
            s_dict[key_1] = -multiplication(abs(int_1), abs(int_2), s_dict)
        elif int_1 == 0 or int_2 == 0:
            s_dict[key_1] = 0
        elif int_1 == 1:
            s_dict[key_1] = int_2
        elif int_2 == 1:
            s_dict[key_1] = int_1
        else:
            s_dict[key_1] = int_2 + multiplication(int_1 - 1, int_2, s_dict)
    
    return s_dict.get(key_1)
```
",2024-12-03T17:22:41+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 1",theair-hub,"![image](https://github.com/user-attachments/assets/a3b1cbe5-d138-45c3-b053-da9ad403294a)
",2024-12-03T18:31:22+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 1",arinee01,"<img width=""652"" alt=""Снимок экрана 2024-12-04 в 16 55 20"" src=""https://github.com/user-attachments/assets/882ed694-46db-47f5-84fb-1787a039251b"">
",2024-12-04T15:55:48+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 1",shiho1000,"```python
def test_multiplication_dp(int_1, int_2, solution_dict, expected):
    result = multiplication_dp(int_1, int_2, solution_dict)
    if expected == result:
        return True
    else:
        return False

def multiplication_dp(int_1, int_2, solution_dict):
    if int_1 < int_2:
        pair = (int_1, int_2)
    else:   
        pair = (int_2, int_1)

    if pair not in solution_dict:
        if int_2 == 0:
            solution_dict[pair] = 0 
        else:
            solution_dict[pair] = int_1 + multiplication_dp(int_1, int_2 - 1, solution_dict)
    
    return solution_dict[pair]

my_dict = {}

print(test_multiplication_dp(3,4,my_dict,12)) #True
print(test_multiplication_dp(0,1,my_dict,0)) #True
print(test_multiplication_dp(0,5,my_dict,0)) #True
print(test_multiplication_dp(6,7,my_dict,42)) #True
print(test_multiplication_dp(-3,7,my_dict,-21)) #True
``` ",2024-12-04T16:29:03+00:00
comp-think/2024-2025,"Lecture ""Dynamic programming algorithms"", exercise 1",nicoldamelio,"<img width=""719"" alt=""Screenshot 2024-12-15 alle 18 35 51"" src=""https://github.com/user-attachments/assets/8aee8256-9763-4831-ac50-ddee09f89135"" />
",2024-12-15T17:36:31+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 3",ValkyrieCain9,"This function calls the partition() function which was defined in the previous exercise. I had a little trouble here because I misunderstood which value should be used as the pivot position and when the list slice only had one item it would raise an error because of how my partition() function was defined.  Once I realised we should reuse the ""start"" parameter from the quicksort() function as the pivot position in partition() everything ran smoothly.

```
def test_quicksort(input_list, start, end):
    mylist = quicksort(input_list, start, end)
    complist = input_list.sort()
    if mylist == complist:
        return True
    else:
        return False

def quicksort(input_list, start, end):
    #this function will only run if the list partition has more than one value in it
    #if not it is assumed that the item is then already in the correct position
    if start<end:
        #when this function calls the partition function it uses the value at start as the pivot position
        part = partition(input_list, start, end, start)

        #now the list has been partitioned with all items less than input_list[part] on the left of it
        #and all the items more than input_list[part] on the right of it
        #now we can call quicksort recursively on the each of the new parts created

        #sorting items on the left side of the pivot value
        quicksort(input_list, start, part-1)

        #sorting items on the right side of the pivot value
        quicksort(input_list, part+1, end)


list1 = [""The Graveyard Book"", ""Coraline"", ""Good Omens"", ""Neverwhere"", ""American Gods"", ""Sandman""]
list2 = [23, 90, 19, 65, 2, 30]
list3 = [7, 5, 13, 6, 4, 2, 1, 8]
list4 = [""Poliwag"", ""Ivysaur"", ""Charmander"", ""Golduck"", ""Kadabra"", ""Abra""]

print(test_quicksort(list1,0,len(list1)-1))
#True
print(test_quicksort(list2,0,len(list2)-1))
#True
print(test_quicksort(list3,0,len(list3)-1))
#True
print(test_quicksort(list4,0,len(list4)-1))
#True
```
",2024-11-29T10:48:11+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 3",shiho1000,"```python

def test_quicksort(input_list, start, end, expected):
    result = quicksort(input_list, start, end)
    if expected == result:
        return True
    else:
        return False

def quicksort(input_list, start, end):
    if start >= end:
        return input_list[start:end+1]
    else:
        pivot = partition(input_list, start, end, start)
        quicksort(input_list,start,pivot-1) 
        quicksort(input_list,pivot+1,end)
    return input_list[start:end+1]

list1 = [5,1,7,4,3,2,6]
list2 = [""Harry"", ""Ron"", ""Hermione"", ""Dumbledore"", ""Voldemort""]

print(test_quicksort(list1,0,len(list1)-1,[1,2,3,4,5,6,7]))
#True
print(test_quicksort(list2,0,len(list2)-1,[""Dumbledore"", ""Harry"", ""Hermione"", ""Ron"", ""Voldemort""]))
#True
print(test_quicksort([4,2,8,5,0],1,3,[2,5,8]))
#True
print(test_quicksort([""Harry"", ""Ron"", ""Hermione"", ""Dumbledore"", ""Voldemort""],1,3,[""Dumbledore"", ""Hermione"", ""Ron""]))
#True

``` 
I struggled at first as I was trying to assign the two partitions to a new defined list, after figuring out that wouldn't work in a recursing operation.
And then I also realized that to run the test function on the same list twice wouldn't work on the second run, as the list is mutable and is already sorted in the first attempt.
",2024-11-30T20:47:27+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 3",arinee01,"<img width=""733"" alt=""Снимок экрана 2024-12-01 в 19 43 41"" src=""https://github.com/user-attachments/assets/c27d1e6a-d697-464c-8d2b-62cf93535742"">
",2024-12-01T18:44:04+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 3",nicoldamelio,"<img width=""670"" alt=""Screenshot 2024-12-15 alle 16 24 14"" src=""https://github.com/user-attachments/assets/309711c4-f313-440c-a8eb-c404fbe104e4"" />
",2024-12-15T15:30:17+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 2",ValkyrieCain9,"```
def partition(input_list, start, end, pivot_pos):
    #check that the position value falls within the range of the start and end values
    if pivot_pos<start or pivot_pos>end:
        return None
    else:
        #this method is based on the one explained in the video by KC Ang
        #using the counters i and j, the algorithm will iterate over the list 
        #and rearange the elements based on the value at the pivot value
        pivot_value = input_list[pivot_pos]
        i = start-1
        j = start
        while j<=end:
            #as explained in the video, if the value at j is less than the pivot value, then the i counter will move up one position
            #and the values at i and at j will swap
            if input_list[j]<pivot_value:
                i+=1
                store = input_list[i]
                input_list[i] = input_list[j]
                input_list[j] = store
                j+=1
            else:
                j+=1
        #once all the values have been rearranged the pivot value will be removed from its original postion
        #and reinsterted at the position space ahead from where the i counter was left
        input_list.remove(pivot_value)
        input_list.insert(i+1, pivot_value)
        return input_list.index(pivot_value)

list1 = [2,7,1,8,6,3,5,4]
list2 = [23, 90, 19, 65, 2, 30]
list3 = [7, 5, 13, 6, 4, 2, 1, 8]

print(test_partition(list1,0,len(list1)-1,7,3))
#True
print(test_partition(list2,0,len(list2)-1,2,1))
#True
print(test_partition(list3,0,len(list3)-1,9,None))
#True
```",2024-11-27T10:37:27+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 2",justyna09549,"<img width=""890"" alt=""Zrzut ekranu 2024-11-27 o 8 36 28 PM"" src=""https://github.com/user-attachments/assets/f261795f-420f-4287-b658-d818f0b78751"">
had a huge problem with tests 2, 3 and 5 returning false. turns out it's because the function actually modifies the list (who would have thought) so redifining the list after each test fixed it. ",2024-11-27T19:40:53+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 2",yutong316,"![image](https://github.com/user-attachments/assets/aab314fd-e7db-450e-b014-477ac9743914)
I’m a bit confused about the part in Ang’s video where i and j are set and swapped, so I didn’t follow that method. However I think this approach still works.",2024-11-28T19:44:35+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 2",KikaYang,"<img width=""1135"" alt=""Screenshot 2024-11-29 at 02 25 45"" src=""https://github.com/user-attachments/assets/2688e5de-6818-401c-96c7-532a321bb845"">
",2024-11-29T01:27:20+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 2",shiho1000,"```python
def test_partition(input_list, start, end, pivot_position, expected):
    result = partition(input_list, start, end, pivot_position)
    if expected == result:
        return True
    else:
        return False

def partition(input_list, start, end, pivot_position):
    if start > pivot_position or pivot_position > end:
        return None
    
    j = start
    i = start - 1
    pivot_item = input_list[pivot_position]
    while j <= end:
        if input_list[j] >= pivot_item:
            j += 1
        else:
            input_list[j] < pivot_item
            i += 1
            input_list[j] , input_list[i] = input_list[i], input_list[j] # 入れかえる
            j += 1
    input_list.remove(pivot_item)
    input_list.insert(i+1, pivot_item)
    return input_list.index(pivot_item)


my_list1= list([""The Graveyard Book"", ""Coraline"", ""Neverwhere"", ""Good Omens"", ""American Gods""])
my_list2 = [0,8,0,6,5,7,3,3,2,1,3]
my_list3 = [""Harry"", ""Ron"", ""Hermione"", ""Dumbledore"", ""Snape"", ""Voldemort""]

print(test_partition(my_list1,1,4,1,2))  #True
print(test_partition(my_list2,0,len(my_list2)-1,3,8)) #True
print(test_partition(my_list3,0,len(my_list3)-1,3,0)) #True
print(test_partition(my_list3,0,3,4,None)) #True

``` ",2024-11-30T19:35:07+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 2",lisitein,"the test algorithm can not work because it just divide the list into two parts, but in each part the elements are not ordered.
Except that, I think my algorithm has arrived every conditions that are mentioned above.
```
def partition(input_list, start, end, pivot_position):
    if pivot_position < start or pivot_position > end:
        return None
    else:
        pivot = input_list[pivot_position]
        i = start-1
        j = start
        input_list.remove(pivot)
        while j < end:
            if input_list[j] <= pivot:
                i += 1
                input_list[i], input_list[j] = input_list[j], input_list[i]
            j += 1
        input_list.insert(i+1, pivot)
        return input_list, i+1

def test_partition(input_list, start, end, pivot_position, expected):
    result = partition(input_list, start, end, pivot_position)
    if result == expected:
        return True
    

my_list = list([""The Graveyard Book"", ""Coraline"", ""Neverwhere"", ""Good Omens"", ""American Gods""])
print(test_partition(my_list, 1, 4, 1,[""The Graveyard Book"", ""American Gods"", ""Coraline"", ""Neverwhere"", ""Good Omens""]))
print(partition(my_list, 1, 3, 2))

number = [3,2,5,6,7,1,8,10,6,4]
print(partition(number, 0, len(number)-2, 9))
print(partition(number, 0, 6, 5))
```
<img width=""594"" alt=""截屏2024-12-01 01 10 54"" src=""https://github.com/user-attachments/assets/bd35d59a-84d1-4a24-8283-d6c950f0d1a1"">
",2024-12-01T00:20:13+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 2",ERendall,"<img width=""1470"" alt=""image"" src=""https://github.com/user-attachments/assets/aafb0c3b-efef-4cc6-949b-300bc177039b"">

I took a slightly different approach, moving the pivot position[index] to the end of the list and then comparing (using j) each value in the list.

I hope it is a nice alternative.... I used one of the lists used by @ValkyrieCain9 to see if I got the same result. Seemed to work... ",2024-12-01T17:27:22+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 2",arinee01,"<img width=""720"" alt=""Снимок экрана 2024-12-01 в 18 57 04"" src=""https://github.com/user-attachments/assets/fe9ff8d3-e353-43fe-8dca-50ed8ad1003e"">
",2024-12-01T17:57:29+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 2",orboboro,"```
def test_partition(input_list, start, end, pivot_position, expected):

    result = partition(input_list, start, end, pivot_position)

    if result != expected:
        
        return False

    else:

        return True

def partition(input_list, start, end, pivot_position): 
                                                       
    i=start-1                                         
    j=start
    pivot=input_list[pivot_position]

    while j <= end:

        if input_list[j] < pivot:

            i+=1

            input_list[j], input_list[i] = input_list[i], input_list[j] 

        j+=1

    input_list.remove(pivot)

    list_part_1=input_list[:i+1]
    list_part_2=input_list[i+1:]

    new_list=list_part_1 + [pivot] + list_part_2

    new_pivot_index=new_list.index(pivot)

    return new_list, new_pivot_index

list=[2,5,4,1,9,7,3]
print(test_partition(list, 0, 6, 1, ([2, 4, 1, 3, 5, 9, 7], 4)))

# Solo la parte iniziale della lista è interessata da partition
list=[2,5,4,1,9,7,3] 
print(test_partition(list, 0, 2, 1, ([2, 4, 5, 1, 9, 7, 3], 2)))

# 5 ripetuto due volte
list=[2,5,4,5,8,7,3] 
print(test_partition(list, 0, 6, 3, ([2, 4, 3, 5, 8, 7, 5], 3)))

# True
# True
# True

list=[""From the Beginning"", ""Sultans of Swing"", ""The Great Gig in che Sky"", ""Roundabout"", ""Children of the Moon""]
print(test_partition(list, 0, 4, 0, (['Children of the Moon','From the Beginning','Sultans of Swing','The Great Gig in che Sky','Roundabout'], 1)))

# Solo la parte finale della lista è interessata da partition
list=[""From the Beginning"", ""Sultans of Swing"", ""The Great Gig in che Sky"", ""Roundabout"", ""Children of the Moon""]
print(test_partition(list, 3, 4, 4, (['From the Beginning','Sultans of Swing','The Great Gig in che Sky','Children of the Moon','Roundabout'], 3)))

# Un solo elemento nella lista
list=[""From the Beginning""]
print(test_partition(list, 0 ,0 ,0 , (['From the Beginning'], 0)))


# True
# True
# True
```",2024-12-03T12:56:18+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 2",nicoldamelio,"<img width=""1064"" alt=""Screenshot 2024-12-15 alle 12 06 03"" src=""https://github.com/user-attachments/assets/b9c86f59-88d4-4c80-a3fa-2c764978da32"" />
",2024-12-15T11:07:31+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 1",ValkyrieCain9,"```
#BINARY SEARCH FUNCITON USING RECURSION
def test_binary_search(item, ordered_list, start, end, expected):
    if expected == binary_search(item, ordered_list, start, end):
        return True
    else:
        return False

def binary_search(item, ordered_list, start, end):
    #for the first iteration start and end will be the beginning and end of the list 
    #(which we can find by taking len(ordered list)-1)
    if end>=start: #this checks that there is still items in the list to check 
        mid = end+start//2 
        if ordered_list[mid] == item:
            return mid
        elif ordered_list[mid]<item:
            return binary_search(item, ordered_list, mid+1, end)
            #run through the function again with the mid point acting as the start of the new list
        else:
            return binary_search(item, ordered_list, start, mid-1 )
            #run through the function again with the mid point acting as the end of the new list 
    else: #the function has iterated on itself making the input list smaller until end<start and not found the item
        return None


list1 = [3,5,17,45,100,125,350,500]
list2 = [""American Gods"", ""Coraline"", ""Good Omens"", ""Neverwhere"", ""The Graveyard Book""]
list3 = [ 2, 3, 4, 10, 40 ]

print(test_binary_search(125, list1, 0, len(list1)-1,5))
#True
print(test_binary_search(""The Sandman"", list2, 0, len(list2)-1,None))
#True
print(test_binary_search(40, list3, 0, len(list3)-1,4))
#True
```",2024-11-27T10:19:57+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 1",justyna09549,"<img width=""825"" alt=""Zrzut ekranu 2024-11-27 o 1 05 18 PM"" src=""https://github.com/user-attachments/assets/8eb59364-a876-4d80-8f1e-3f6e109b52fb"">
",2024-11-27T12:06:46+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 1",rumana-mh,"![Screenshot 2024-11-27 172447](https://github.com/user-attachments/assets/a406e12f-d201-4e88-a7b6-d9b01d91836b)
",2024-11-27T16:26:00+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 1",yutong316,"![image](https://github.com/user-attachments/assets/43a0dcd2-c606-440e-8d71-b20b32fd90dc)
",2024-11-27T23:48:01+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 1",alispada,"def binary_search(item, ordered_list, start, end):
    if start > end:
        return None
    middle = (start + end) // 2
    middle_item = ordered_list[middle]
    if middle_item == item:
        return ordered_list.index(item)
    if middle_item < item:
        return binary_search(item, ordered_list, middle +1, end)
    if middle_item > item:
        return binary_search(item, ordered_list, start, middle -1)
    
def binary_search_test(item, ordered_list, start, end, expected):
    if expected == binary_search(item, ordered_list, start, end):
        return True
    else:
        return False

amici = [""Alice"", ""Bob"", ""Carlo"", ""Daniele"", ""Elio"", ""Francesca"", ""Giuli"",""Hermione""]

print(binary_search_test(""Daniele"", amici, 0, 7, 3)) --> True
print(binary_search_test(""Daniele"", amici, 0, 7, 5)) --> False
print(binary_search_test(""Elio"", amici, 0, 7, 4)) --> True
print(binary_search(""Alice"", amici, 0, 7)) --> 0


   ",2024-11-28T17:27:46+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 1",theair-hub,"![image](https://github.com/user-attachments/assets/5b9c3149-e361-46c9-b1ba-bfcdda1f471e)
",2024-11-30T17:13:36+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 1",shiho1000,"```python
def test_binary_search(item, ordered_list, start, end, expected):
    result = binary_search(item, ordered_list, start, end)
    if expected == result:
        return True
    else:
        return False
    
def binary_search(item, ordered_list, start, end):
        mid = (start + end) // 2
        if item in ordered_list:
            i_index = ordered_list.index(item)
            if i_index > end or i_index < start:
                return None 
    
            if mid == i_index:
                return mid
            elif mid < i_index:
                return binary_search(item, ordered_list, mid+1, end)
            else:
                return binary_search(item, ordered_list, start, mid-1)
        else:
            return None

list1 = [1,2,3,4,5]
list2 = [""a"",""b"",""c"",""d"",""e"",1,2,3,4,5]

print(test_binary_search(2,list1,0,len(list1)-1,1)) #True
print(test_binary_search(7,list1,0,len(list1)-1,None)) #True
print(test_binary_search(5,list2,0,len(list2)-1,9)) #True
print(test_binary_search(""b"",list2,0,len(list2)-1,1)) #True
``` ",2024-11-30T19:29:27+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 1",arinee01,"<img width=""657"" alt=""Снимок экрана 2024-12-01 в 16 55 46"" src=""https://github.com/user-attachments/assets/dce357cd-0713-4c41-adec-05bc709cd8ca"">
",2024-12-01T15:56:18+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 1",ERendall,"<img width=""1470"" alt=""image"" src=""https://github.com/user-attachments/assets/d8ec4e8d-55c6-4ab5-8443-7575bb8ebf5b"">
",2024-12-01T16:11:15+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 1",SinerYuu,"
![image](https://github.com/user-attachments/assets/a4b2c62e-c1f4-4b16-a28c-ba2258b4bb96)

",2024-12-01T17:53:25+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 1",orboboro,"```
def test_binary_search(item, ordered_list, start, end, expected):

    result = binary_search(item, ordered_list, start, end)

    if result != expected:
        
        return False

    else:

        return True

def binary_search(item, ordered_list, start, end):

    mid_index = start + (end-start)//2

    while end-start >= 1:

        if ordered_list[mid_index] == item:

            return mid_index
        
        elif ordered_list[mid_index] < item:

            return binary_search(item, ordered_list, mid_index + 1, end)

        elif ordered_list[mid_index] > item:

            return binary_search(item, ordered_list, start, mid_index)
    
    if ordered_list[0] == item:

        return 0
    
    else:

        return None


list_1=[1,2,3,5,7,11,13,17,19,23,29,31]
list_2=[""Children of the Moon"", ""From the Beginning"", ""Roundabout"", ""Sultans of Swing"", ""The Great Gig in che Sky""]

print(test_binary_search(31, list_1, 0, len(list_1), 11))
print(test_binary_search(3, list_1, 7, len(list_1), None))
print(test_binary_search(8, list_1, 0, len(list_1), None))
print(test_binary_search(""From the Beginning"", list_2, 0, len(list_2), 1))
print(test_binary_search(""From the Beginning"", list_2, 2, 4, None))
print(test_binary_search(""Every Breath You Take"", list_2, 0, len(list_2), None))

# outputs:
    
#True
#True
#True
#True
#True
#True

```",2024-12-01T21:00:56+00:00
comp-think/2024-2025,"Lecture ""Divide and conquer algorithms"", exercise 1",nicoldamelio,"<img width=""679"" alt=""Screenshot 2024-12-10 alle 19 07 50"" src=""https://github.com/user-attachments/assets/b5181a28-2ffe-4fc4-b6a2-d1d9627ca12e"">
",2024-12-10T18:11:21+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",epistrephein,"```python
# Code
def fib(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)

# Test case
def test_fib(n, expected):
    result = fib(n)
    if expected == result:
        return True
    else:
        return False

# Test runs
print(test_fib(0, 0))  # True
print(test_fib(1, 1))  # True
print(test_fib(2, 1))  # True
print(test_fib(6, 8))  # True
```",2024-11-25T14:37:14+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",KikaYang,"<img width=""1137"" alt=""Screenshot 2024-11-25 at 19 32 59"" src=""https://github.com/user-attachments/assets/61b2e7b3-9a92-4846-86b7-1ad2db952566"">
",2024-11-25T18:33:13+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",maridematteis,"<img width=""786"" alt=""Screenshot 2024-11-25 alle 19 32 49"" src=""https://github.com/user-attachments/assets/ae608364-050e-4e39-a5a2-9114534ed5d1"">
",2024-11-25T18:33:30+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",mir-pin,"![image](https://github.com/user-attachments/assets/2bace329-02a6-4ddf-ac24-644287e6f2c7)
",2024-11-25T19:44:33+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",ValkyrieCain9,"```
def test_fib(n,expected):
    if fib(n) == expected:
        return True
    else:
        return False
    
def fib(n):
    if n<=0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)
    
print(test_fib(17,1597))
#True
print(test_fib(12,144))
#True
print(test_fib(15,610))
#True
```",2024-11-25T23:03:14+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",theair-hub,"![image](https://github.com/user-attachments/assets/28b9c2ec-0166-4713-96a9-f844c3400830)
",2024-11-26T00:54:03+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",shiho1000,"```python
def test_fib(n, expected):
    result = fib(n)
    if expected == result:
        return True
    else:
        return False

def fib(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(test_fib(7,13)) #True
print(test_fib(10,55)) #True
print(test_fib(-1,0)) #True
print(test_fib(1,1)) #True
``` ",2024-11-26T11:19:06+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",lisitein,"```
def test_fib(n, expected):
    result = fib(n)
    if result == expected:
        return True
    
def fib(n):   
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)
```
<img width=""259"" alt=""截屏2024-11-26 15 25 05"" src=""https://github.com/user-attachments/assets/735e688c-f857-4977-989a-89ec334c1c30"">
",2024-11-26T14:25:23+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",martinamrc,"```
# Testing
def test_fib(n, expected):
    result = fib(n)
    if expected == result:
       return True
    else:
       return False
    
# Code
def fib(n):
    if n <= 0:
       return 0
    elif n <= 1:
       return 1
    else:
       res = fib(n - 2) + fib(n - 1)
       return res

print(test_fib(0, 0))
print(test_fib(1, 1))
print(test_fib(4, 3))

print(fib(4))
print(fib(7))
```
<img width=""164"" alt=""Screenshot 2024-11-26 alle 17 43 10"" src=""https://github.com/user-attachments/assets/325e4875-b73c-409e-95af-fa1f74d9be9e"">
",2024-11-26T16:43:35+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",arinee01,"<img width=""805"" alt=""Снимок экрана 2024-11-26 в 20 03 46"" src=""https://github.com/user-attachments/assets/cd0d0f42-7e00-4e06-89a3-42c73533eb29"">
",2024-11-26T19:04:10+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",justyna09549,"<img width=""759"" alt=""Zrzut ekranu 2024-11-26 o 10 21 37 PM"" src=""https://github.com/user-attachments/assets/af95e064-2068-4f0c-9fc4-1d247d6c828f"">
",2024-11-26T21:23:35+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",orboboro,"```
def test_Fib(input_n, expected):

    result=Fib(input_n)

    if result!=expected:

        return False
    
    else:
        return True

def Fib(n):

    if n <= 0:

        return 0
    
    elif n == 1:

        return 1
    
    else:

        return Fib(n-1) + Fib(n-2)

print(test_Fib(0, 0))
# True
print(test_Fib(3, 2))
# True
print(test_Fib(10, 55))
# True
```
",2024-11-27T01:37:15+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",digitalctrlv,"```
def test_fib(n, expected):
    result = fib(n)
    if expected == result:
       return True
    else:
       return False

def fib(n):
    if n <= 0:
        return 0
    if n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

test_fib(6,8)
True
```",2024-11-27T17:14:42+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",ERendall,"<img width=""1470"" alt=""image"" src=""https://github.com/user-attachments/assets/47183213-0ab3-4122-8b4f-a29c664a15a6"">
",2024-12-01T15:06:58+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",nicoldamelio,"<img width=""851"" alt=""Screenshot 2024-12-06 alle 14 28 20"" src=""https://github.com/user-attachments/assets/eb06fe20-1aa3-4980-85dd-d4f6f7bbea22"">
",2024-12-06T13:29:28+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 2",martinaucch,"```
def test_fib(n, expected):
    result = fib(n)
    if expected == result:
        return True
    else:
        return False
    
def fib(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else: 
        return fib(n-1)+fib(n-2)

print(test_fib(7, 13))
print(test_fib(23, 28657))
print(test_fib(1, 1))
```
<img width=""523"" alt=""Screenshot 2024-12-15 alle 15 35 37"" src=""https://github.com/user-attachments/assets/b21ed856-7c73-4657-aa1a-a66b4268bf03"" />
",2024-12-15T14:35:48+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",epistrephein,"```python
# Code
def exponentiation(base_number, exponent):
    if exponent == 0:
        return 1
    else:
        return base_number * exponentiation(base_number, exponent - 1)

# Test case
def test_exponentiation(base_number, exponent, expected):
    result = exponentiation(base_number, exponent)
    if expected == result:
        return True
    else:
        return False

# Test runs
print(test_exponentiation(3, 4, 81))   # True
print(test_exponentiation(17, 1, 17))  # True
print(test_exponentiation(2, 0, 1))    # True
```",2024-11-25T14:35:20+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",KikaYang,"[
<img width=""1147"" alt=""Screenshot 2024-11-25 at 19 23 50"" src=""https://github.com/user-attachments/assets/107c13c6-0df6-4cbc-84c2-513b07dd7e5f"">
](url)",2024-11-25T18:24:16+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",maridematteis,"<img width=""786"" alt=""Screenshot 2024-11-25 alle 19 26 40"" src=""https://github.com/user-attachments/assets/3f9f9b48-e493-487a-a9ff-930722bc969b"">
",2024-11-25T18:34:31+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",mir-pin,"![image](https://github.com/user-attachments/assets/ad47defc-fbd2-4ff2-8da5-ac7a9f9c264d)
",2024-11-25T19:21:52+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",ValkyrieCain9,"```
def test_exponentiation(base_num, exponent, expected):
    if exponentiation(base_num, exponent) == expected:
        return True
    else:
        return False
    
def exponentiation(base_num, exponent):
    if exponent == 0:
        return 1
    else:
        return base_num * exponentiation(base_num,exponent-1)

print(test_exponentiation(3,4,81))
#True
print(test_exponentiation(17,1,17))
#True
print(test_exponentiation(2,0,1))
#True

```
I uploaded this from my phone as I don’t have my laptop this week so if there are any errors please let me know ",2024-11-25T22:58:54+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",theair-hub,"![image](https://github.com/user-attachments/assets/bd62ac6d-8f3b-4793-b940-b1711a91d665)
",2024-11-26T00:40:40+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",shiho1000,"```python
def test_exponentiation(base_number, exponent, expected):
    result = exponentiation(base_number, exponent)
    if expected == result:
        return True
    else:
        return False

def exponentiation(base_number, exponent):
    if exponent == 0:
        return 1
    else:
        return base_number * exponentiation(base_number, exponent -1)

print(test_exponentiation(3,4,81)) 
#True
print(test_exponentiation(17,1,17))
#True
print(test_exponentiation(20,0,1))
#True
``` ",2024-11-26T11:14:46+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",lisitein,"```
def test_exponentiation(base_number, exponent, expected):
    expected = base_number ** exponent
    result = exponentiation(base_number, exponent)
    if expected == result:
        return True
    
def exponentiation(base_number, exponent):
    if exponent == 0:
        return 1
    elif exponent < 0:
        return 1 / base_number * exponentiation(base_number, exponent+1)
    else:
        return base_number * exponentiation(base_number, exponent-1)

print (test_exponentiation(3,4,81))#TRUE
print (exponentiation(3,4))
print (test_exponentiation(17,1,17))#TRUE
print (exponentiation(17,1))
print (test_exponentiation(2,0,1))#TRUE
print (exponentiation(2,0))
print (test_exponentiation(2,-1,0.5))#TRUE
print (exponentiation(2,-1))

```
<img width=""43"" alt=""截屏2024-11-26 12 18 54"" src=""https://github.com/user-attachments/assets/95481e18-5243-4d89-a93a-5a6ce4dca523"">

",2024-11-26T11:20:02+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",martinamrc,"```
# Testing the function
def test_exponentiation(base_number, exponent, expected):
    result = exponentiation(base_number, exponent)
    if expected == result:
       return True
    else:
       return False

# Code 
def exponentiation(base_number, exponent):
    if exponent == 0:
       return 1
    else:
       res =  exponentiation(base_number, exponent - 1)      
       return base_number * res

print(test_exponentiation(2, 0, 1))
print(test_exponentiation(3, 4, 81))
print(test_exponentiation(17, 1, 17))

print(exponentiation(2, 3))
print(exponentiation(2, 8))
```

<img width=""235"" alt=""Screenshot 2024-11-26 alle 17 41 13"" src=""https://github.com/user-attachments/assets/5352c18b-5dc4-45a5-9120-c67f33867825"">

",2024-11-26T16:42:14+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",arinee01,"<img width=""779"" alt=""Снимок экрана 2024-11-26 в 19 40 43"" src=""https://github.com/user-attachments/assets/33aae0b8-5136-4043-9b5c-bb28352e6bf1"">
",2024-11-26T18:41:44+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",yutong316,"![image](https://github.com/user-attachments/assets/4b69239f-b520-402c-b0dc-92a35d9aaef1)
",2024-11-26T21:08:53+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",justyna09549,"<img width=""820"" alt=""Zrzut ekranu 2024-11-26 o 10 06 30 PM"" src=""https://github.com/user-attachments/assets/79c595c1-3a9b-49fa-8f64-6b35e8e1a9af"">
",2024-11-26T21:22:58+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",orboboro,"```
def test_exponentiation(base_number, exponent, expected):

    result=exponentiation(base_number,exponent)

    if result!=expected:

        return False
    
    else:
        return True

def exponentiation(base_number, exponent):

    if exponent == 0:

        if base_number == 0:

            return ""indefinito""

        return 1
    
    if exponent < 0:

        return 1 / (base_number * exponentiation(base_number, -(exponent) - 1))
    
    else:

        return base_number * exponentiation(base_number, exponent - 1)

test_exponentiation(0, 0, ""indefinito"")
#True
test_exponentiation(2, 1, 2)
#True
test_exponentiation(2, 4 16)
#True
test_exponentiation(-2, 2, 4)
#True
test_exponentiation(2, -2, 1/4)
#True

```",2024-11-27T01:41:06+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",ERendall,"<img width=""1470"" alt=""image"" src=""https://github.com/user-attachments/assets/05e60cc1-f50d-42e4-b3c9-7ec377ceff6f"">
",2024-11-27T16:31:14+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",digitalctrlv,"```
def test_case(base_number, exponent, expected):
    result = exponentiation(base_number, exponent)
    if result == expected:
        return True
    else:
        return False

def exponentiation(base_number, exponent):
    if exponent == 0:
        return 0
    else:
        return base_number + exponentiation(base_number, exponent-1)

print(test_case(3, 4, 12))
print(test_case(17, 1, 17))
print(test_case(2, 0, 0))

True
True
True
```",2024-11-27T17:17:53+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",nicoldamelio,"<img width=""858"" alt=""Screenshot 2024-12-06 alle 14 15 51"" src=""https://github.com/user-attachments/assets/6044020e-23d7-4ba9-9451-fdb2d3f0a6bb"">
",2024-12-06T13:17:30+00:00
comp-think/2024-2025,"Lecture ""Recursion"", exercise 1",martinaucch,"```
def test_exponentiation(base_number, exponent, expected):
    result= exponentiation(base_number, exponent)
    if expected == result:
        return True
    else:
        return False

def exponentiation(base_number, exponent):
    if exponent == 0:
        return 1
    else: 
        result = exponentiation(base_number, exponent - 1)
        return base_number*result

print(test_exponentiation(3, 4, 81))
print(test_exponentiation(17, 1, 17))
print(test_exponentiation(2, 0, 1))
```
<img width=""534"" alt=""Screenshot 2024-12-15 alle 12 51 55"" src=""https://github.com/user-attachments/assets/abb383eb-1226-4a65-8380-d17eef94cb05"" />
",2024-12-15T11:52:18+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",lisitein,"```
set_hobbit = set({""Frodo"", ""Sam"", ""Pippin"", ""Merry""})
set_magician = set({""Saruman"", ""Gandalf""})
the_ring = dict()
the_ring[""hobbit""] = set_hobbit
the_ring[""magician""] = set_magician
print(the_ring)
# {'hobbit': {'Sam', 'Frodo', 'Pippin', 'Merry'}, 'magician': {'Saruman', 'Gandalf'}}
```",2024-11-20T15:27:31+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",KikaYang,"<img width=""678"" alt=""截屏2024-11-20 17 32 47"" src=""https://github.com/user-attachments/assets/cdd27d66-8c18-4594-b77b-4be6e10e33ed"">
",2024-11-20T16:33:05+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",yutong316,"![image](https://github.com/user-attachments/assets/5a19d05f-1c44-4413-b57c-7bb274be8144)
",2024-11-20T20:18:00+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",rumana-mh,"![Screenshot 2024-11-20 234529](https://github.com/user-attachments/assets/7fa9fdff-d26f-4560-b366-706080359e1e)
",2024-11-20T22:50:43+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",mir-pin,"![image](https://github.com/user-attachments/assets/062dcd9b-3a3c-465e-9450-de7989c28de5)
",2024-11-20T23:18:18+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",maridematteis,"<img width=""748"" alt=""Screenshot 2024-11-21 alle 17 07 11"" src=""https://github.com/user-attachments/assets/8aa64a85-ded4-4b62-9782-d926ce7268a9"">
",2024-11-21T16:08:13+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",shiho1000,"```python
hobbit_dict = dict()
hobbit_dict[""hobbit""] = set({""Frodo"", ""Sam"", ""Pippin"", ""Merry""})

magician_dict = dict()
magician_dict[""magician""] = set({""Saruman"", ""Gandalf""})

hobbit_dict.update(magician_dict)
print(hobbit_dict)
# returns  {'hobbit': {'Merry', 'Frodo', 'Sam', 'Pippin'}, 'magician': {'Gandalf', 'Saruman'}}
``` 
or
```pythonlodr_dict = dict()
lodr_dict[""hobbit""] = set({""Frodo"", ""Sam"", ""Pippin"", ""Merry""})
lodr_dict[""magician""] = set({""Saruman"", ""Gandalf""})
print(lodr_dict)
# returns {'hobbit': {'Merry', 'Frodo', 'Sam', 'Pippin'}, 'magician': {'Gandalf', 'Saruman'}}
``` 
",2024-11-21T18:28:42+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",arinee01,"<img width=""781"" alt=""Снимок экрана 2024-11-22 в 12 33 24"" src=""https://github.com/user-attachments/assets/332f2be1-29f2-4094-96b6-2582647a0b5f"">
",2024-11-22T11:33:52+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",ValkyrieCain9,"```
set_hobbits = {""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
set_magicians = {""Saruman"", ""Gandalf""}
mydict = {""hobbit"":set_hobbits, ""magician"":set_magicians}
print(mydict)
#{'hobbit': {'Pippin', 'Frodo', 'Sam', 'Merry'}, 'magician': {'Saruman', 'Gandalf'}}
```",2024-11-22T17:26:23+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",orboboro,"set_hobbit = set([""Frodo"", ""Sam"", ""Pippin"", ""Merry""])
set_magician = set([""Saruman"", ""Gandalf""])

lotr_dict=dict()

lotr_dict[""hobbit""] = set_hobbit
lotr_dict[""magician""] = set_magician",2024-11-24T12:26:21+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",martinamrc,"```
set_hobbit = {'Frodo', 'Sam', 'Pippin', 'Merry'}
set_magician = {'Saruman', 'Gandalf'}

my_dict = dict()
my_dict['hobbit'] = set_hobbit 
my_dict['magician'] = set_magician

print(my_dict)
print(type(my_dict))
```
<img width=""592"" alt=""Screenshot 2024-11-24 alle 15 04 25"" src=""https://github.com/user-attachments/assets/457328b9-20f5-4126-aba5-fc8dd555f8da"">


",2024-11-24T14:04:58+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",theair-hub,"![image](https://github.com/user-attachments/assets/f4fa5c74-f395-4f35-a75a-972994c68ba6)
",2024-11-24T19:08:04+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",Maryamdadras,"#Step 1
my_set = {""Frodo"", ""Sam"", ""Pippin"", ""Merry"", ""Galadriel"", ""Saruman"", ""Gandalf""}

#Step 2
set_hobbit = {""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
set_magician = {""Saruman"", ""Gandalf""}

#Step 3
my_dictionary = dict()
my_dictionary['hobbit'] = set_hobbit
my_dictionary['magician'] = set_magician

#Step 4
print(my_dictionary)


#out put: {'hobbit': {'Frodo', 'Sam', 'Pippin', 'Merry'}, 'magician': {'Saruman', 'Gandalf'}}
",2024-11-24T20:54:55+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",ERendall,"<img width=""1470"" alt=""image"" src=""https://github.com/user-attachments/assets/eed1692e-32b5-4d13-80ea-9fd2cbf2f610"">
",2024-11-27T15:54:38+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",nicoldamelio,"<img width=""736"" alt=""Screenshot 2024-11-30 alle 22 23 17"" src=""https://github.com/user-attachments/assets/371d2729-5f60-4528-b130-78f6b4c523ed"">
",2024-11-30T21:26:59+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",martinaucch,"```
set_hobbit=set({""Frodo"", ""Sam"", ""Pippin"", ""Merry""})
set_magician=set({""Saruman"", ""Gandalf""})
my_first_dict= dict()
my_first_dict[""hobbit""] = set_hobbit
my_first_dict [""magician""] = set_magician

print(my_first_dict)
```
<img width=""767"" alt=""Screenshot 2024-12-09 alle 00 01 54"" src=""https://github.com/user-attachments/assets/ec877bb7-3f9f-46d4-a9ef-ae7895fd1c90"">

",2024-12-08T23:02:41+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 3",romashovar,"```
set_hobbit = set({""Frodo"", ""Sam"", ""Pippin"", ""Merry""})
set_magician = set({""Saruman"", ""Gandalf""})

my_dictionary = dict()
my_dictionary[""hobbit""] = set_hobbit
my_dictionary[""magician""] = set_magician

print(my_dictionary)
```

> {'hobbit': {'Frodo', 'Merry', 'Sam', 'Pippin'}, 'magician': {'Saruman', 'Gandalf'}}",2024-12-16T22:09:19+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",lisitein,"```
my_set = set()
my_set.update(Hobbits)
my_set.remove(""Bilbo"")
print(my_set)
# {'Sam', 'Merry', 'Pippin', 'Frodo'}
my_set.add(""Galadriel"")
print(my_set)
# {'Sam', 'Merry', 'Pippin', 'Galadriel', 'Frodo'}
my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""})) 
print(my_set)
# {'Sam', 'Merry', 'Saruman', 'Gandalf', 'Pippin', 'Galadriel', 'Frodo'}
```",2024-11-20T15:17:43+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",KikaYang,"<img width=""675"" alt=""截屏2024-11-20 17 23 10"" src=""https://github.com/user-attachments/assets/3f8308b9-5a9d-4adf-adaa-7e4c118790df"">
",2024-11-20T16:23:24+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",yutong316,"![image](https://github.com/user-attachments/assets/18fc0d3f-495e-46ed-8b05-ef524d97d0d2)
",2024-11-20T20:07:01+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",rumana-mh,"![Screenshot 2024-11-20 232514](https://github.com/user-attachments/assets/f3f6b89f-311d-4a5e-bbf1-d8350a8f8a29)
I didn't add the extra ""set "" parenthesis in the last line of instructions and the code worked.. But I was wondering if there was any reason why you added it.. or is it correct as well?",2024-11-20T22:32:05+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",maridematteis,"<img width=""748"" alt=""Screenshot 2024-11-21 alle 16 52 38"" src=""https://github.com/user-attachments/assets/f415d111-d7ec-4619-92d7-59d050e2fc69"">
",2024-11-21T15:53:55+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",shiho1000,"```python
my_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
my_set.remove(""Bilbo"")
my_set.add(""Galadriel"")
my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
print(my_set)

# returns {'Merry', 'Frodo', 'Saruman', 'Gandalf', 'Pippin', 'Sam', 'Galadriel'}
``` 
",2024-11-21T18:23:47+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",arinee01,"<img width=""714"" alt=""Снимок экрана 2024-11-22 в 12 07 36"" src=""https://github.com/user-attachments/assets/9fdf9b8b-9892-4be2-8693-4026d349821c"">
",2024-11-22T11:08:03+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",ValkyrieCain9,"```
my_set.remove(""Bilbo"")
print(my_set)
#{'Pippin', 'Merry', 'Frodo', 'Sam'}

my_set.add(""Galadriel"")
print(my_set)
#{'Frodo', 'Pippin', 'Merry', 'Galadriel', 'Sam'}

my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
print(my_set)
#{'Saruman', 'Frodo', 'Pippin', 'Gandalf', 'Sam', 'Galadriel', 'Merry'}
```",2024-11-22T17:27:46+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",martinamrc,"```
my_set.remove('Bilbo')      # after this the element 'Bilbo' from the set will be removed 
my_set.add('Galadriel')       # after this the element 'Galadriel' will be added to the set
my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))       # this will update my_set with the elements of the new set, but one, which is 'Frodo', since the element would be repeated

print(my_set)

```
<img width=""509"" alt=""Screenshot 2024-11-24 alle 14 56 29"" src=""https://github.com/user-attachments/assets/775596aa-a50a-4c33-b4e8-327a801a937d"">
",2024-11-24T14:00:08+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",theair-hub,"![image](https://github.com/user-attachments/assets/e7eb953f-9ff8-4b15-b202-d51cedb42737)
",2024-11-24T18:51:25+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",Maryamdadras,"#Step 1
my_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
print(my_set)
#out put: {'Bilbo', 'Frodo', 'Sam', 'Pippin', 'Merry'}

#Step 2: remove ""Bilbo""
my_set.remove(""Bilbo"")
print(my_set)
#out put: {'Frodo', 'Sam', 'Pippin', 'Merry'}

#Step 3: add ""Galadriel""
my_set.add(""Galadriel"")
print(my_set)
#out put: {'Frodo', 'Sam', 'Pippin', 'Merry', 'Galadriel'}

#Step 4: update with {""Saruman"", ""Frodo"", ""Gandalf""}
my_set.update({""Saruman"", ""Frodo"", ""Gandalf""})
print(my_set)
#out put: {'Frodo', 'Sam', 'Pippin', 'Merry', 'Galadriel', 'Saruman', 'Gandalf'}",2024-11-24T20:49:23+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",ERendall,"<img width=""1470"" alt=""image"" src=""https://github.com/user-attachments/assets/e6863088-f852-4df2-8f49-04d2adc3fea2"">
",2024-11-27T15:33:30+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",nicoldamelio,"<img width=""748"" alt=""Screenshot 2024-11-30 alle 21 20 51"" src=""https://github.com/user-attachments/assets/88267523-92fd-4f44-9c86-d7341865f81f"">
",2024-11-30T20:23:40+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",martinaucch,"```
my_first_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
print(my_first_set)
my_first_set.remove(""Bilbo"")
print(my_first_set)
my_first_set.add(""Galadriel"")
print(my_first_set)
my_first_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
print(my_first_set)
```
<img width=""772"" alt=""Screenshot 2024-12-08 alle 23 50 02"" src=""https://github.com/user-attachments/assets/68d483a2-8567-4246-887e-264d82b6807b"">
",2024-12-08T22:50:59+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 2",romashovar,"> {'Frodo', 'Pippin', 'Merry', 'Sam'}
> {'Frodo', 'Galadriel', 'Pippin', 'Merry', 'Sam'}
> {'Frodo', 'Galadriel', 'Pippin', 'Saruman', 'Gandalf', 'Merry', 'Sam'}",2024-12-16T21:57:55+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 1",lisitein,"```
Hobbits = set()
Hobbits.add(""Bilbo"")
Hobbits.add(""Frodo"")
Hobbits.add(""Sam"")
Hobbits.add(""Pippin"")
Hobbits.add(""Merry"")

print(Hobbits)
print(Hobbits == set([""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""]))
# {'Frodo', 'Merry', 'Sam', 'Bilbo', 'Pippin'}
# True
```",2024-11-20T15:11:07+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 1",KikaYang,"<img width=""648"" alt=""截屏2024-11-20 17 15 42"" src=""https://github.com/user-attachments/assets/077a057d-1b3d-4296-bea5-37ee0fdbed21"">
",2024-11-20T16:16:13+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 1",yutong316,"![image](https://github.com/user-attachments/assets/40c95469-7a7c-42c5-b30f-bb6f97dddad4)
",2024-11-20T20:01:50+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 1",rumana-mh,"![Screenshot 2024-11-20 231615](https://github.com/user-attachments/assets/a97d5ebb-3b2b-47aa-b246-cd325f6c0f55)
",2024-11-20T22:16:54+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 1",arinee01,"<img width=""552"" alt=""Снимок экрана 2024-11-22 в 11 33 56"" src=""https://github.com/user-attachments/assets/239a3261-600d-4678-aca8-82dad5b0e609"">
",2024-11-22T10:34:25+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 1",ValkyrieCain9,"```
my_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
print(my_set)
#{'Bilbo', 'Frodo', 'Pippin', 'Merry', 'Sam'}
```",2024-11-22T17:26:58+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 1",orboboro,"lotr_set = set([""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""])",2024-11-24T12:18:22+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 1",martinamrc,"```
my_set = set()

my_set.add('Bilbo')
my_set.add('Frodo')
my_set.add('Sam')
my_set.add('Pippin')
my_set.add('Merry')

print(my_set)     
print(type(my_set))
```

<img width=""334"" alt=""Screenshot 2024-11-24 alle 15 01 54"" src=""https://github.com/user-attachments/assets/41da89c8-d641-4745-89d5-33b2349e5155"">
",2024-11-24T14:02:40+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 1",theair-hub,"![image](https://github.com/user-attachments/assets/d6a13edd-a6c7-4dc6-9a3d-b7f8a1c932d6)
",2024-11-24T18:44:21+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 1",Maryamdadras,"my_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
print(my_set)
#out put: {'Bilbo', 'Frodo', 'Sam', 'Pippin', 'Merry'}
",2024-11-24T20:01:22+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 1",ERendall,"<img width=""1470"" alt=""image"" src=""https://github.com/user-attachments/assets/b1297121-490c-470a-a5de-4fd9fad05279"">
",2024-11-27T15:20:06+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 1",nicoldamelio,"<img width=""659"" alt=""Screenshot 2024-11-30 alle 21 13 44"" src=""https://github.com/user-attachments/assets/a3ceeb2e-9745-4ad1-8d48-b3aa032a100f"">
",2024-11-30T20:14:36+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 1",martinaucch,"```
my_first_set = set()
my_first_set.add(""Bilbo"")
my_first_set.add(""Frodo"")
my_first_set.add(""Sam"")
my_first_set.add(""Pippin"")
my_first_set.add(""Merry"")

print(my_first_set)
```
<img width=""760"" alt=""Screenshot 2024-12-08 alle 23 39 13"" src=""https://github.com/user-attachments/assets/55262866-bcdd-4059-aa27-5fe36c8ef5b8"">
",2024-12-08T22:40:22+00:00
comp-think/2024-2025,"Lecture ""Organising information: unordered structures"", exercise 1",romashovar,"```
my_set = set()
my_set.add(""Bilbo"")
my_set.add(""Frodo"")
my_set.add(""Sam"")
my_set.add(""Pippin"")
my_set.add(""Merry"")

print(my_set)
```

> {'Sam', 'Merry', 'Frodo', 'Bilbo', 'Pippin'}",2024-12-16T21:54:12+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 5",ValkyrieCain9,"```
#DEFINING MY REVERSED FUNCTION

def test_my_reversed(input_list):
    if my_reversed(input_list) == list(reversed(input_list)):
        return True
    else:
        return False

def my_reversed(input_list):
    output_list=[]
    #starting from the last index of input_list
    i = len(input_list)-1
    while i>=0:
        output_list.append(input_list[i])
        i-=1
    return output_list

print(test_my_reversed(list_of_books))
#returns True

```",2024-11-19T09:36:46+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 5",maridematteis,"<img width=""713"" alt=""Screenshot 2024-11-19 alle 16 54 19"" src=""https://github.com/user-attachments/assets/289e45e1-6ddb-415b-813e-23bffc3e00af"">
",2024-11-19T15:57:37+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 5",lisitein,"```
collections = [""ron"", ""hermione"", ""hagrid"", ""dumbledord""]

def test_my_reversed(input_list):
    result = my_reversed(input_list)
    if list(reversed(input_list))==result:
        return True
    else:
        return False
    
def my_reversed(input_list):
    output_list = []
    i = 0
    for item in input_list:
        output_list.insert(-1-i,item)
        i = i+1
    return output_list

print(test_my_reversed(collections))
# True
print(my_reversed(collections))
# ['dumbledord', 'hagrid', 'hermione', 'ron']
```",2024-11-19T22:16:13+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 5",essepuntato,"Hi all, please remember that each testing function must input the parameter of the function to test and the expected result. ",2024-11-20T08:06:25+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 5",arinee01,"<img width=""348"" alt=""Снимок экрана 2024-11-20 в 15 57 50"" src=""https://github.com/user-attachments/assets/562e7836-23e5-4d5c-a4f7-f4aa02f1ee29"">
",2024-11-20T14:58:35+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 5",shiho1000,"```python
# test case
def test_my_reversed(input_list, expected):
    result = my_reversed(input_list)
    if expected == result:
        return True
    else:
        return False

# algorithm
def my_reversed(input_list):
    stack_list = []
    output_list = []

    for item in input_list:
        stack_list.append(item)
               
    while stack_list:
        output_list.append(stack_list.pop())
    return output_list
    

# run test case
print(test_my_reversed(([1, 2, 3, 4, 5]), ([5, 4, 3, 2, 1])))
print(test_my_reversed(([""a"", ""b"", ""c""]), ([""c"", ""b"", ""a""])))
print(test_my_reversed(([]), ([])))
# returns 
# True
# True
# True
``` ",2024-11-21T08:57:35+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 5",ERendall,"<img width=""1470"" alt=""image"" src=""https://github.com/user-attachments/assets/63f9e427-ab9b-48af-8699-e795075436d4"">

I hope that makes sense! ",2024-11-26T16:55:37+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 5",nicoldamelio,"<img width=""812"" alt=""Screenshot 2024-12-06 alle 12 03 48"" src=""https://github.com/user-attachments/assets/d893c6f1-6006-4122-8dd5-22336a41b104"">
",2024-12-06T11:05:46+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 5",martinaucch,"```
def test_my_reversed(input_list, expected):
    result = my_reversed(input_list)
    if result == expected:
        return True
    else:
        return False 

def my_reversed(input_list):
    my_reversed_list = list()
    while input_list:  
        last_item = input_list.pop()  
        my_reversed_list.append(last_item) 
    return my_reversed_list


print(test_my_reversed(([""a"", ""b"", ""c"", ""d""]), [""d"", ""c"", ""b"", ""a""]))
print(test_my_reversed(([1, 1, 4, 3]), [3, 4, 1, 1]))
print(test_my_reversed(([]), []))
```
<img width=""836"" alt=""Screenshot 2024-12-09 alle 01 28 32"" src=""https://github.com/user-attachments/assets/83764d69-1065-482e-961e-5e8952bf158d"">

just realize this answer eliminate the original list, while the reverse function doesn't. This could be a solution: 
```
def test_my_reversed(input_list, expected):
    result = my_reversed(input_list)
    if result == expected:
        return True
    else:
        return False 

def my_reversed(input_list):
    my_reversed_list = list()
    i= 0
    while i < len(input_list):  
        i +=1
        last_item = input_list[len(input_list)-i]
        my_reversed_list.append(last_item) 
    return my_reversed_list


print(test_my_reversed(([""a"", ""b"", ""c"", ""d""]), [""d"", ""c"", ""b"", ""a""]))
print(test_my_reversed(([1, 1, 4, 3]), [3, 4, 1, 1]))
print(test_my_reversed(([]), []))
```
<img width=""833"" alt=""Screenshot 2024-12-09 alle 01 50 58"" src=""https://github.com/user-attachments/assets/1e85c6d5-cfdf-4d12-9ab8-f226aae9dd75"">

",2024-12-08T21:36:06+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 4",ValkyrieCain9,"```
#DEFINING MY RANGE FUNCTION

def test_my_range(stop_number):
    if my_range(stop_number) == list(range(stop_number)):
        return True
    else:
        return False

def my_range(stop_number):
    output_list=[]
    i = 0
    while i < stop_number:
        output_list.append(i)
        i+=1
    return output_list

print(test_my_range(4))
#returns True
```",2024-11-19T09:33:51+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 4",maridematteis,"
<img width=""713"" alt=""Screenshot 2024-11-19 alle 16 47 20"" src=""https://github.com/user-attachments/assets/9a4fc3d5-00ec-4fbb-8bc9-cab533e982e3"">

",2024-11-19T15:47:55+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 4",lisitein,"```
def test_my_range(stop_number):
    result = my_range(stop_number)
    if list(range(stop_number)) == result:
        return True
    else:
        return False

def my_range(stop_number):
    output_list = []
    i = 0
    while i < stop_number:
        output_list.append(i)
        i = i+1
    return output_list

print(range(2))
# range(0, 2)
print(test_my_range(2))
# True
print(my_range(2))
# [0,1]
        
```",2024-11-19T20:19:33+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 4",shiho1000,"```python
# test case
def test_my_range(stop_number, expected):
    result = my_range(stop_number)
    if expected == result:
        return True
    else:
        return False

# algorithm
def my_range(stop_number):
    output_list = []
    index = 0
    
    while index < stop_number:
        output_list.append(index)
        index += 1
    return output_list

# run test
print(test_my_range((5), [0, 1, 2, 3, 4]))
print(test_my_range((0), []))
print(test_my_range((2), [0, 1]))
# returns 
# True
# True
# True

# run algorithm
print(my_range(5))
# returns [0, 1, 2, 3, 4]
``` ",2024-11-19T23:06:15+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 4",essepuntato,"Hi all, please remember that each testing function must input the parameter of the function to test and the expected result. ",2024-11-20T08:05:32+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 4",arinee01,"<img width=""461"" alt=""Снимок экрана 2024-11-20 в 15 42 44"" src=""https://github.com/user-attachments/assets/aacf5244-38dc-4f98-acde-20a4e5c45a47"">
",2024-11-20T14:43:27+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 4",theair-hub,"![image](https://github.com/user-attachments/assets/d2882a0f-fba1-4d51-b9c3-ebd8d485820f)
",2024-11-23T19:21:15+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 4",ERendall,"<img width=""1470"" alt=""image"" src=""https://github.com/user-attachments/assets/3559f348-fb18-4596-8275-f753543507cb"">

Further ooof. ",2024-11-26T16:24:51+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 4",nicoldamelio,"<img width=""813"" alt=""Screenshot 2024-12-05 alle 21 44 46"" src=""https://github.com/user-attachments/assets/891db337-ff25-4e11-ab1b-785e98d2e6bb"">
",2024-12-05T20:47:50+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 4",martinaucch,"```
def test_my_range(stop_number, expected):
    result = my_range(stop_number)
    if expected == result:
        return True
    else:
        return False

def my_range(stop_number):
    output_list = list()
    if stop_number > 0: 
        while len(output_list) < stop_number: 
            output_list.append(stop_number)
            enumerate_list = [position for position, item in enumerate(output_list)]
        return enumerate_list
    else:
        return output_list
    
print(test_my_range(4, [0,1,2,3]))
print(test_my_range(0, []))
print(test_my_range(1, [0]))

```
<img width=""769"" alt=""Screenshot 2024-12-08 alle 19 09 08"" src=""https://github.com/user-attachments/assets/ff09406d-7313-40c9-b3bc-34d3a5ebee7c"">
",2024-12-08T18:09:17+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 3",maridematteis,"
<img width=""777"" alt=""Screenshot 2024-11-19 alle 11 37 53"" src=""https://github.com/user-attachments/assets/e2bbdd38-983d-4bc0-9d11-1daab177091c"">
",2024-11-18T17:56:33+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 3",ValkyrieCain9,"```
#DEFINING MY ENUMERATE FUNCTION

def test_my_enumerate(input_list):
    if my_enumerate(input_list) == list(enumerate(input_list)):
        return True
    else:
        return False

def my_enumerate(input_list):
    output_list = []
    i = 0
    while i < len(input_list):
        mytuple = (i, input_list[i])
        output_list.append(mytuple)
        i+=1
    return output_list

list_of_books = [""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""]
print(test_my_enumerate(list_of_books))
#returns True
```",2024-11-19T09:31:33+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 3",lisitein,"```
def test_my_enumerate(input_list):
    result = my_enumerate(input_list)
    if list(enumerate(input_list)) == result:
        return True
    else:
        return False

def my_enumerate(input_list):
    outputs = []
    i = 0
    for item in input_list:
        outputs.append((i,input_list[i]))
        i = i+1

    return outputs

print(test_my_enumerate(collections))
```",2024-11-19T11:02:59+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 3",shiho1000,"```python
# test case 
def test_my_enumerate(input_list, expected):
    result = my_enumerate(input_list)
    if expected == result:
        return True
    else:
        return False

# algorithm 
def my_enumerate(input_list):
    output_list = []
    index = 0
    
    for item in input_list:
        output_list.append((index, item))
        index = index + 1
    return output_list

# run test case
print(test_my_enumerate(([1, 2, 3]), ([(0, 1), (1, 2), (2, 3)])))
print(test_my_enumerate(([]), ([])))
print(test_my_enumerate(([""a"", ""b"", ""c"", ""d""]), ((0, ""a""), (1, ""b""), (2, ""c""),  (3, ""d""))))
# returns 
True
True
True

# run algorithm
print(my_enumerate([""a"", ""b"", ""c""]))
# returns [(0, 'a'), (1, 'b'), (2, 'c')]
``` ",2024-11-19T22:15:27+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 3",yutong316,"![image](https://github.com/user-attachments/assets/4242fe49-9e61-4092-8257-5271ca741332)
",2024-11-19T22:48:50+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 3",essepuntato,"Hi all, please remember that each testing function must input the parameter of the function to test and the expected result. In addition, every time I ask you in the exercises to provide the code for implementing something, you must also provide the testing function and the tests.",2024-11-20T08:05:01+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 3",arinee01,"<img width=""411"" alt=""Снимок экрана 2024-11-20 в 14 56 07"" src=""https://github.com/user-attachments/assets/e8baeb7b-90ba-41eb-bbf0-1f94a6aeaa5e"">
",2024-11-20T13:56:50+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 3",theair-hub,"![image](https://github.com/user-attachments/assets/ec5a4702-8ba1-42f7-bee6-12036566e0ce)
",2024-11-23T18:28:53+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 3",ERendall,"<img width=""1470"" alt=""image"" src=""https://github.com/user-attachments/assets/e304a208-b716-4b75-a5e3-dd0374f63b9d"">

Ooof...! ",2024-11-26T15:53:32+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 3",romashovar,"```
def my_enumerate(input_list):
    output_list = []
    for item in input_list:
        output_list.append((input_list.index(item), item))
    return output_list

def test_my_enumerate(input_list, expected):
    if my_enumerate(input_list) == expected:
        return True
    else:
        return False

print (test_my_enumerate([""One"", ""Two"", ""Three"", ""Four""], [(0, ""One""), (1, ""Two""), (2, ""Three""), (3, ""Four"")]))
print (test_my_enumerate([""Ron"", ""Harry"", ""Hermione""], [(0, ""Ron""), (1, ""Harry""), (2, ""Hermione"")]))
print (test_my_enumerate([""Alice"", ""Catherine"", ""Bob"", ""Charles""], [(0, ""Alice""), (1, ""Catherine""), (2, ""Bob""), (3, ""Charles"")]))
```

> True
> True
> True

I used the `<list>.index(<item>)` function from one of our previous classes, because the `enumerate()` function returns in tuples exactly the index of item in list and item itself. ",2024-11-26T21:57:53+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 3",polinakhrm,"<img width=""1048"" alt=""Screenshot 2024-12-02 at 23 56 54"" src=""https://github.com/user-attachments/assets/be82d212-8235-4c24-b174-3b294037a980"">
",2024-12-02T22:57:28+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 3",nicoldamelio,"<img width=""820"" alt=""Screenshot 2024-12-05 alle 19 53 48"" src=""https://github.com/user-attachments/assets/a770122c-95c8-4850-8ea4-955e80289380"">
",2024-12-05T18:57:08+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 3",martinaucch,"```
def test_my_enumerate (input_list, expected):
    result = my_enumerate(input_list)
    if expected == result: 
        return True
    else: 
        return False

def my_enumerate(input_list):
    output_list = list() #the output list to create
    result= -1
    for item in input_list:
        result +=1
        output_list.append((result, item))
    return output_list

print(test_my_enumerate(([""andrea"", ""martina"", ""beatrice""]), ([(0, ""andrea""), (1, ""martina""), (2, ""beatrice"")])))
print(test_my_enumerate(([1,2,3]), ([(0, 1),(1, 2), (2, 3)])))
print(test_my_enumerate(([""a"", ""b"", ""b"", ""a""]), ([(0, ""a""), (1, ""b""), (2, ""b""), (3, ""a"")])))
```
<img width=""765"" alt=""Screenshot 2024-12-08 alle 17 32 23"" src=""https://github.com/user-attachments/assets/cc702090-7bbf-4d5a-9eb6-88cc99e56319"">
",2024-12-08T16:32:37+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 2",ValkyrieCain9,"```
#STACK FOR-LOOP
from collections import deque

def test_stack_from_list(input_list):
    if list(stack_from_list(input_list)) == input_list:
        return True
    else:
        return False

def stack_from_list(input_list):
    output_stack = deque() # the stack to create
    # Iterate each element in the input list and add it to the stack for item in input_list:
    for item in input_list:
        output_stack.append(item)
    return output_stack

list_of_books = [""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""]

print(test_stack_from_list(list_of_books))
#returns True
```",2024-11-19T09:22:04+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 2",lisitein,"Honestly thanks to who answered before, or I may not figure out that `list()` on the `stack_from_list(input_list)` is needed.
```
def test_stack_from_list(input_list):
    result = list(stack_from_list(input_list))
    if input_list == result:
        return True
    else:
        return False
        
#listing 2 
from collections import deque

def stack_from_list(input_list):
	output_stack = deque()  
	for item in input_list:
		output_stack.append(item)

	return output_stack

print(test_stack_from_list(collection))
```",2024-11-19T10:32:04+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 2",maridematteis,"<img width=""797"" alt=""Screenshot 2024-11-19 alle 11 49 35"" src=""https://github.com/user-attachments/assets/1e6d5d89-98d3-4608-9ad1-11b92f1e4c6b"">
",2024-11-19T10:52:06+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 2",shiho1000,"```python
# exercise 2 test case 
def test_stack_from_list(input_list, expected):
    result = stack_from_list(input_list)
    if expected == result:
        return True
    else:
        return False

# algorithm
def stack_from_list(input_list):
    output_stack = deque()  # the stack to create
    
    # Iterate each element in the input list and add it to the stack
    for item in input_list:
        output_stack.append(item)

    return output_stack

input_list = [1, 2, 3]

# run test case
print(test_stack_from_list((input_list), deque([1, 2, 3]))) 
# returns True

# run algorithm
print(stack_from_list(input_list)) 
# returns deque([1, 2, 3])
``` 

I ammended my run test case after todays lesson:
```python
# run test case pattern
print(test_stack_from_list(([1, 2, 3]), deque([1, 2, 3]))) 
print(test_stack_from_list(([""a"", ""b"", ""c""]), deque([""a"", ""b"", ""c""])))
print(test_stack_from_list(([]), deque([])))
print(test_stack_from_list(([0, ""hello"", """"]), deque([0, ""hello"", """"])))
# returns
True
True
True
True
``` ",2024-11-19T22:09:57+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 2",essepuntato,"Hi all, please remember that each testing function must take in input the parameter of the function to test **and** the expected result.",2024-11-20T08:02:24+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 2",arinee01,"<img width=""533"" alt=""Снимок экрана 2024-11-20 в 14 13 35"" src=""https://github.com/user-attachments/assets/15d0f6a3-00d9-431b-a7a3-5aaf5f269a3d"">
",2024-11-20T13:13:59+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 2",ERendall,"<img width=""1466"" alt=""image"" src=""https://github.com/user-attachments/assets/3cd27a95-92cf-4c03-b365-0c21652f92b8"">
",2024-11-20T16:17:45+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 2",theair-hub,"![image](https://github.com/user-attachments/assets/c1c77e59-e6eb-42eb-a183-935f3cd91e3e)
",2024-11-21T17:40:49+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 2",essepuntato,"Dear all,

Just a few additional hints for correctly running the exercises:

1. After implementing the testing function, please write **at least** (the more, the better) three different tests using different kinds of input, including the unusual ones, e.g. a list containing the same value twice or more times
2. All your tests must be passed to claim that an algorithm returns what is expected. Thus, if a test execution returns `False`, the test is not passed.",2024-11-25T07:59:08+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 2",romashovar,"```
from collections import deque

def stack_from_list(input_list):
    output_stack = deque()
    for item in input_list:
        output_stack.append(item)
    return output_stack

def test_stack_from_list(input_list, expected):
    if stack_from_list(input_list) == expected:
        return True
    else:
        return False

print(test_stack_from_list([""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""], deque([""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""])))
print(test_stack_from_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])))
print(test_stack_from_list([""Ron"", ""Harry"", ""Hermione""], deque([""Ron"", ""Harry"", ""Hermione""])))
```",2024-11-26T21:30:16+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 2",polinakhrm,"<img width=""1056"" alt=""Screenshot 2024-12-01 at 23 23 49"" src=""https://github.com/user-attachments/assets/4a002f22-3b41-43d7-bbc1-b6f7d0d64f8a"">
",2024-12-01T22:24:17+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 2",nicoldamelio,"<img width=""662"" alt=""Screenshot 2024-12-05 alle 19 13 14"" src=""https://github.com/user-attachments/assets/cba54227-5949-4d99-82a0-2cbe293aa5b8"">
",2024-12-05T18:16:16+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 2",martinaucch,"```
from collections import deque

def test_stack_from_list (input_list, expected):
    result = stack_from_list(input_list)
    if expected == result:
        return True
    else:
        return False

def stack_from_list(input_list):
    output_stack = deque() # the stack to create
    # Iterate each element in the input list and add it to the stack
    for item in input_list:
        output_stack.append(item)
    return output_stack

print(test_stack_from_list([1,2,3,4,5],deque([1,2,3,4,5]) ))
print(test_stack_from_list([ ], deque([ ])))
print(test_stack_from_list([1,1,1,3,3], deque([1,1,1,3,3])))

```
<img width=""767"" alt=""Screenshot 2024-12-08 alle 16 49 44"" src=""https://github.com/user-attachments/assets/01e64c5a-9814-476d-aef3-a2d79ca21c7c"">
",2024-12-08T15:50:22+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 1",lisitein,"```
list = [""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""]
linear_search(list, ""The Sandman"")

# FOR_EACH LOOP EXECUTION
# enumerate(list) will result in:
# enumerate([(0,""Coraline""), (1,""American Gods""), (2,""The Graveyard Book""), (3,""Good Omens""), (4,""Neverwhere"")])

# Interation 1
# position = 0
# item = ""Coraline""
# item == ""The Sandman"" is False

# Interation 2
# position = 1
# item = ""American Gods""
# item == ""The Sandman"" is False

# Interation 3
# position = 2
# item = ""Good Omens""
# item == ""The Sandman"" is False

# Interation 4
# position = 3
# item = ""Neverwhere""
# item == ""The Sandman"" is False
# end the execution of the algorithm
# Return None
```",2024-11-18T14:51:36+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 1",maridematteis,"<img width=""992"" alt=""Screenshot 2024-11-18 alle 18 45 59"" src=""https://github.com/user-attachments/assets/3c2c9203-f19b-4b42-81b9-6cbecfc55feb"">
",2024-11-18T17:49:06+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 1",ValkyrieCain9,"```
#EXECUTION STEPS OF LINEAR SEARCH OF NEIL GAIMAN BOOKS

# def linear_search(input_list, value_to_search):
#     for position, item in enumerate(input_list):
#         if item == value_to_search:
#             return position

#list_of_books = [""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""]

#linear_search(list_of_books, ""The Sandman""):

    #enumerate(input_list) will result in:
    #enumerate([(0, ""Coraline""), (1, ""American Gods""), (2, ""The Graveyard Book""), (3, ""Good Omens""), (4, ""Neverwhere"")])

    #for position,item in enumerate([(0, ""Coraline""), (1, ""American Gods""), (2, ""The Graveyard Book""), (3, ""Good Omens""), (4, ""Neverwhere"")]):

        #Iteration 1 
        #position = 0 
        #item = ""Coraline"" 
        #item == value_to_search is False 
        #Continue to the next iteration

        #Iteration 2 
        #position = 1 
        #item = ""American Gods"" 
        #item == value_to_search is False 
        #Continue to the next iteration

        #Iteration 3 
        #position = 2 
        #item = ""The Graveyard Books"" 
        #item == value_to_search is False 
        #Continue to the next iteration

        #Iteration 4 
        #position = 3 
        #item = ""Good Omens"" 
        #item == value_to_search is False 
        #Continue to the next iteration

        #Iteration 5 
        #position = 4
        #item = ""Neverwhere"" 
        #item == value_to_search is False 
        #Reached the last element in list_of_books
        #""The Sandman"" not in list_of_books
        #Return None and end execution of algorithm
```",2024-11-19T09:09:04+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 1",KikaYang,"array = [""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""]
target = ""The Sandman""
Step 1: Start iterating through the list from the first element.
Compare array[0] (""Coraline"") with target (""The Sandman"").
They are not equal. Move to the next element.
Step 2: Compare array[1] (""American Gods"") with target (""The Sandman"").
They are not equal. Move to the next element.
Step 3: Compare array[2] (""The Graveyard Book"") with target (""The Sandman"").
They are not equal. Move to the next element.
Step 4: Compare array[3] (""Good Omens"") with target (""The Sandman"").
They are not equal. Move to the next element.
Step 5: Compare array[4] (""Neverwhere"") with target (""The Sandman"").
They are not equal. This is the last element of the list.
Step 6: End of list reached, and the target is not found.
Return None",2024-11-19T18:10:40+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 1",yutong316,"![image](https://github.com/user-attachments/assets/373287d7-9371-451d-a7ba-5edb1dfbdc53)
",2024-11-19T20:15:18+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 1",shiho1000,"```python
input_list = [""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""]
print(linear_search(input_list,""The Sandman""))

# FOR-EACH LOOP EXECUTION
# enumerate(input_list) will result in:
# enumerate([(0, ""Coraline""), (1, ""American Gods""),
# (2, ""The Graveyard Book""), (3, ""Good Omens""),
# (4, ""Neverwhere"")])

# Iteration 1
# position = 0
# item = ""Coraline""
# item == value_to_search is False
# Continue to the next iteration

# Iteration 2
# position = 1
# item = ""American Gods""
# item == value_to_search is False
# Continue to the next iteration

# Iteration 3
# position = 2
# item = ""The Graveyard Book""
# item == value_to_search is False
# Continue to the next iteration

# Iteration 4
# position = 3
# item = ""Good Omens""
# item == value_to_search is False
# Continue to the next iteration

# Iteration 5
# position = 4
# item = ""Neverwhere""
# item == value_to_search is False
# iteration of last item in the list is finished
# value to search is not present in the list
# Return None and end execution of the algorithm.  
``` ",2024-11-19T22:06:21+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 1",essepuntato,"Hi all, thanks for your answer. Please remember to carefully read the instructions for the exercise since I've asked you to write the steps of execution and not show me how to execute the algorithm.",2024-11-20T07:59:53+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 1",arinee01,"<img width=""888"" alt=""Снимок экрана 2024-11-20 в 13 40 11"" src=""https://github.com/user-attachments/assets/3ac9d916-c295-4d27-949e-212b51cdbab7"">
",2024-11-20T12:42:02+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 1",ERendall,"<img width=""1343"" alt=""image"" src=""https://github.com/user-attachments/assets/e4914982-986a-4c1b-b384-a3bd97e8ea37"">
",2024-11-20T14:38:33+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 1",theair-hub,"![image](https://github.com/user-attachments/assets/3a6df622-a6f1-4649-b232-b369f5c98270)
",2024-11-21T17:17:12+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 1",romashovar,"```
linear_search(list([""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""]), ""The Sandman"")

# FOR EACH LOOP EXECUTION 
# enumerate(list) will result in: 
# enumerate([(0, ""Coraline""), (1, ""American Gods""), (2, ""The Graveyard Book""), (3, ""Good Omens""), (4, ""Neverwhere"")])
#
# Iteration 1
# position = 0
# item = “Coraline”
# item == value_to_search is False 
# Continue to the next iteration  
#
# Iteration 2
# position = 1
# item = “American Gods”
# item == value_to_search is False 
# Continue to the next iteration 
#
# Iteration 3
# position = 2
# item = “The Graveyard Book”
# item == value_to_search is False 
# Continue to the next iteration  
#
# Iteration 4
# position = 3
# item = “Good Omens”
# item == value_to_search is False 
# Continue to the next iteration 
#
# Iteration 5
# position = 4
# item = “Neverwhere”
# item == value_to_search is False 
# Return None and end the execution of the algorithm 
```",2024-11-26T21:00:59+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 1",nicoldamelio,"<img width=""878"" alt=""Screenshot 2024-12-05 alle 18 39 04"" src=""https://github.com/user-attachments/assets/bccc8669-086e-47e5-ae80-6048e6926771"">
",2024-12-05T17:40:48+00:00
comp-think/2024-2025,"Lecture ""Brute-force argorithms"", exercise 1",martinaucch,"```
#Write down the execution steps of linear_search(list([""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""]), ""The Sandman""), 
#as explained in Listing 7.

list_of_book= list([""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"",""Neverwhere""])
linear_search (list_of_book, ""The Sandman"")

# for-each loop execution
# enumerate(input_lists) will result in: 
# enumerate([(0, ""Coraline""), (1, ""American Gods""),
# (2, ""The Graveyard Book""), (3, ""Good Omens""),
# (4, ""Neverwhere"")])

# Iteration 1
# position = 0
# item = ""Coraline""
# item == value_to_search is False
# Continue to the next iteration

# Iteration 2
# position = 1
# item = ""American Gods""
# item == value_to_search is False
# Continue to the next iteration

# Iteration 3
# position = 2
# item = ""The Graveyard Book""
# item == value_to_search is False

# Iteration 4
# position = 3
# item = ""Good Omens""
# item == value_to_search is False

# Iteration 5
# position = 4
# item = ""Neverwhere""
# item == value_to_search is False

#return none because the return statment is not executed 
```",2024-12-08T15:35:48+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",ValkyrieCain9,"Similar to the previous exercise I used both `.extend()` and a for loop to transfer the list to the queue but I will just show the `.extend()` method here

```
my_queue = deque()
my_queue.extend(my_list)
print(""My queue:"")
print(my_queue)
my_queue.popleft()
my_queue.append(""Voldemort"")
my_queue.popleft()
print(""My new queue:"")
print(my_queue)
```
<img width=""412"" alt=""Screenshot 2024-11-13 at 16 27 33"" src=""https://github.com/user-attachments/assets/7fb8a408-eacc-4e95-aa64-c74e838671cb"">

",2024-11-13T15:29:36+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",lisitein,"```
my_queue = deque()
my_queue.extend [(""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus"")]
my_queue.popleft()
print (my_queue)
# = deque(['Harry', 'Hermione', 'Ron', 'Severus'])
my_queue.attend('Voldemort')
print (my_queue)
# = deque(['Hermione', 'Ron', 'Severus', 'Voldemort'])
my_queue.popleft()
print (my_queue)
# = deque(['Ron', 'Severus', 'Voldemort'])
```",2024-11-13T16:10:18+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",maridematteis,"<img width=""555"" alt=""Screenshot 2024-11-13 alle 17 12 11"" src=""https://github.com/user-attachments/assets/ae67d6c6-3881-4f0d-839a-ab4885bd79b9"">
",2024-11-13T16:14:29+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",arinee01,"<img width=""588"" alt=""Снимок экрана 2024-11-13 в 18 00 09"" src=""https://github.com/user-attachments/assets/0edc1d48-3224-4eb9-b925-9906c31e5678"">
",2024-11-13T17:00:31+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",mir-pin,"![image](https://github.com/user-attachments/assets/e71dc0c8-073d-4a7d-80b2-ff95eea97c82)
",2024-11-14T14:35:32+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",MariaJGamboa,"my_queue = deque([""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""])
print(my_queue)
my_queue.popleft()
print(my_queue)
my_queue.append(""Voldemort"")
print(my_queue)

deque(['Draco', 'Harry', 'Hermione', 'Ron', 'Severus'])
deque(['Harry', 'Hermione', 'Ron', 'Severus'])
deque(['Harry', 'Hermione', 'Ron', 'Severus', 'Voldemort'])",2024-11-14T15:11:29+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",KikaYang,"<img width=""1274"" alt=""截屏2024-11-14 16 52 22"" src=""https://github.com/user-attachments/assets/9fb4675f-ffc2-4d0e-824e-165f72aa99bd"">
",2024-11-14T15:52:55+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",shiho1000,"deque(['Hermione', 'Ron', 'Severus', 'Voldemort'])

```python
from collections import deque
my_queue = deque([""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""])
my_queue.popleft()
my_queue.append(""Voldemort"")
my_queue.popleft()
print(my_queue)
``` ",2024-11-14T16:51:08+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",digitalctrlv,"```
# store in a variable a new stack
harry_characters_stack1 = deque(harry_potter_characters)

# pop out the earliest added characters of the stack
harry_characters_stack1.popleft()
# place 'Voldemort' at the end of the list
harry_characters_stack1.append('Voldemort')
harry_characters_stack1.popleft()

#show results
print(harry_characters_stack1)

Output >>>
deque(['Hermoine', 'Ron', 'Severus', 'Voldemort'])
```",2024-11-16T19:42:51+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",ERendall,"<img width=""1470"" alt=""Screenshot 2024-11-17 at 14 36 18"" src=""https://github.com/user-attachments/assets/178442cf-7160-464c-9152-e018e24bdc53"">
",2024-11-17T13:36:46+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",Maryamdadras,"my_queue = deque([""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""])

#the first popleft
my_queue.popleft()  # Removes ""Draco""
print(my_queue)  # deque(['Harry', 'Hermione', 'Ron', 'Severus'])

#Append ""Voldemort""
my_queue.append(""Voldemort"")
print(my_queue)  # deque(['Harry', 'Hermione', 'Ron', 'Severus', 'Voldemort'])

#Perform the second popleft
my_queue.popleft()  # Removes ""Harry""
print(my_queue)  # deque(['Hermione', 'Ron', 'Severus', 'Voldemort'])",2024-11-17T14:18:59+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",theair-hub,"![image](https://github.com/user-attachments/assets/79326f00-4271-4a51-86a9-e7d606e976bd)
",2024-11-17T23:30:35+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",martinaucch,"```
my_queue = deque([""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""])
my_queue.popleft()
print(my_queue)
my_queue.append(""Voldemort"")
print(my_queue)
my_queue.popleft()
print(my_queue)
```
my_queue status:
<img width=""421"" alt=""Screenshot 2024-11-19 alle 22 07 33"" src=""https://github.com/user-attachments/assets/862d1a73-cfa1-4850-bd17-c9d218b2a4fe"">
",2024-11-19T21:07:41+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",romashovar,"```
from collections import deque

new_stack = deque(['Draco', 'Harry', 'Hermione', 'Ron', 'Severus'])
new_stack.popleft()
new_stack.append('Voldemort')
new_stack.popleft()
print(new_stack)
```

> ['Hermione', 'Ron', 'Severus', 'Voldemort']",2024-11-22T11:30:22+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",nicoldamelio,"<img width=""663"" alt=""Screenshot 2024-11-30 alle 20 49 22"" src=""https://github.com/user-attachments/assets/4b6d215a-023e-4312-a803-5f36090aa564"">
",2024-11-30T19:50:34+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 3",polinakhrm,"<img width=""554"" alt=""Screenshot 2024-12-01 at 22 27 03"" src=""https://github.com/user-attachments/assets/1a62fa93-8e97-4973-9a89-39ebe46994ae"">
",2024-12-01T21:27:45+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",ValkyrieCain9,"I wasn't sure what was meant by 

> Consider to have a stack obtained by processing, one by one, the elements included in the list of the first exercise

because I was assuming you didn't want us to use a loop just yet so I used `.extend()` instead. Just incase I will also include my answer with the loop.

With `.extend()` method:
```
my_stack = deque()
my_stack.extend(my_list)
print(""My stack:"")
print(my_stack)
my_stack.pop()
my_stack.pop()
my_stack.append(""Voldemort"")
print(""My new stack:"")
print(my_stack)
```

With for loop:

```
my_stack = deque()
for i in my_list:
    my_stack.append(i)
print(""My stack:"")
print(my_stack)
my_stack.pop()
my_stack.pop()
my_stack.append(""Voldemort"")
print(""My new stack:"")
print(my_stack)
```
<img width=""412"" alt=""Screenshot 2024-11-13 at 16 20 39"" src=""https://github.com/user-attachments/assets/0388b8b4-bf84-40ef-b217-80212411ef7e"">

",2024-11-13T15:21:35+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",lisitein,"```
my_stack = [""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""]
my_stack.pop()
print (my_stack)
#= [""Draco"", ""Harry"", ""Hermione"", ""Ron""]
my_stack.pop()
print (my_stack)
#[""Draco"", ""Harry"", ""Hermione""]
my_stack.append(""Voldemort"")
print (my_stack)
#[""Draco"", ""Harry"", ""Hermione"", ""Voldemort""]
```",2024-11-13T15:37:31+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",maridematteis,"<img width=""555"" alt=""Screenshot 2024-11-13 alle 17 17 22"" src=""https://github.com/user-attachments/assets/22160c1e-e90f-4fc7-b92a-8de0642f2201"">
",2024-11-13T16:19:18+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",arinee01,"<img width=""610"" alt=""Снимок экрана 2024-11-13 в 17 56 40"" src=""https://github.com/user-attachments/assets/87bdc479-21e0-4d82-9faf-361959deae6f"">
",2024-11-13T16:57:02+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",mir-pin,"![image](https://github.com/user-attachments/assets/54a74d2f-ae08-405e-99a1-9c53ce2b3979)
",2024-11-14T14:29:16+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",MariaJGamboa,"my_stack = deque ([""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""])
print(my_stack)
my_stack.pop()
print(my_stack)
my_stack.pop()
print(my_stack)
my_stack.append(""Voldemort"")
print(my_stack)

deque(['Draco', 'Harry', 'Hermione', 'Ron', 'Severus'])
deque(['Draco', 'Harry', 'Hermione', 'Ron'])
deque(['Draco', 'Harry', 'Hermione'])
deque(['Draco', 'Harry', 'Hermione', 'Voldemort'])",2024-11-14T15:09:57+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",KikaYang,"First execution: [""Draco"", ""Harry"", ""Hermione"", ""Ron""]
Second execution: [""Draco"", ""Harry"", ""Hermione""]
Final execution: [""Draco"", ""Harry"", ""Hermione"", ""Voldemort""]",2024-11-14T15:44:09+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",shiho1000,"['Draco', 'Harry', 'Hermione', 'Voldemort']

```python
from collections import deque 
my_stack = deque([""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""])
my_stack.pop()
my_stack.pop()
my_stack.append(""Voldemort"")
print(my_stack)
``` 

",2024-11-14T16:42:48+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",digitalctrlv,"```
# got a previous error that 'deque' was not defined
# let's download it then
from collections import deque

# store in a new variable the stack version of the previous list
harry_characters_stack = deque(harry_potter_characters)

# pop out the last added characters of the stack
harry_characters_stack.pop()
harry_characters_stack.pop()
# place 'Voldemort' at the end of the list
harry_characters_stack.append('Voldemort')

# show results
print(harry_characters_stack)

Output >>>
deque(['Draco', 'Harry', 'Hermoine', 'Voldemort'])
```",2024-11-16T19:41:00+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",ERendall,"![Screenshot 2024-11-17 at 13 43 18](https://github.com/user-attachments/assets/8f0c93ac-6bb3-4d70-bca7-f49fb7976233)

I presume I have done things correctly...! ",2024-11-17T12:45:37+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",Maryamdadras,"my_stack = deque([""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""])

#the first pop
my_stack.pop()
print(my_stack)  # Output: deque(['Draco', 'Harry', 'Hermione', 'Ron'])

#the second pop
my_stack.pop()
print(my_stack)  # Output: deque(['Draco', 'Harry', 'Hermione'])

#Append ""Voldemort""
my_stack.append(""Voldemort"")
print(my_stack)  # Output: deque(['Draco', 'Harry', 'Hermione', 'Voldemort'])
",2024-11-17T14:15:31+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",theair-hub,"
![image](https://github.com/user-attachments/assets/bf4899d1-3320-40f2-9790-351f2a08d86f)
",2024-11-17T23:22:09+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",martinaucch,"```
from collections import deque
my_stack = deque([""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""])
my_stack.pop()
print(my_stack)
my_stack.pop()
print(my_stack)
my_stack.append(""Voldemort"")
print(my_stack)
```
my_stack status: 
<img width=""356"" alt=""Screenshot 2024-11-19 alle 22 04 12"" src=""https://github.com/user-attachments/assets/70939667-a4d4-4a35-a17e-94cb2e191b14"">
",2024-11-19T21:04:37+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",romashovar,"```
from collections import deque

new_stack = deque()
new_stack = ['Draco', 'Harry', 'Hermione', 'Ron', 'Severus']
new_stack.pop()
new_stack.pop()
new_stack.append('Voldemort')
print(new_stack)
```

> ['Draco', 'Harry', 'Hermione', 'Voldemort']",2024-11-22T11:20:13+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",nicoldamelio,"<img width=""675"" alt=""Screenshot 2024-11-30 alle 20 40 39"" src=""https://github.com/user-attachments/assets/c557e3d5-37d9-4d1c-baa6-05de5d26a64c"">
",2024-11-30T19:42:44+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 2",polinakhrm,"<img width=""496"" alt=""Screenshot 2024-12-01 at 22 21 51"" src=""https://github.com/user-attachments/assets/b3b5cfa5-3b6a-41e2-867b-4234427cb220"">
",2024-12-01T21:22:18+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",lisitein,"`mates = ['Harry','Draco','Hermione','Ron','Severus']`
`mates.sort()`",2024-11-13T15:02:54+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",ValkyrieCain9,"`my_list = [""Harry"",""Draco"",""Hermione"",""Ron"",""Severus""]`
`print(""My list:"")`
`print(my_list)`
`my_list.sort()`
`print(""My sorted list:"")`
`print(my_list)`

<img width=""388"" alt=""Screenshot 2024-11-13 at 16 06 32"" src=""https://github.com/user-attachments/assets/f0e9928f-9987-4d05-aa0c-d3094cf57449"">

",2024-11-13T15:07:05+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",arinee01,"```
names = [""Harry"", ""Draco"", ""Hermione"", ""Ron"", ""Severus""]
names.sort()
print(names)
```",2024-11-13T16:52:29+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",maridematteis,"<img width=""497"" alt=""Screenshot 2024-11-13 alle 17 42 19"" src=""https://github.com/user-attachments/assets/183fc3c1-ea77-4b09-b9af-1c67e0252631"">
",2024-11-13T16:52:34+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",martinamrc,"`Harry_Potter_list = list()

Harry_Potter_list.append(""Draco"")
Harry_Potter_list.append(""Harry"")
Harry_Potter_list.append(""Hermione"")
Harry_Potter_list.append(""Ron"")
Harry_Potter_list.append(""Severus"")

print(Harry_Potter_list)`

I wrote this thinking about the methods introduced during the lecture, just because the exercise specifically asked to write a ""sequence"" of instructions, but considering the answers of others I also tried the <list>.sort() method (although I noticed that in How to Code in Python the paragraph didn't exactly state that for a list of strings this method would order the items in alphabetical order, but maybe that was implicit and I just didn't get it).",2024-11-13T19:29:47+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",mir-pin,![image](https://github.com/user-attachments/assets/61f7a98e-8eb4-4cd5-adb4-52d5dd721bde),2024-11-14T14:20:18+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",MariaJGamboa,"my_first_list = list()
my_first_list= [""Harry"", ""Draco"", ""Hermionie"", ""Ron"", ""Severus""]
print(my_first_list)
my_first_list.sort()
print(my_first_list)

['Harry', 'Draco', 'Hermionie', 'Ron', 'Severus']
['Draco', 'Harry', 'Hermionie', 'Ron', 'Severus']",2024-11-14T15:08:07+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",KikaYang,"<img width=""1218"" alt=""first_question"" src=""https://github.com/user-attachments/assets/81c1704b-99da-429e-afb8-54d57b8bb77b"">
",2024-11-14T15:38:37+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",shiho1000,"```python
hpnames = [""Harry"", ""Draco"", ""Hermione"", ""Ron"", ""Severus""]
list.sort(hpnames)
print(hpnames)
``` ",2024-11-14T16:08:08+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",digitalctrlv,"```
# create an empty list
harry_potter_characters = []
# add several strings using the .append() command
harry_potter_characters.append(""Harry"")
harry_potter_characters.append(""Draco"")
harry_potter_characters.append(""Hermoine"")
harry_potter_characters.append(""Ron"")
harry_potter_characters.append(""Severus"")

# sort alphabetically
harry_potter_characters.sort()

# print the final list of strings
print(harry_potter_characters)

Output >>>
['Draco', 'Harry', 'Hermoine', 'Ron', 'Severus']
```",2024-11-16T19:38:31+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",ERendall,"<img width=""1428"" alt=""Screenshot 2024-11-17 at 13 03 15"" src=""https://github.com/user-attachments/assets/427dc91a-0710-44d5-ba60-bf6d5d30c1a6"">
",2024-11-17T12:03:55+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",Maryamdadras,"
my_list = [""Harry"", ""Draco"", ""Hermione"", ""Ron"", ""Severus""]


sorted_list = sorted(my_list)


print(""Original list:"", my_list)


print(""Sorted list:"", sorted_list)



output:

Original list: ['Harry', 'Draco', 'Hermione', 'Ron', 'Severus']
Sorted list: ['Draco', 'Harry', 'Hermione', 'Ron', 'Severus']",2024-11-17T14:07:28+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",theair-hub,"


> Write a sequence of instructions in Python to create a list with the following elements ordered alphabetically: `""​Harry""`​, `""Draco""`​, `""​Hermione""​`, ​`""​Ron""`​, `""​Severus""`​.

![image](https://github.com/user-attachments/assets/450f62ce-8a16-4e7a-a851-06f37c630fbb)

I don't know if I understood well, but I feel like this could be a ""sequence of instructions""... I know that this method is not as good as the one with ""sorted_list"": I just wanted to try another way. ",2024-11-17T22:59:32+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",Fahmyrose,"<img width=""631"" alt=""image"" src=""https://github.com/user-attachments/assets/1f197b8f-245d-497b-b89d-2a38ab874749"">

output:

option1:
['Draco', 'Harry', 'Hermione', 'Ron', 'Severus']

option2:
['Draco', 'Harry', 'Hermione', 'Ron', 'Severus']

option3:
['Harry', 'Draco', 'Hermione', 'Ron', 'Severus']
['Draco', 'Harry', 'Hermione', 'Ron', 'Severus']",2024-11-18T06:46:12+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",martinaucch,"```
harrys_friends_list = list()
harrys_friends_list.append(""Harry"")
harrys_friends_list.append(""Ron"")
harrys_friends_list.append(""Hermione"")
harrys_friends_list.append(""Draco"")
harrys_friends_list.append(""Severus"")
harrys_friends_list.sort()

print(harrys_friends_list)
```",2024-11-19T20:50:20+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",romashovar,"```
new_list = [""Harry"",""Draco"",""Hermione"",""Ron"",""Severus""]
new_list.sort()
print (new_list)
```

> ['Draco', 'Harry', 'Hermione', 'Ron', 'Severus']",2024-11-22T11:13:22+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",nicoldamelio,"`friends = [""Harry"", ""Draco"", ""Hermione"",""Ron"", ""Severus"" ]`
`friends.sort()`
`print (friends)`",2024-11-24T22:52:00+00:00
comp-think/2024-2025,"Lecture ""Organising information: ordered structures"", exercise 1",polinakhrm,"`friends_list = [""Harry"", ""Draco"", ""Hermione"", ""Ron"", ""Severus""]`
`friends_list.sort()`
`print(friends_list)`
",2024-12-01T21:15:06+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",maridematteis,"
<img width=""735"" alt=""Screenshot 2024-11-12 alle 11 17 24"" src=""https://github.com/user-attachments/assets/22facc33-fb5e-4c99-9a51-746d11d214dc"">

",2024-11-12T10:18:37+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",KikaYang,"<img width=""986"" alt=""TEST-1"" src=""https://github.com/user-attachments/assets/d0eadb28-da58-4c40-8f87-5e4953db67b3"">
",2024-11-12T15:02:45+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",martinaucch,"<img width=""767"" alt=""Screenshot 2024-11-12 alle 17 33 07"" src=""https://github.com/user-attachments/assets/fd792d0e-0025-460e-96ff-a8205a4ef8a6"">

```
def test_containsword(first_word, second_word, bib_entry, expected):
    result = containsword(first_word, second_word, bib_entry)
    if result == expected: 
        return True
    else:
        return False

def containsword(first_word, second_word, bib_entry):
    result_value = 0
    if first_word in bib_entry:
        result_value += 1

    if second_word in bib_entry:
        result_value += 1
    
    return result_value

print(test_containsword(""luca"", ""mangia"", ""luca oggi mangia"", 2))
print(test_containsword(""luca"", ""corre"", ""luca oggi mangia"", 1))
print(test_containsword(""giorgio"", ""mangia"", ""luca oggi mangia"", 1))
print(test_containsword(""giorgio"", ""corre"", ""luca oggi mangia"", 2))
```

btw i have realized i have made a mistake in my first attempt that i have corrected thanks to @maridematteis answer. I'll post the first attempt because it was working but i believe that even if it was working it did not respected the logic behind the def function(parameter) syntax cause i was expliciting a variable as a parameter. right? not sure
<img width=""756"" alt=""Screenshot 2024-11-12 alle 17 36 34"" src=""https://github.com/user-attachments/assets/3b9fd0bc-98ec-4260-bc0a-ada5d9e4eed4"">
",2024-11-12T16:39:20+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",ValkyrieCain9,"<img width=""1053"" alt=""Screenshot 2024-11-12 at 19 30 39"" src=""https://github.com/user-attachments/assets/9d3468a1-7e1c-498d-a037-35db0f45b133"">
",2024-11-12T18:33:04+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",polinakhrm,"<img width=""1087"" alt=""Screenshot 2024-11-13 at 00 09 50"" src=""https://github.com/user-attachments/assets/196e32b6-c94a-4fc7-89ad-dd6d52e3674a"">
",2024-11-12T23:10:54+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",essepuntato,"Hi all, thanks for all your answers. I need to clarify a passage on test-driven development (which I will also highlight in today's lecture).

All the tests must be passed to claim that an algorithm returns what is expected. Thus, if a test execution returns `False`, the test is not passed. If you need to check the non-compliance of the execution of a function on purpose, then you have to create an additional testing function that returns `True` if the condition of the test is not passed.",2024-11-13T08:08:55+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",arinee01,"<img width=""645"" alt=""Снимок экрана 2024-11-13 в 17 47 10"" src=""https://github.com/user-attachments/assets/bc08ac2b-2be9-45a7-98db-c92f7d903749"">
",2024-11-13T16:47:38+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",martinamrc,"![Immagine 13-11-24 - 18 10](https://github.com/user-attachments/assets/f4a348dc-14e0-4d1a-84a0-cbee8ef33810)
![Immagine 13-11-24 - 18 18](https://github.com/user-attachments/assets/32749a5a-f453-47d6-a2fd-6988573a6f69)
I wasn't sure if we also had to put the actual function of the algorithm ""to work"", so in any case I added the print() with the same inputs of the test plus another one to double-check.",2024-11-13T17:25:34+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",yutong316,"![image](https://github.com/user-attachments/assets/38c9ac2c-e06c-4ae0-940c-a28a910c46c9)
",2024-11-13T19:02:13+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",ERendall,"<img width=""1465"" alt=""Screenshot 2024-11-14 at 16 24 19"" src=""https://github.com/user-attachments/assets/4f2e8c58-bd4f-4730-9d02-f9d3f83d5835"">
",2024-11-14T15:24:40+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",shiho1000,"```python
def test_contains_word(first_word, second_word, bib_entry, expected):
    result = contains_word(first_word, second_word, bib_entry)
    if expected == result:
        return True
    else:
        return False

def contains_word(first_word, second_word, bib_entry):
    contains_first_word = first_word in bib_entry
    contains_second_word = second_word in bib_entry
    resultvalue = 0

    if contains_first_word:
        resultvalue += 1
    if contains_second_word:
        resultvalue += 1
    # Print resultvalue here
    print(""resultvalue:"", resultvalue)  
    return resultvalue      
     
# Three different test runs
print(test_contains_word(""Shotton"", ""Open"", ""Shotton, D. (2013). Open Citations. Nature, 502: 295–297. doi:10.1038/502295a"", 2))
print(test_contains_word(""Citations"", ""Science"", ""Shotton, D. (2013). Open Citations. Nature, 502: 295–297. doi:10.1038/502295a"", 1))
print(test_contains_word(""References"", ""1983"", ""Shotton, D. (2013). Open Citations. Nature, 502: 295–297. doi:10.1038/502295a"", 0))
``` 
Below is what is returned when I run it
```python
resultvalue: 2
True
resultvalue: 1
True
resultvalue: 0
True
``` ",2024-11-14T15:53:16+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",theair-hub,"![image](https://github.com/user-attachments/assets/b1116ac1-3700-43d3-b77e-ef43387c0a03)
",2024-11-14T19:23:38+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",romashovar,"```
def contains_word (word1, word2, bibl):
    
    result_value = 0
    
    if word1 in bibl:
        result_value = result_value + 1

    if word2 in bibl:
        result_value = result_value + 1
    
    return result_value

def test_contain_words (word1, word2, bibl, expected):
    
    result = contains_word (word1, word2, bibl)
    
    if result == expected:
        return True
    else:
        return False
    
print (test_contain_words (""Python"", ""programming"", ""Python: an introduction to programming (James R. Parker)"", 2))
print (test_contain_words (""Python"", ""programming"", ""Deep learning with Python (Francois Chollet)"", 1))
print (test_contain_words (""computer"", ""science"", ""Learn Python in 7 days: get up-and-running with Python"", 0))
```

> True
> True
> True
",2024-11-21T21:35:32+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",justyna09549,"<img width=""1134"" alt=""Zrzut ekranu 2024-11-23 o 4 21 43 PM"" src=""https://github.com/user-attachments/assets/b5c9a61e-4693-4ec7-a390-9a007dfb4ba1"">
",2024-11-23T15:22:59+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",simplycyrus99,"`def test_contains_word(first_word, second_word, bib_entry, expected):
    result = contains_word(first_word, second_word, bib_entry)
    return result == expected  # Compare directly to expected

def contains_word(first_word, second_word, bib_entry):
    result_value = 0
    if first_word in bib_entry:  # Check if the first word exists
        result_value += 1
    if second_word in bib_entry:  # Check if the second word exists
        result_value += 1
    return result_value + 0  # Add additional value if needed

# Test cases
print(test_contains_word(""a"", ""b"", ""abc"", 2))  # True (Both 'a' and 'b' exist)
print(test_contains_word(""a"", ""d"", ""abc"", 1))  # True ('a' exists, 'd' does not)
print(test_contains_word(""x"", ""y"", ""abc"", 0))  # True (Neither 'x' nor 'y' exists)
`

I wrote my code by i needed to look better, hence the help from chat gpt lol",2024-11-24T19:23:09+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 3",nicoldamelio,"
<img width=""992"" alt=""Screenshot 2024-11-26 alle 20 13 42"" src=""https://github.com/user-attachments/assets/0ee2058f-5285-439b-a09c-8874536c811f"">
",2024-11-26T17:50:19+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",ValkyrieCain9,"`""spam"" not in ""spa span sparql"" and not (""egg"" > ""span"")`
 `""spam"" not in ""spa span sparql"" = True`
`""egg"" > ""span"" = False`
therefore
`True and not(False) `
`= True and True `
`= True`",2024-11-11T10:23:46+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",martinamrc,"I'm not sure wether the in / not in operations check if the string of characters ""spam"" in its entirety is included in the other string ""spa span sparql"", if yes, I think the result is True, otherwise I would have a False value.",2024-11-11T18:18:49+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",maridematteis,"<img width=""735"" alt=""Screenshot 2024-11-11 alle 21 29 45"" src=""https://github.com/user-attachments/assets/ef10e526-3cd3-4667-95eb-c8fe88616c6e"">
",2024-11-11T21:36:26+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",KikaYang,True,2024-11-11T21:42:13+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",lisitein,"`""spam"" not in ""spa span sparql"" and not (""egg"" > ""span"")
=True and not (""egg"" > ""span"")
=True and not False
=True and True
=True`",2024-11-11T22:51:53+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",SinerYuu,True,2024-11-12T06:47:24+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",mir-pin,"`""spam"" not in ""spa span sparql"" and not (""egg"" > ""span"")?`
`""spam"" not in ""spa span sparql"" = True`
`""egg"" > ""span"" = False`
`True and not False?`
`True and True?`
`True`",2024-11-12T22:11:03+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",polinakhrm,"`""spam"" not in ""spa span sparql"" and not (""egg"" > ""span"")`
`""spam"" not in ""spa span sparql"" = True`
`not (""egg"" > ""span"") = False`
`True and not False`
`True and True`
`True`",2024-11-12T22:13:12+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",theair-hub,"""spam"" not in ""spa span sparql"" = __True__
*and not* 
(""egg"" > ""span"")= __False__
__True__ *and not*  __False__=
__True__ and __True__=
True",2024-11-13T01:22:30+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",arinee01,"1)""spam"" not in ""spa span sparql"" and not (""egg"" > ""span"")?
2)""spam"" not in ""spa span sparql"" = True
3)""egg"" > ""span"" = False
4)True and not False
5)True and True
6)Answer: True",2024-11-13T08:16:08+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",Maryamdadras,"""spam"" not in ""spa span sparql"" is True
and 
not (""egg"" > ""span"") is not (False)


Therefore
True and not False equals True and True,
Therefore it’s True.",2024-11-14T21:43:15+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",ERendall,"I tried to split up the statement into two parts; the 'and' is the division. 

First part:
1) 'spam' not in 'spa', 'span', 'sparq1' = True. 

Second part: 
1) 'spam' not in (egg > spam) = False.
2) 'spam' in (egg > spam) = True. 
3) = True. 

Together, then: 

True and True. 
Therefore, the value is 'True'. 
",2024-11-16T09:51:20+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",nicoldamelio,"""spam"" not in ""spa span sparql"" and not (""egg"" > ""span"")
""spam"" not in ""spa span sparql"" = True
""egg"" > ""span"" = False
not (""egg"" > ""span"") = True
True and True = True

",2024-11-17T19:40:38+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",simplycyrus99,"""spam"" not in ""spa span sparql"" and not (""egg"" > ""span"")
""spam"" not in ""spa span sparql"" = true
""egg"" > ""span"" = false
true and not false = true and true = true
",2024-11-18T17:25:27+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",romashovar,True,2024-11-21T21:03:07+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 2",martinaucch,"""spam"" not in ""spa span sparql"" and not (""egg"" > ""span"")
""spam"" not in ""spa span sparql"" and not false 
true and true 
true",2024-11-26T16:35:10+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",ValkyrieCain9,True,2024-11-11T10:21:53+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",martinamrc,"If I understood correctly the order of the operations:
1. (not True or False and True): 1) not True = False, 2) False and True = False, 3) False or False = False.
2. not (False) = True.
3. True or False = True.

The value is True.",2024-11-11T18:10:34+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",maridematteis,"<img width=""735"" alt=""Screenshot 2024-11-11 alle 21 28 51"" src=""https://github.com/user-attachments/assets/c8d6a750-a0ff-4431-9e84-0915509b864d"">
",2024-11-11T20:43:38+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",KikaYang,True,2024-11-11T21:38:53+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",lisitein,NOT FALSE OR FALSE= TRUE,2024-11-11T22:47:39+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",SinerYuu,True,2024-11-12T06:44:18+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",martinaucch,True,2024-11-12T15:06:07+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",arinee01,True,2024-11-12T18:23:07+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",mir-pin,"`not (not True or False and True) or False?`

`not True = False` 
`False and True = False`

so we have 
`not (False or False) or False?`

`False or False = False 
`

so again 
`not False or False?` 

`not False = True` 

so in the end
```
True or False? 
True
```
",2024-11-12T18:26:28+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",polinakhrm,"not (not True or False and True) or False?
1) not True = False
2) False and True = False
3) False or False = False

not False or False?
1) not False = True

True or False?
True
",2024-11-12T21:48:49+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",essepuntato,"Hi all,

While all results are good, in some of your answers, you are not applying the right resolution order for the boolean operators. As described in the chapter, it should be as follows:

> First, one must execute all the `not` operations. Then, one must perform all the `and`
operations. Finally, one must assess the remaining `or` operations.

Thus, the resolution of `not True or False and True` should be:

1. `False or False and True`
2. `False or False`
3. `False`",2024-11-13T08:00:11+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",ERendall,"A bit late to the game, and I have cut out Prof. Peroni's answer before I tried to answer this: 

1) not (not True or False and True) or False. 
2) not (False or False and True) or False. 
3) not (False or False) or False. 
4) True or False. 
5) True. ",2024-11-16T09:43:28+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",nicoldamelio,True,2024-11-17T19:33:29+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",simplycyrus99,"`not True = false`
`false and true = false`
`false or false = false`
`not false or false = true or false = true`",2024-11-18T17:17:18+00:00
comp-think/2024-2025,"Lecture ""Programming languages"", exercise 1",romashovar,True,2024-11-21T21:02:01+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 3",ValkyrieCain9,"I haven't checked all the possible combinations for this but I am pretty sure it should work

input: '11011'
blank: ' '
start state: step
table:
  step:
    0 : R
    1 : {R: yes1}
    ' ': {L: result0}
  
  yes1:
    0 : R
    1 : {R: yes2}
    ' ': {L: result0}
 
  yes2:
    0 : R
    1 : {L: result1}
    ' ': {L: result0}
  
  result0:
    [0,1] : L
    ' ' : {write: 0, L: done}

  result1:
    [0,1] : L
    ' ' : {write: 1, L: done}
  done: 
<img width=""600"" alt=""Screenshot 2024-10-30 at 14 28 06"" src=""https://github.com/user-attachments/assets/b7abe02b-8d58-4e31-aada-b0fb6be54d29"">

",2024-10-30T13:29:15+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 3",KikaYang,"
<img width=""1304"" alt=""截屏2024-10-31 12 11 23"" src=""https://github.com/user-attachments/assets/e00ef296-7ae3-4397-b03a-88c3e0d5b2c4"">

Thanks for Regina's example. Now I know what is the meaning of ' ': {L: done}.
",2024-10-31T11:14:37+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 3",theair-hub,"input: 'x11111' #or whatever sequence of 0 and 1 with ""x"" as starting position
blank: ' '
start state: start

table:
  start: 
    'x': {R: q1}
  q0: 
    [0, 1]: L
    'x': {write: 0, L:}
  q1:
    '1': {R: q2}
    '0': {R: q1}
    ' ': {L: q0}
  q2:
    '1': {R: q3}
    '0': {R: q2}
    ' ': {L: q0}
  q3: 
    '1': {L: q4}
    '0': {R: q3}
    ' ': {L: q0}
  q4: 
    [0, 1]: L
    'x': {write: 1, L:}
done: ",2024-11-08T18:47:08+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 3",yutong316,"<html xmlns:v=""urn:schemas-microsoft-com:vml""
xmlns:o=""urn:schemas-microsoft-com:office:office""
xmlns:x=""urn:schemas-microsoft-com:office:excel""
xmlns=""http://www.w3.org/TR/REC-html40"">

<head>

<meta name=ProgId content=Excel.Sheet>
<meta name=Generator content=""Microsoft Excel 15"">
<link id=Main-File rel=Main-File
href=""file:///C:/Users/27815/AppData/Local/Temp/msohtmlclip1/01/clip.htm"">
<link rel=File-List
href=""file:///C:/Users/27815/AppData/Local/Temp/msohtmlclip1/01/clip_filelist.xml"">
<style>
<!--table
	{mso-displayed-decimal-separator:""\."";
	mso-displayed-thousand-separator:""\,"";}
@page
	{margin:.75in .7in .75in .7in;
	mso-header-margin:.3in;
	mso-footer-margin:.3in;}
.font5
	{color:windowtext;
	font-size:9.0pt;
	font-weight:400;
	font-style:normal;
	text-decoration:none;
	font-family:等线;
	mso-generic-font-family:auto;
	mso-font-charset:134;}
tr
	{mso-height-source:auto;
	mso-ruby-visibility:none;}
col
	{mso-width-source:auto;
	mso-ruby-visibility:none;}
br
	{mso-data-placement:same-cell;}
td
	{padding-top:1px;
	padding-right:1px;
	padding-left:1px;
	mso-ignore:padding;
	color:black;
	font-size:11.0pt;
	font-weight:400;
	font-style:normal;
	text-decoration:none;
	font-family:等线;
	mso-generic-font-family:auto;
	mso-font-charset:134;
	mso-number-format:General;
	text-align:general;
	vertical-align:middle;
	border:none;
	mso-background-source:auto;
	mso-pattern:auto;
	mso-protection:locked visible;
	white-space:nowrap;
	mso-rotate:0;}
.xl65
	{font-weight:700;
	text-align:center;
	white-space:normal;}
.xl66
	{white-space:normal;}
ruby
	{ruby-align:left;}
rt
	{color:windowtext;
	font-size:9.0pt;
	font-weight:400;
	font-style:normal;
	text-decoration:none;
	font-family:等线;
	mso-generic-font-family:auto;
	mso-font-charset:134;
	mso-char-type:none;
	display:none;}
-->
</style>
</head>

<body link=""#467886"" vlink=""#96607D"">


Current   State | Current Symbol | Write Symbol | Move Direction | Next State
-- | -- | -- | -- | --
A | 0 | 0 | Right | A
A | 1 | 1 | Right | B
B | 0 | 0 | Right | B
B | 1 | 1 | Right | C
C | 0 | 0 | Right | C
C | 1 | 1 | Right | D
D | 0 | 0 | End | End
D | 1 | 1 | End | End
D | 0 | 0 | End | End



</body>

</html>
",2024-11-09T23:55:26+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 3",ERendall,"<img width=""1462"" alt=""Screenshot 2024-11-12 at 10 42 00"" src=""https://github.com/user-attachments/assets/4bcee100-50d9-480c-9e32-d84ee73efa88"">

I do not know how to film the visualisation, but I hope this suffices. Again, I have tried to be thorough, keeping the calculations simple (although it may not appear like that...). 

The instructions on the side may give some idea as to how things work!  But, in short, I used the same logic as found in exercise 2, accounting for a greater number of combinations. 

Again, happy to help anyone if I am being unclear! ",2024-11-12T09:44:03+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 3",martinaucch,"I have approached this exercise not thinking about the possibile combination in which the result would have been 1 (cause that was not reasonable) and so I just used pen and paper to explore the ""route"" option as professor showed in class. In the end realised that some of the step were the same and so i've grouped them together leaving only the actual ""if point"". 
![Immagine](https://github.com/user-attachments/assets/51e63e12-64fe-49e1-911b-86f032cea839)
```
input: '010010'
blank: '0'
start state: start
table: 
  start:
    0: {write: 1, R: 1stcheck}
    1: {write: 0, L: end}

  1stcheck: 
    0: {write: 0, R: 2ndcheck}
    1: {write: 0, R: 2ndcheckB}
  2ndcheck:
    0: {write: 0, R: 3rdcheck}
    1: {write: 0, R: 3rdcheckB}
  3rdcheck: 
    0: {write: 0, L: failed}
    1: {write: 0, R: 4thcheck}
  4thcheck: 
    0: {write: 0, L: failed}
    1: {write: 0, R: 5thcheck}
  5thcheck:
    0: {write: 0, L: failed}
    1: {write: 0, R: end}
  
  3rdcheckB: 
    0: {write: 0, R: 4thcheck}
    1: {write: 0, R: 4thcheckB}
  4thcheckB:
    0: {write: 0, R: 5thcheck}
    1: {write: 0, R: end}

  
  2ndcheckB:
    0: {write: 0, R: 3rdcheckB}
    1: {write: 0, R: 3rdcheckC}
  3rdcheckC:
    0: {write: 0, R: 4thcheckB}
    1: {write: 0, R: end}

    
  failed: 
    0: {write: 0, L: failed}
    1: {write: 0, L: end}
  end:
 ```
<img width=""1411"" alt=""Screenshot 2024-11-16 alle 16 57 47"" src=""https://github.com/user-attachments/assets/91fc4132-5d1d-45e2-99be-0fc96791b53d"">
",2024-11-16T16:00:40+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 3",romashovar,"<img width=""1440"" alt=""Screenshot 2024-11-21 at 13 52 35"" src=""https://github.com/user-attachments/assets/030c9b85-2994-41c8-87c9-7c31024dc700"">
",2024-11-21T20:10:21+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 2",KikaYang,"input: '000111'
blank: ' '
start state: start
table:
  start:
    0: {R: A}
    1: {R: A}
  A:
    0: {write: 0, R: B}
    1: {write: 1, R: }
  B:
    0: {write: 0, R: C}
    1: {write: 1, R: }
  C:
    0: {write: 0, L: D}
    1: {write: 1, R: E}
  D:
  E:
    0: {write: 0, L: }
    1: {write: 1, R: F}
  F:
    0: {write: 0, L: }
    1: {write: 1, L: G}
  G:
    0: {L: H}
    1: {L: H}
  H:
    0: {L: I}
    1: {L: I}
  I:
    0: {L: J}
    1: {L: J}
  J:
    0: {L: K}
    1: {L: K}
  K:
    0: {write: 1, L: DONE}
    1: {write: 1, L: DONE}
  DONE:

My original intention was to program based on a state tree (all possible combinations), but through continuous debugging, I was only able to keep the part of the code that 'generates results based on the output. Sorry about that.",2024-10-27T11:23:15+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 2",ValkyrieCain9,"I made the algorithm so it was considering three numbers at a time before looping on itself, this allowed me to reduce to number of states I would need to account for. 

input: '11011'
blank: ' '
start state: step
table:
  #step forward to check middle of group of three
  step:
    [0,1] : {R: checkM}
    ' ': {L: result0}
  
  #check middle
  checkM:
    0 : R
    1 : {L: checkL}
    ' ': {L: result0}
  
  #check number left of middle
  checkL:
    0 : {R: step} 
    1 : {R: yes1}
  
  #if 1 is found on the left and middle check the right  
  yes1:
    1 : {R: checkR}
  
  #check number right of middle
  checkR:
    0: {L: step}
    1: {L: result1}
    ' ': {L: result0}
  
  #move back to the start of the sequence and print result 0 for no consecutive 1s found
  result0:
    [0,1] : L
    ' ' : {write: 0, L: done}
  
  #move back to the start of the sequence and print result 1 for three consecutive 1s found
  result1:
    [0,1] : L
    ' ' : {write: 1, L: done}
 
 done: 
<img width=""812"" alt=""Screenshot 2024-10-29 at 16 28 58"" src=""https://github.com/user-attachments/assets/4a224c53-921a-4417-a478-49f754eeaef9"">

<img width=""797"" alt=""Screenshot 2024-10-29 at 16 29 25"" src=""https://github.com/user-attachments/assets/ffa27962-43e2-41d9-a072-f0f07c983c98"">

",2024-10-29T15:40:02+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 2",ERendall,"Naturally, as the very slow one suffering the trauma of previously burying my head in too many history books, I am in a state of awe as to how you did this. 

I presume that the head is limited to one move either right of left at any time. So, how did you manage to move the head back to the start of the sequence in one step? 

Could you elaborate, hammering it into my thick skull? 😂",2024-11-08T18:38:39+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 2",theair-hub,"My algorithm uses six cells 'cause I considered the starting position as not part of the original 5 symbols, since you wrote ""the five cells following the starting position [...]"". This should work also with more than 5 symbols! 

input: 'x00000'
blank: ' '
start state: start

table:
  start: 
    'x': {R: q1}
  q0: 
    [0, 1]: L
    'x': {write: 0, L:}
  q1:
    '1': {R: q2}
    '0': {R: q1}
    ' ': {L: q0}
  q2:
    '1': {R: q3}
    '0': {R: q1}
    ' ': {L: q0}
  q3: 
    '1': {L: q4}
    '0': {R: q1}
    ' ': {L: q0}
  q4: 
    [0, 1]: L
    'x': {write: 1, L}
done:",2024-11-08T18:45:19+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 2",theair-hub,"> Naturally, as the very slow one suffering the trauma of previously burying my head in too many history books, I am in a state of awe as to how you did this.
> 
> I presume that the head is limited to one move either right of left at any time. So, how did you manage to move the head back to the start of the sequence in one step?
> 
> Could you elaborate, hammering it into my thick skull? 😂

That's fine, that was my initial problem too! At the beginning, I tried to write an algorithm that started with moving my 0 state (not the starting one!, that I called 'start') to the right until blank was found (i.e. the last cell, the one after the 5 symbols), in order to develop an algorithm that didn't- let's say- ""moved"" on the right, but backwards, so it returned to the starting position, cause it literally started from the last symbol. 

table:
  start: 
    'x': {R: q0}            #go right to the ""q0"" state
  q0: 
    [0, 1]: R              #if you see 0 or 1, then continue to go right...
    ' ' : {L: q1}           #... until you find blank, then go left (backwards!) and finally start the algorithm with the first state, currently 
                                    working on the last cell.
  q1:
[...]

Of course, while I wrote the rest I specified the Left (L:) position. You can try like this.

But then, I didn't think that was the fastest route xD so I suggest you an algorithm that whenever finds blank (so the end of the five symbols) should return to a state that specifies to go- again, just like before- to the Left whenever a 0 or a 1 is found, until he finds what I called ""x"", the starting position. Maybe it is not very clear like that, but I suggest you to copy and paste what I wrote on turingmachine.io so maybe it's simpler to understand it since there is a visual representation :/ (supposing that what I wrote is correct, as I hope, lol). ",2024-11-08T19:22:49+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 2",ERendall,… I think it may be best if you explain this to me in person… 😂,2024-11-08T20:03:35+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 2",ERendall,"We still have the problem of ‘going again’ — how does one, after completing the fifth step of the algorithm, step back five paces to begin again? 

I am trying a cyclical solution, ferrying results via decision widgets into a cache (if you can call it that). But the tape restricts me, unless I am mistaken in thinking the Turing Machine has no cache memory…! ",2024-11-08T20:14:29+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 2",ValkyrieCain9,"I do not believe the machine has memory so you cannot use an algorithm that stores a result until the end like we could under normal circumstances. Because of this you need to think about how to use what would have been the ""stored result"" at a way to move the head to the next state. Also with this in mind, by the time the head has reached the end of the sequence it should have checked all the numbers already 
",2024-11-08T20:26:42+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 2",theair-hub,"Sorry about that, maybe I can try with adding comments:

input: 'x00000' #x is the starting position where the result will be stored; then, the other 5 symbol you can put any sequence of 
                        1 and 0
blank: ' '
start state: start

table:
start:
'x': {R: q1} #starting from x, go right to begin the ""actual"" algorithm

q1:
'1': {R: q2} #if there is 1...good! Check the q2command. 
'0': {R: q1} #if there is 0, then you should go back to the q1 command and start again checking *the cell on the right*
' ': {L: q0} #if you are on a blank cell, then the 5 symbol sequence is over, so go read the commands written in q0 

q2:
'1': {R: q3} #if there is another 1...good! check the q3command. 
'0': {R: q1} #if there is 0, then you should go back to the q1 command and start again checking *the cell on the right*
' ': {L: q0} #if you are on a blank cell, that means that the 5 symbol sequence is over, so go read the commands written in q0 

q3:
'1': {L: q4} #if there is another 1...good! You found three *1s* in a row. Check the q4 command. 
'0': {R: q1} #if there is 0, then you should go back to the q1 command and start again but *on the cell on the right*
' ': {L: q0} #but if you are on a blank cell, that means that the 5 symbol sequence is over, so go read the commands written in q0

q4: #The command that determines how to go back to the starting position and write 1.
[0, 1]: L #whenever you see 0 or 1, go right
'x': {write: 1, L} #once you reached the ""x"" (aka the starting position), write 1, cause you found three consecutive *1s*

q0: #The command that determines how to go back to the starting position and write 0.
[0, 1]: L #since you are at the end of the 5 symbols, go left anytime you see 0 and 1 
'x': {write: 0, L:} #once you reach x (aka the starting point), write the result: 0 

Of course, if you try a better way to do that, feel free to let me know! I hope this helps understanding what I wrote <3


> We still have the problem of ‘going again’ — how does one, after completing the fifth step of the algorithm, step back five paces to begin again?
> 
> I am trying a cyclical solution, ferrying results via decision widgets into a cache (if you can call it that). But the tape restricts me, unless I am mistaken in thinking the Turing Machine has no cache memory…!


> … I think it may be best if you explain this to me in person… 😂

",2024-11-08T20:52:33+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 2",yutong316,"![image](https://github.com/user-attachments/assets/7d770428-2f88-4081-838d-e2a7d8e25e6f)
<html xmlns:v=""urn:schemas-microsoft-com:vml""
xmlns:o=""urn:schemas-microsoft-com:office:office""
xmlns:x=""urn:schemas-microsoft-com:office:excel""
xmlns=""http://www.w3.org/TR/REC-html40"">

<head>

<meta name=ProgId content=Excel.Sheet>
<meta name=Generator content=""Microsoft Excel 15"">
<link id=Main-File rel=Main-File
href=""file:///C:/Users/27815/AppData/Local/Temp/msohtmlclip1/01/clip.htm"">
<link rel=File-List
href=""file:///C:/Users/27815/AppData/Local/Temp/msohtmlclip1/01/clip_filelist.xml"">
<style>
<!--table
	{mso-displayed-decimal-separator:""\."";
	mso-displayed-thousand-separator:""\,"";}
@page
	{margin:.75in .7in .75in .7in;
	mso-header-margin:.3in;
	mso-footer-margin:.3in;}
.font5
	{color:windowtext;
	font-size:9.0pt;
	font-weight:400;
	font-style:normal;
	text-decoration:none;
	font-family:等线;
	mso-generic-font-family:auto;
	mso-font-charset:134;}
tr
	{mso-height-source:auto;
	mso-ruby-visibility:none;}
col
	{mso-width-source:auto;
	mso-ruby-visibility:none;}
br
	{mso-data-placement:same-cell;}
td
	{padding-top:1px;
	padding-right:1px;
	padding-left:1px;
	mso-ignore:padding;
	color:black;
	font-size:11.0pt;
	font-weight:400;
	font-style:normal;
	text-decoration:none;
	font-family:等线;
	mso-generic-font-family:auto;
	mso-font-charset:134;
	mso-number-format:General;
	text-align:general;
	vertical-align:middle;
	border:none;
	mso-background-source:auto;
	mso-pattern:auto;
	mso-protection:locked visible;
	white-space:nowrap;
	mso-rotate:0;}
.xl63
	{font-size:10.5pt;
	font-weight:700;
	text-align:justify;
	border:1.0pt solid windowtext;
	white-space:normal;}
.xl64
	{font-size:10.5pt;
	text-align:justify;
	border:1.0pt solid windowtext;
	white-space:normal;}
ruby
	{ruby-align:left;}
rt
	{color:windowtext;
	font-size:9.0pt;
	font-weight:400;
	font-style:normal;
	text-decoration:none;
	font-family:等线;
	mso-generic-font-family:auto;
	mso-font-charset:134;
	mso-char-type:none;
	display:none;}
-->
</style>
</head>

<body link=""#467886"" vlink=""#96607D"" lang=ZH-CN>


Current State | Current   Symbol | Write   Symbol | Move   Direction | Next   State
-- | -- | -- | -- | --
A | 0 | 0 | right | A
A | 1 | 1 | right | B
B | 0 | 0 | left | F
B | 1 | 1 | right | C
C | 0 | 0 | left | F
C | 1 | 1 | right | D
D | 0 | 0 | left | E
D | 1 | 1 | left | E
E | 0 or 1 | 0 or 1 | End | End
F | 0 or 1 | 0 or 1 | End | End



</body>

</html>
",2024-11-09T23:46:07+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 2",ERendall," 
<img width=""1464"" alt=""Screenshot 2024-11-12 at 09 25 34"" src=""https://github.com/user-attachments/assets/a6e26ae8-56f2-4f46-b79b-563ec6aec18a"">

Here is my revised algorithm for exercise 2. It may look a bit overkill, but it seems solid and reliable after debugging....

The solution was simpler than I thought, admittedly: I decided to provide states representing each of the forms that the string could take, checking each digit in a rigorous fashion. 

To prevent any ambiguities as far as the output was concerned, I re-wrote each digit as 0 after examination, re-writing the first digit (the result) as either 1 or 0 at the end of the process. 

So, a single 1 among a stream of 0s confirmed the presence of consecutive 1s, and an unchanged stream of 0s suggested that no consecutive 1s were found. 

I hope that makes sense…! Happy to chat if not! ",2024-11-12T08:27:41+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 2",martinaucch,"After monday lesson I have tried to tackle again this exercise keeping in mind that the first possibile sequence of digit to get 1 as an output are: 00111, 11100, 01110 as professor peroni said. This time it was easier to come up with a solution. I worked only with 2 digit, setting the blank state to '0'. I think its working... i gave it a few test. as an input though the first digit must be a 0 and the rest are the actual input sequence. If i understood right during the lesson i think thats should be okay cause this is an implementation of the algorithm in the turing machine so we need to work with the concept of the starting state and blank 0. 
```
input: '011001'
blank: '0'
start state: start
table: 
  start:
    0: {write: 1, R: firstcheck}
    1: {write: 0, L: end}

  firstcheck:
    0: {write: 0, R: secondcheck}
    1: {write: 0, R: secondcheck2}
    
  secondcheck:
    0: {write: 0, R: thirdcheck}
    1: {write: 0, R: thirdcheck3}
    
  secondcheck2:
    1: {write: 0, R: thirdcheck2}
    0: {write: 0, L: failed}
  
  thirdcheck:
    0: {write: 0, L: failed}
    1: {write: 0, R: fourthcheck}
    
  thirdcheck2: 
    1: {write: 0, L: end}
    0: {write: 0, L: failed}
    
  thirdcheck3:
    1: {write: 0, R: fourthcheck3}
    0: {write: 0, L: failed}
     
  failed: 
    0: {write: 0, L: failed}
    1: {write: 0, L: end}
    
  fourthcheck: 
    0: {write: 0, L: failed}
    1: {write: 0, R: fifthcheck}
  
  fourthcheck3: 
    1: {write: 0, R: end}
    0: {write: 0, L: failed}
  
  fifthcheck:
    0: {write: 0, L: failed}
    1: {write: 0, R: end}
  
  end:
```
<img width=""1433"" alt=""Screenshot 2024-11-12 alle 19 28 28"" src=""https://github.com/user-attachments/assets/59f2736e-2bde-4ad9-add0-27cb5289b776"">
",2024-11-12T18:24:27+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 1",KikaYang,"blank: '0'
start state: A
table:
  A:
    0: {write: 1, L: B}      
  B:
    0: {write: 1, R: }
    1: {write: 0, R: C} 
  C:
    0: {write: 1, R: D}
  D:
I gotta say it really took me a long time to figure out that it is not necessary to change the state in the end of line. ",2024-10-26T10:50:01+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 1",theair-hub,"
https://github.com/user-attachments/assets/0bdc0ada-b770-42e3-9ed0-2984fce725c7

This took me some time, so I hope it is correct :D

blank: '0'
start state: A
table:
  A:
    '0': {write: 1, L: B}
    '1': {write: 0, R: C}
  B:
    '0': {write: 1, R: A}
  C:
    '0': {write: 1, L: D}
  D: ",2024-10-27T14:27:18+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 1",ValkyrieCain9,"input: ''
blank: 0
start state: A
table:
  A:
    0: {write: 1, R: B}
    1: {write: 0, L: C}
  B:
    0: {write: 1, L: A}
  C:
    0: {write: 1, R: D}
  D:

<img width=""579"" alt=""Screenshot 2024-10-29 at 22 02 56"" src=""https://github.com/user-attachments/assets/45403f8b-277e-4cbd-9988-5fe12b07b9ba"">

  
",2024-10-29T21:03:42+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 1",lauraaa13,"![es  1](https://github.com/user-attachments/assets/dc95652f-8286-4545-96b2-2e00ec5fe61b)
",2024-11-07T22:24:41+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 1",ERendall,"
<img width=""1470"" alt=""Screenshot 2024-11-08 at 15 11 52"" src=""https://github.com/user-attachments/assets/d11fb2bb-24f6-466b-8fcd-c56892874bbd"">

",2024-11-08T14:13:01+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 1",mir-pin,"![ex  1](https://github.com/user-attachments/assets/0ef41da7-1a19-44bc-8f12-54f3e150bf1a)

input: ''
blank: '0'
start state: A
table:
  A:
    0: {write: 1, L: B}
    1: {write: 0, R: C}
  B:
    0: {write: 1, R: A}
    1: {write: 0, R: C}
  C:
    0: {write: 1, L: D}
    1: {write: 0, L: D}
  D:",2024-11-08T16:16:17+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 1",yutong316,"<html xmlns:o=""urn:schemas-microsoft-com:office:office""
xmlns:w=""urn:schemas-microsoft-com:office:word""
xmlns:m=""http://schemas.microsoft.com/office/2004/12/omml""
xmlns=""http://www.w3.org/TR/REC-html40"">

<head>

<meta name=ProgId content=Word.Document>
<meta name=Generator content=""Microsoft Word 15"">
<meta name=Originator content=""Microsoft Word 15"">
<link rel=File-List
href=""file:///C:/Users/27815/AppData/Local/Temp/msohtmlclip1/01/clip_filelist.xml"">
<!--[if gte mso 9]><xml>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]-->
<link rel=themeData
href=""file:///C:/Users/27815/AppData/Local/Temp/msohtmlclip1/01/clip_themedata.thmx"">
<link rel=colorSchemeMapping
href=""file:///C:/Users/27815/AppData/Local/Temp/msohtmlclip1/01/clip_colorschememapping.xml"">
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Normal</w:View>
  <w:Zoom>0</w:Zoom>
  <w:TrackMoves/>
  <w:TrackFormatting/>
  <w:PunctuationKerning/>
  <w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:DoNotPromoteQF/>
  <w:LidThemeOther>EN-US</w:LidThemeOther>
  <w:LidThemeAsian>ZH-CN</w:LidThemeAsian>
  <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:AdjustLineHeightInTable/>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
   <w:SplitPgBreakAndParaMark/>
   <w:EnableOpenTypeKerning/>
   <w:DontFlipMirrorIndents/>
   <w:OverrideTableStyleHps/>
   <w:UseFELayout/>
  </w:Compatibility>
  <m:mathPr>
   <m:mathFont m:val=""Cambria Math""/>
   <m:brkBin m:val=""before""/>
   <m:brkBinSub m:val=""&#45;-""/>
   <m:smallFrac m:val=""off""/>
   <m:dispDef/>
   <m:lMargin m:val=""0""/>
   <m:rMargin m:val=""0""/>
   <m:defJc m:val=""centerGroup""/>
   <m:wrapIndent m:val=""1440""/>
   <m:intLim m:val=""subSup""/>
   <m:naryLim m:val=""undOvr""/>
  </m:mathPr></w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState=""false"" DefUnhideWhenUsed=""false""
  DefSemiHidden=""false"" DefQFormat=""false"" DefPriority=""99""
  LatentStyleCount=""376"">
  <w:LsdException Locked=""false"" Priority=""0"" QFormat=""true"" Name=""Normal""/>
  <w:LsdException Locked=""false"" Priority=""9"" QFormat=""true"" Name=""heading 1""/>
  <w:LsdException Locked=""false"" Priority=""9"" SemiHidden=""true""
   UnhideWhenUsed=""true"" QFormat=""true"" Name=""heading 2""/>
  <w:LsdException Locked=""false"" Priority=""9"" SemiHidden=""true""
   UnhideWhenUsed=""true"" QFormat=""true"" Name=""heading 3""/>
  <w:LsdException Locked=""false"" Priority=""9"" SemiHidden=""true""
   UnhideWhenUsed=""true"" QFormat=""true"" Name=""heading 4""/>
  <w:LsdException Locked=""false"" Priority=""9"" SemiHidden=""true""
   UnhideWhenUsed=""true"" QFormat=""true"" Name=""heading 5""/>
  <w:LsdException Locked=""false"" Priority=""9"" SemiHidden=""true""
   UnhideWhenUsed=""true"" QFormat=""true"" Name=""heading 6""/>
  <w:LsdException Locked=""false"" Priority=""9"" SemiHidden=""true""
   UnhideWhenUsed=""true"" QFormat=""true"" Name=""heading 7""/>
  <w:LsdException Locked=""false"" Priority=""9"" SemiHidden=""true""
   UnhideWhenUsed=""true"" QFormat=""true"" Name=""heading 8""/>
  <w:LsdException Locked=""false"" Priority=""9"" SemiHidden=""true""
   UnhideWhenUsed=""true"" QFormat=""true"" Name=""heading 9""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""index 1""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""index 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""index 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""index 4""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""index 5""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""index 6""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""index 7""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""index 8""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""index 9""/>
  <w:LsdException Locked=""false"" Priority=""39"" SemiHidden=""true""
   UnhideWhenUsed=""true"" Name=""toc 1""/>
  <w:LsdException Locked=""false"" Priority=""39"" SemiHidden=""true""
   UnhideWhenUsed=""true"" Name=""toc 2""/>
  <w:LsdException Locked=""false"" Priority=""39"" SemiHidden=""true""
   UnhideWhenUsed=""true"" Name=""toc 3""/>
  <w:LsdException Locked=""false"" Priority=""39"" SemiHidden=""true""
   UnhideWhenUsed=""true"" Name=""toc 4""/>
  <w:LsdException Locked=""false"" Priority=""39"" SemiHidden=""true""
   UnhideWhenUsed=""true"" Name=""toc 5""/>
  <w:LsdException Locked=""false"" Priority=""39"" SemiHidden=""true""
   UnhideWhenUsed=""true"" Name=""toc 6""/>
  <w:LsdException Locked=""false"" Priority=""39"" SemiHidden=""true""
   UnhideWhenUsed=""true"" Name=""toc 7""/>
  <w:LsdException Locked=""false"" Priority=""39"" SemiHidden=""true""
   UnhideWhenUsed=""true"" Name=""toc 8""/>
  <w:LsdException Locked=""false"" Priority=""39"" SemiHidden=""true""
   UnhideWhenUsed=""true"" Name=""toc 9""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Normal Indent""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""footnote text""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""annotation text""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""header""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""footer""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""index heading""/>
  <w:LsdException Locked=""false"" Priority=""35"" SemiHidden=""true""
   UnhideWhenUsed=""true"" QFormat=""true"" Name=""caption""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""table of figures""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""envelope address""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""envelope return""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""footnote reference""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""annotation reference""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""line number""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""page number""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""endnote reference""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""endnote text""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""table of authorities""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""macro""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""toa heading""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Bullet""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Number""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List 4""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List 5""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Bullet 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Bullet 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Bullet 4""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Bullet 5""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Number 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Number 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Number 4""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Number 5""/>
  <w:LsdException Locked=""false"" Priority=""10"" QFormat=""true"" Name=""Title""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Closing""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Signature""/>
  <w:LsdException Locked=""false"" Priority=""1"" SemiHidden=""true""
   UnhideWhenUsed=""true"" Name=""Default Paragraph Font""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Body Text""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Body Text Indent""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Continue""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Continue 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Continue 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Continue 4""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""List Continue 5""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Message Header""/>
  <w:LsdException Locked=""false"" Priority=""11"" QFormat=""true"" Name=""Subtitle""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Salutation""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Date""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Body Text First Indent""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Body Text First Indent 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Note Heading""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Body Text 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Body Text 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Body Text Indent 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Body Text Indent 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Block Text""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Hyperlink""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""FollowedHyperlink""/>
  <w:LsdException Locked=""false"" Priority=""22"" QFormat=""true"" Name=""Strong""/>
  <w:LsdException Locked=""false"" Priority=""20"" QFormat=""true"" Name=""Emphasis""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Document Map""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Plain Text""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""E-mail Signature""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""HTML Top of Form""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""HTML Bottom of Form""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Normal (Web)""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""HTML Acronym""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""HTML Address""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""HTML Cite""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""HTML Code""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""HTML Definition""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""HTML Keyboard""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""HTML Preformatted""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""HTML Sample""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""HTML Typewriter""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""HTML Variable""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Normal Table""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""annotation subject""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""No List""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Outline List 1""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Outline List 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Outline List 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Simple 1""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Simple 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Simple 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Classic 1""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Classic 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Classic 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Classic 4""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Colorful 1""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Colorful 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Colorful 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Columns 1""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Columns 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Columns 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Columns 4""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Columns 5""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Grid 1""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Grid 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Grid 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Grid 4""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Grid 5""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Grid 6""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Grid 7""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Grid 8""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table List 1""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table List 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table List 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table List 4""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table List 5""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table List 6""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table List 7""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table List 8""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table 3D effects 1""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table 3D effects 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table 3D effects 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Contemporary""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Elegant""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Professional""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Subtle 1""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Subtle 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Web 1""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Web 2""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Web 3""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Balloon Text""/>
  <w:LsdException Locked=""false"" Priority=""39"" Name=""Table Grid""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Table Theme""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" Name=""Placeholder Text""/>
  <w:LsdException Locked=""false"" Priority=""1"" QFormat=""true"" Name=""No Spacing""/>
  <w:LsdException Locked=""false"" Priority=""60"" Name=""Light Shading""/>
  <w:LsdException Locked=""false"" Priority=""61"" Name=""Light List""/>
  <w:LsdException Locked=""false"" Priority=""62"" Name=""Light Grid""/>
  <w:LsdException Locked=""false"" Priority=""63"" Name=""Medium Shading 1""/>
  <w:LsdException Locked=""false"" Priority=""64"" Name=""Medium Shading 2""/>
  <w:LsdException Locked=""false"" Priority=""65"" Name=""Medium List 1""/>
  <w:LsdException Locked=""false"" Priority=""66"" Name=""Medium List 2""/>
  <w:LsdException Locked=""false"" Priority=""67"" Name=""Medium Grid 1""/>
  <w:LsdException Locked=""false"" Priority=""68"" Name=""Medium Grid 2""/>
  <w:LsdException Locked=""false"" Priority=""69"" Name=""Medium Grid 3""/>
  <w:LsdException Locked=""false"" Priority=""70"" Name=""Dark List""/>
  <w:LsdException Locked=""false"" Priority=""71"" Name=""Colorful Shading""/>
  <w:LsdException Locked=""false"" Priority=""72"" Name=""Colorful List""/>
  <w:LsdException Locked=""false"" Priority=""73"" Name=""Colorful Grid""/>
  <w:LsdException Locked=""false"" Priority=""60"" Name=""Light Shading Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""61"" Name=""Light List Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""62"" Name=""Light Grid Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""63"" Name=""Medium Shading 1 Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""64"" Name=""Medium Shading 2 Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""65"" Name=""Medium List 1 Accent 1""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" Name=""Revision""/>
  <w:LsdException Locked=""false"" Priority=""34"" QFormat=""true""
   Name=""List Paragraph""/>
  <w:LsdException Locked=""false"" Priority=""29"" QFormat=""true"" Name=""Quote""/>
  <w:LsdException Locked=""false"" Priority=""30"" QFormat=""true""
   Name=""Intense Quote""/>
  <w:LsdException Locked=""false"" Priority=""66"" Name=""Medium List 2 Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""67"" Name=""Medium Grid 1 Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""68"" Name=""Medium Grid 2 Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""69"" Name=""Medium Grid 3 Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""70"" Name=""Dark List Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""71"" Name=""Colorful Shading Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""72"" Name=""Colorful List Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""73"" Name=""Colorful Grid Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""60"" Name=""Light Shading Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""61"" Name=""Light List Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""62"" Name=""Light Grid Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""63"" Name=""Medium Shading 1 Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""64"" Name=""Medium Shading 2 Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""65"" Name=""Medium List 1 Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""66"" Name=""Medium List 2 Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""67"" Name=""Medium Grid 1 Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""68"" Name=""Medium Grid 2 Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""69"" Name=""Medium Grid 3 Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""70"" Name=""Dark List Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""71"" Name=""Colorful Shading Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""72"" Name=""Colorful List Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""73"" Name=""Colorful Grid Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""60"" Name=""Light Shading Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""61"" Name=""Light List Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""62"" Name=""Light Grid Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""63"" Name=""Medium Shading 1 Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""64"" Name=""Medium Shading 2 Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""65"" Name=""Medium List 1 Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""66"" Name=""Medium List 2 Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""67"" Name=""Medium Grid 1 Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""68"" Name=""Medium Grid 2 Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""69"" Name=""Medium Grid 3 Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""70"" Name=""Dark List Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""71"" Name=""Colorful Shading Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""72"" Name=""Colorful List Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""73"" Name=""Colorful Grid Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""60"" Name=""Light Shading Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""61"" Name=""Light List Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""62"" Name=""Light Grid Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""63"" Name=""Medium Shading 1 Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""64"" Name=""Medium Shading 2 Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""65"" Name=""Medium List 1 Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""66"" Name=""Medium List 2 Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""67"" Name=""Medium Grid 1 Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""68"" Name=""Medium Grid 2 Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""69"" Name=""Medium Grid 3 Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""70"" Name=""Dark List Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""71"" Name=""Colorful Shading Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""72"" Name=""Colorful List Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""73"" Name=""Colorful Grid Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""60"" Name=""Light Shading Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""61"" Name=""Light List Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""62"" Name=""Light Grid Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""63"" Name=""Medium Shading 1 Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""64"" Name=""Medium Shading 2 Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""65"" Name=""Medium List 1 Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""66"" Name=""Medium List 2 Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""67"" Name=""Medium Grid 1 Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""68"" Name=""Medium Grid 2 Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""69"" Name=""Medium Grid 3 Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""70"" Name=""Dark List Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""71"" Name=""Colorful Shading Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""72"" Name=""Colorful List Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""73"" Name=""Colorful Grid Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""60"" Name=""Light Shading Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""61"" Name=""Light List Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""62"" Name=""Light Grid Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""63"" Name=""Medium Shading 1 Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""64"" Name=""Medium Shading 2 Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""65"" Name=""Medium List 1 Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""66"" Name=""Medium List 2 Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""67"" Name=""Medium Grid 1 Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""68"" Name=""Medium Grid 2 Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""69"" Name=""Medium Grid 3 Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""70"" Name=""Dark List Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""71"" Name=""Colorful Shading Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""72"" Name=""Colorful List Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""73"" Name=""Colorful Grid Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""19"" QFormat=""true""
   Name=""Subtle Emphasis""/>
  <w:LsdException Locked=""false"" Priority=""21"" QFormat=""true""
   Name=""Intense Emphasis""/>
  <w:LsdException Locked=""false"" Priority=""31"" QFormat=""true""
   Name=""Subtle Reference""/>
  <w:LsdException Locked=""false"" Priority=""32"" QFormat=""true""
   Name=""Intense Reference""/>
  <w:LsdException Locked=""false"" Priority=""33"" QFormat=""true"" Name=""Book Title""/>
  <w:LsdException Locked=""false"" Priority=""37"" SemiHidden=""true""
   UnhideWhenUsed=""true"" Name=""Bibliography""/>
  <w:LsdException Locked=""false"" Priority=""39"" SemiHidden=""true""
   UnhideWhenUsed=""true"" QFormat=""true"" Name=""TOC Heading""/>
  <w:LsdException Locked=""false"" Priority=""41"" Name=""Plain Table 1""/>
  <w:LsdException Locked=""false"" Priority=""42"" Name=""Plain Table 2""/>
  <w:LsdException Locked=""false"" Priority=""43"" Name=""Plain Table 3""/>
  <w:LsdException Locked=""false"" Priority=""44"" Name=""Plain Table 4""/>
  <w:LsdException Locked=""false"" Priority=""45"" Name=""Plain Table 5""/>
  <w:LsdException Locked=""false"" Priority=""40"" Name=""Grid Table Light""/>
  <w:LsdException Locked=""false"" Priority=""46"" Name=""Grid Table 1 Light""/>
  <w:LsdException Locked=""false"" Priority=""47"" Name=""Grid Table 2""/>
  <w:LsdException Locked=""false"" Priority=""48"" Name=""Grid Table 3""/>
  <w:LsdException Locked=""false"" Priority=""49"" Name=""Grid Table 4""/>
  <w:LsdException Locked=""false"" Priority=""50"" Name=""Grid Table 5 Dark""/>
  <w:LsdException Locked=""false"" Priority=""51"" Name=""Grid Table 6 Colorful""/>
  <w:LsdException Locked=""false"" Priority=""52"" Name=""Grid Table 7 Colorful""/>
  <w:LsdException Locked=""false"" Priority=""46""
   Name=""Grid Table 1 Light Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""47"" Name=""Grid Table 2 Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""48"" Name=""Grid Table 3 Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""49"" Name=""Grid Table 4 Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""50"" Name=""Grid Table 5 Dark Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""51""
   Name=""Grid Table 6 Colorful Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""52""
   Name=""Grid Table 7 Colorful Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""46""
   Name=""Grid Table 1 Light Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""47"" Name=""Grid Table 2 Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""48"" Name=""Grid Table 3 Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""49"" Name=""Grid Table 4 Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""50"" Name=""Grid Table 5 Dark Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""51""
   Name=""Grid Table 6 Colorful Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""52""
   Name=""Grid Table 7 Colorful Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""46""
   Name=""Grid Table 1 Light Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""47"" Name=""Grid Table 2 Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""48"" Name=""Grid Table 3 Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""49"" Name=""Grid Table 4 Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""50"" Name=""Grid Table 5 Dark Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""51""
   Name=""Grid Table 6 Colorful Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""52""
   Name=""Grid Table 7 Colorful Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""46""
   Name=""Grid Table 1 Light Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""47"" Name=""Grid Table 2 Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""48"" Name=""Grid Table 3 Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""49"" Name=""Grid Table 4 Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""50"" Name=""Grid Table 5 Dark Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""51""
   Name=""Grid Table 6 Colorful Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""52""
   Name=""Grid Table 7 Colorful Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""46""
   Name=""Grid Table 1 Light Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""47"" Name=""Grid Table 2 Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""48"" Name=""Grid Table 3 Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""49"" Name=""Grid Table 4 Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""50"" Name=""Grid Table 5 Dark Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""51""
   Name=""Grid Table 6 Colorful Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""52""
   Name=""Grid Table 7 Colorful Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""46""
   Name=""Grid Table 1 Light Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""47"" Name=""Grid Table 2 Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""48"" Name=""Grid Table 3 Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""49"" Name=""Grid Table 4 Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""50"" Name=""Grid Table 5 Dark Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""51""
   Name=""Grid Table 6 Colorful Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""52""
   Name=""Grid Table 7 Colorful Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""46"" Name=""List Table 1 Light""/>
  <w:LsdException Locked=""false"" Priority=""47"" Name=""List Table 2""/>
  <w:LsdException Locked=""false"" Priority=""48"" Name=""List Table 3""/>
  <w:LsdException Locked=""false"" Priority=""49"" Name=""List Table 4""/>
  <w:LsdException Locked=""false"" Priority=""50"" Name=""List Table 5 Dark""/>
  <w:LsdException Locked=""false"" Priority=""51"" Name=""List Table 6 Colorful""/>
  <w:LsdException Locked=""false"" Priority=""52"" Name=""List Table 7 Colorful""/>
  <w:LsdException Locked=""false"" Priority=""46""
   Name=""List Table 1 Light Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""47"" Name=""List Table 2 Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""48"" Name=""List Table 3 Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""49"" Name=""List Table 4 Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""50"" Name=""List Table 5 Dark Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""51""
   Name=""List Table 6 Colorful Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""52""
   Name=""List Table 7 Colorful Accent 1""/>
  <w:LsdException Locked=""false"" Priority=""46""
   Name=""List Table 1 Light Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""47"" Name=""List Table 2 Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""48"" Name=""List Table 3 Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""49"" Name=""List Table 4 Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""50"" Name=""List Table 5 Dark Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""51""
   Name=""List Table 6 Colorful Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""52""
   Name=""List Table 7 Colorful Accent 2""/>
  <w:LsdException Locked=""false"" Priority=""46""
   Name=""List Table 1 Light Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""47"" Name=""List Table 2 Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""48"" Name=""List Table 3 Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""49"" Name=""List Table 4 Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""50"" Name=""List Table 5 Dark Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""51""
   Name=""List Table 6 Colorful Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""52""
   Name=""List Table 7 Colorful Accent 3""/>
  <w:LsdException Locked=""false"" Priority=""46""
   Name=""List Table 1 Light Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""47"" Name=""List Table 2 Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""48"" Name=""List Table 3 Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""49"" Name=""List Table 4 Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""50"" Name=""List Table 5 Dark Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""51""
   Name=""List Table 6 Colorful Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""52""
   Name=""List Table 7 Colorful Accent 4""/>
  <w:LsdException Locked=""false"" Priority=""46""
   Name=""List Table 1 Light Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""47"" Name=""List Table 2 Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""48"" Name=""List Table 3 Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""49"" Name=""List Table 4 Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""50"" Name=""List Table 5 Dark Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""51""
   Name=""List Table 6 Colorful Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""52""
   Name=""List Table 7 Colorful Accent 5""/>
  <w:LsdException Locked=""false"" Priority=""46""
   Name=""List Table 1 Light Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""47"" Name=""List Table 2 Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""48"" Name=""List Table 3 Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""49"" Name=""List Table 4 Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""50"" Name=""List Table 5 Dark Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""51""
   Name=""List Table 6 Colorful Accent 6""/>
  <w:LsdException Locked=""false"" Priority=""52""
   Name=""List Table 7 Colorful Accent 6""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Mention""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Smart Hyperlink""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Hashtag""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Unresolved Mention""/>
  <w:LsdException Locked=""false"" SemiHidden=""true"" UnhideWhenUsed=""true""
   Name=""Smart Link""/>
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:""Cambria Math"";
	panose-1:2 4 5 3 5 4 6 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:-536869121 1107305727 33554432 0 415 0;}
@font-face
	{font-family:等线;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:DengXian;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:-1610612033 953122042 22 0 262159 0;}
@font-face
	{font-family:""\@等线"";
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:-1610612033 953122042 22 0 262159 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-parent:"""";
	margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	font-size:10.5pt;
	mso-bidi-font-size:11.0pt;
	font-family:等线;
	mso-ascii-font-family:等线;
	mso-ascii-theme-font:minor-latin;
	mso-fareast-font-family:等线;
	mso-fareast-theme-font:minor-fareast;
	mso-hansi-font-family:等线;
	mso-hansi-theme-font:minor-latin;
	mso-bidi-font-family:""Times New Roman"";
	mso-bidi-theme-font:minor-bidi;
	mso-font-kerning:1.0pt;}
.MsoChpDefault
	{mso-style-type:export-only;
	mso-default-props:yes;
	font-size:10.5pt;
	mso-ansi-font-size:10.5pt;
	mso-bidi-font-size:11.0pt;
	font-family:等线;
	mso-bidi-font-family:""Times New Roman"";
	mso-bidi-theme-font:minor-bidi;
	mso-ligatures:none;}
 /* Page Definitions */
 @page
	{mso-page-border-surround-header:no;
	mso-page-border-surround-footer:no;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:42.55pt;
	mso-footer-margin:49.6pt;
	mso-paper-source:0;
	layout-grid:15.6pt;}
div.WordSection1
	{page:WordSection1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:普通表格;
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-parent:"""";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:11.0pt;
	font-family:等线;
	mso-ascii-font-family:等线;
	mso-ascii-theme-font:minor-latin;
	mso-fareast-font-family:等线;
	mso-fareast-theme-font:minor-fareast;
	mso-hansi-font-family:等线;
	mso-hansi-theme-font:minor-latin;
	mso-font-kerning:1.0pt;}
table.MsoTableGrid
	{mso-style-name:网格型;
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-priority:39;
	mso-style-unhide:no;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0cm;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:11.0pt;
	font-family:等线;
	mso-ascii-font-family:等线;
	mso-ascii-theme-font:minor-latin;
	mso-fareast-font-family:等线;
	mso-fareast-theme-font:minor-fareast;
	mso-hansi-font-family:等线;
	mso-hansi-theme-font:minor-latin;
	mso-font-kerning:1.0pt;}
</style>
<![endif]-->
</head>

<body lang=ZH-CN style='tab-interval:21.0pt;word-wrap:break-word;text-justify-trim:
punctuation'>
<!--StartFragment-->


Current state | Tape symbol | Write symbol | Move head | Next state
-- | -- | -- | -- | --
A | 0 | 0 | Left | B
B | 0 | 1 | Right | C
C | 0 | 1 | Right | D
D | 0 or 1 | End | End | End



<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<!--EndFragment-->
</body>

</html>
",2024-11-09T22:58:56+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 1",simplycyrus99,"input: ''
blank: '0'
start state: A
table:
  A:
    0: {write: 1, L: B}
    1: {write: 1, R: C}
  B:
    0: {write: 1, R: A}
    1: {write: 0, R: C}
  C:
    0: {write: 1, L: D}
    1: {write: 0, L: D}
  D:

Running the damn machine took me more time 
  
  ",2024-11-10T00:50:11+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 1",martinaucch,"<img width=""1221"" alt=""Screenshot 2024-11-10 alle 21 59 18"" src=""https://github.com/user-attachments/assets/1810bcbc-f9df-4404-995b-27c03504e976"">
",2024-11-10T20:59:32+00:00
comp-think/2024-2025,"Lecture ""Computability"", exercise 1",nicoldamelio,"<img width=""995"" alt=""Screenshot 2024-11-17 alle 18 41 43"" src=""https://github.com/user-attachments/assets/420a19d5-55d7-456c-a724-7709e32c1f7d"">
",2024-11-17T17:44:50+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",nicoldamelio,"![IMG_6790](https://github.com/user-attachments/assets/1e255330-b6e8-4f94-a637-b92d32f52619)
",2024-10-18T14:45:02+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",maridematteis,"[1.pdf](https://github.com/user-attachments/files/17439466/1.pdf)
[2.pdf](https://github.com/user-attachments/files/17439468/2.pdf)
",2024-10-18T18:51:04+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",arinee01,"1. <img width=""970"" alt=""Снимок экрана 2024-10-19 в 20 05 47"" src=""https://github.com/user-attachments/assets/91d4cece-f167-4e46-a96a-8f24d254051d"">
2. 
<img width=""806"" alt=""Снимок экрана 2024-10-20 в 20 11 50"" src=""https://github.com/user-attachments/assets/db41085a-b002-4cbd-973e-3059ecebdabd"">
",2024-10-19T18:34:03+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",digitalctrlv,"![CTP book exc 2 3 drawio](https://github.com/user-attachments/assets/50dc0ad9-d1e6-4ce1-b05e-8e5fba1915c9)
",2024-10-20T13:33:33+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",yutong316,"![image](https://github.com/user-attachments/assets/eb24ba8b-48d2-4265-91a0-64b4f369dbdf)
",2024-10-20T19:07:11+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",mir-pin,"![Fibonacci_flowcharts](https://github.com/user-attachments/assets/dfedf4dd-e293-4320-8bc0-0501c2a2f7a4)
",2024-10-21T10:53:26+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",shiho1000,"![3-1](https://github.com/user-attachments/assets/b6b1c2e0-4836-49e4-90b6-7cc536708774)
![3-2](https://github.com/user-attachments/assets/3a19b973-deba-44f7-ad94-86581abf37ae)
",2024-10-21T14:14:47+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",picontestudio00,"Algorithm 1

![ex 3](https://github.com/user-attachments/assets/04fb2851-d088-496c-a31d-f4eb40ae285a)


",2024-10-22T14:26:46+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",picontestudio00,"Algorithm 2
![ex 3 (1)](https://github.com/user-attachments/assets/84767da9-5ada-43aa-b0cd-d344bd50a863)
",2024-10-22T15:25:07+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",Fahmyrose,"Algorithm of the first definition: 
![Immagine WhatsApp 2024-10-22 ore 20 27 00_0558052f](https://github.com/user-attachments/assets/2b799c6c-f222-4d78-953b-ab7a02d3bae1)

Algorithm of the second definition: 
![Immagine WhatsApp 2024-10-22 ore 20 27 32_ac41ffc5](https://github.com/user-attachments/assets/e1a0e04d-9b48-4861-b461-49f6df2174a1)
",2024-10-22T18:30:12+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",VirgiBo,"![Es 3 1](https://github.com/user-attachments/assets/02ba0d56-814d-4605-b4ad-53cf201dd190)
![Alg3 2](https://github.com/user-attachments/assets/aee51095-d3f4-4d0f-9f87-29f5c56a5a64)
",2024-10-23T09:30:46+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",martinaucch,"
![Immagine](https://github.com/user-attachments/assets/0bd9cf24-9421-44a2-bee5-7c5186d24c5b)
![Immagine 3](https://github.com/user-attachments/assets/a872f10c-e6d4-45ea-9ccf-8b621ad71ef1)


",2024-10-23T10:52:41+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",martinamrc,"![Exercise 3](https://github.com/user-attachments/assets/f53112a5-9b28-42ec-b906-25de88b4f062)
",2024-10-23T14:09:24+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",simplycyrus99,"![Untitled Diagram (1)](https://github.com/user-attachments/assets/8a5a5257-abbd-4452-86cd-52c1b38000ee)
",2024-10-23T23:45:37+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",danielecamagnadhdk,"![Flowchart](https://github.com/user-attachments/assets/2dbf53f1-2896-4144-9f25-fab37bd9741c)
",2024-10-24T16:28:44+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",KikaYang,"![Exercise-3](https://github.com/user-attachments/assets/aef3c1ec-2356-4edc-bc64-ea7d9f73c5a4)
",2024-10-25T10:29:36+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 3",orboboro,"![Immagine WhatsApp 2024-11-24 ore 16 37 44_c3e803e9](https://github.com/user-attachments/assets/3d4b5f09-f14e-4aa1-a4b1-c246ba0af643)
![Immagine WhatsApp 2024-11-24 ore 16 37 45_1bd11813](https://github.com/user-attachments/assets/20294ea8-3b6d-4b92-8e52-ed8d37398fbb)
",2024-11-24T15:40:25+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",ValkyrieCain9,"![Object Identification flowchart drawio](https://github.com/user-attachments/assets/09a6c859-8c82-41c5-9487-f9756c2adac7)
",2024-10-18T11:52:04+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",nicoldamelio,"![IMG_6789](https://github.com/user-attachments/assets/8d0b7b7e-9da6-4382-9096-02c6db86ac85)
",2024-10-18T13:47:13+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",maridematteis,"
<img width=""776"" alt=""Algorithm"" src=""https://github.com/user-attachments/assets/9c56249d-2980-4762-9347-5711dae2d7ef"">

",2024-10-18T16:07:50+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",mir-pin,"
![flowchart-ex2](https://github.com/user-attachments/assets/57cd0eb3-c691-416b-87fa-96fe08c181f2)

",2024-10-18T17:40:47+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",picontestudio00,![IMG_0061](https://github.com/user-attachments/assets/6caf87dd-9f0a-41e9-a599-3b20113486d9),2024-10-19T16:50:19+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",arinee01,"<img width=""723"" alt=""Снимок экрана 2024-10-19 в 19 06 20"" src=""https://github.com/user-attachments/assets/7746d895-fb2e-4277-b3c6-136a86b95fcb"">
",2024-10-19T17:06:59+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",cristinavercelli,"![flowchartt](https://github.com/user-attachments/assets/bcb89023-68f7-46a1-939a-ad17fc14d037)
",2024-10-19T17:27:38+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",digitalctrlv,"
![CTP book exc 2 2 drawio (1)](https://github.com/user-attachments/assets/6f57baa2-bf24-4efa-829d-abdce5948e21)

",2024-10-20T12:44:22+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",yutong316,"![image](https://github.com/user-attachments/assets/f563731c-8eb1-40b2-b1d7-fc992fee727b)
",2024-10-20T17:57:19+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",shiho1000,"![exercise 2](https://github.com/user-attachments/assets/ad55dde9-29fd-4b95-85e2-f25bf6cf5727)
",2024-10-21T14:19:30+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",Fahmyrose,"![Immagine WhatsApp 2024-10-22 ore 16 08 50_5241670a](https://github.com/user-attachments/assets/5a60cdf1-7d8e-4fb6-b47b-9228724bb0e2)
",2024-10-22T14:10:11+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",VirgiBo,"![Es2](https://github.com/user-attachments/assets/493942ae-a4b0-47fa-889b-61b9c908cbe7)
",2024-10-22T20:10:17+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",martinaucch,"![Immagine](https://github.com/user-attachments/assets/3bc6c9ba-c25e-45c7-a785-f2e15b102dbf)
",2024-10-23T09:41:30+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",martinamrc,"![Execrise 2 drawio](https://github.com/user-attachments/assets/8265a888-a813-4ae2-aaf3-ce7e12472894)
",2024-10-23T14:08:11+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",simplycyrus99,"![Untitled Diagram](https://github.com/user-attachments/assets/a46b0d5c-d0d9-4571-a878-1947a09cbcee)
it ugly but it work lol",2024-10-23T22:48:07+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",theair-hub,"
![Diagramma (1)](https://github.com/user-attachments/assets/87dabd7b-c752-4c90-921c-9a40297acce8)


",2024-10-24T13:03:24+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",KikaYang,"![Exercise-2](https://github.com/user-attachments/assets/3ab3addd-9ba6-4ec4-b00e-0e7edbd833ce)
",2024-10-25T10:28:42+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",lisitein,"<img width=""743"" alt=""image"" src=""https://github.com/user-attachments/assets/dd71f6b4-5ba7-4afb-b5f8-1472bce09ead"">
",2024-11-11T00:03:41+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 2",kettelaugust,"![Диаграмма без названия](https://github.com/user-attachments/assets/175f4184-d768-406a-ab79-98976a25b65b)
",2024-11-28T14:49:22+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",ValkyrieCain9,2,2024-10-18T11:52:41+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",nicoldamelio,"2
",2024-10-18T13:29:39+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",mir-pin,2,2024-10-18T17:13:38+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",rumana-mh,The output would be 2.,2024-10-18T17:58:20+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",maridematteis,"The result of the execution of the algorithm in Figure 4 using the inputs presented in the question is 2. In fact, both strings (""Peroni"" and ""HTML"") are present in the bibliographic entry. 
However, an ambiguity could have been raised since ""HTML"" is present twice in the bibliographic entry. But considering that the algorithm asks **if** the words are present and not **how many times** they are present, the final answer is 2.
",2024-10-18T18:36:37+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",picontestudio00,The result is 2,2024-10-19T16:29:44+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",arinee01,The result value is 2 ,2024-10-19T16:30:41+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",cristinavercelli,"The result is 2
",2024-10-19T17:14:23+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",digitalctrlv,2,2024-10-20T12:42:45+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",justyna09549,2,2024-10-21T05:53:50+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",simplycyrus99,"""Peroni"" and ""HTML"" are both present in the bibliographic text thus 
0+1=1
1+1=2
The answer is 2",2024-10-21T14:17:00+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",Fahmyrose,"The result of the execution of the algorithm is 2: 
![Immagine WhatsApp 2024-10-22 ore 15 52 30_df9a7452](https://github.com/user-attachments/assets/28efa2ab-805f-453c-b6e3-68ac4d708d45)",2024-10-22T13:57:55+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",VirgiBo,2,2024-10-22T19:54:29+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",ceciliavesci,2,2024-10-23T10:01:13+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",martinamrc,The answer is 2,2024-10-23T14:03:41+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",theair-hub,2,2024-10-24T12:51:53+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",ERendall,"The output would be 2. 

Just to get people thinking, HTML appears twice in the bibliographical entry. But the second has a hyphen following it. I presume, then, that the hyphen distinguishes the latter 'HTML' from the former, making it a different and distinct entity? 

I am thinking about the 'Find' function in Microsoft Word; inputting a sequence of characters identifies all sequences in the document, not taking into consideration whether these characters seem different from each other visually. 

To make this clearer, as an example, when one writes 'de' into the Find box, the algorithm identifies all words with the characters 'de' in them.

Would the algorithm be able to distinguish between the two, despite the fact that the same sequence of characters appears twice? If so, or if not, I guess it depends on the definitions of the algorithm used in the 'Find' function? Or am I mistaken?

(Sorry for the long post, but I thought I should say something about this...!) :) 

P.S. I realise @maridematteis has also observed this...",2024-10-24T14:52:11+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",essepuntato,"Hi all, thanks for your answers. Indeed, `""HTML""` appears two times in the bibliographic entry, but that does not affect the algorithm's operation since it checks if the word (i.e. the string) is present or not in the bibliographic entry. Thus, since it is there (indeed two times!), the answer to the second decision widget of the diagram would be ""yes"" anyway.",2024-10-25T08:20:55+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",KikaYang,2,2024-10-25T10:27:49+00:00
comp-think/2024-2025,"Lecture ""Algorithms"", exercise 1",kettelaugust,2,2024-11-28T14:41:03+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",KikaYang,"In the post office, people need to go to the different windows for different affairs. Also, in the hospital, people need to find different doctors because of their various symptoms.",2024-10-16T10:03:49+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",nicoldamelio,"Cooking and building furniture both consist in putting together different elements to obtain a final result; the first action involves ingredients and the second requires screws and work tools but they both allow to create one final ""object"" from what previously were different and separate things. ",2024-10-16T11:09:43+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",digitalctrlv,"Venice & The Unibo building at Zamboni 32-34

**What features do they have in common?**
- Multiple small corridors connected to one another
- Focal point/entrances are only accessed through interconnected small paths
- Several larger open spaces like the '_piazzi_' and smoking areas
- Likelihood to get lost
",2024-10-16T11:58:08+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",Sainte-croix,"The wildlife photographer is laid on the ground, dressed in camo. Aims its target and shoot it. 
The same as the sniper is laid on the ground, dressed in camo. He aims its target and shoot it.",2024-10-16T13:20:46+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",VirgiBo,A wind turbine and a hydropower plant. Both produce electricity in the same way (through a turbine generator).,2024-10-16T15:33:38+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",maridematteis,"A pearl and an onion. Both are made up of layers that wrap around each other over time with the growth of the animal and the plant. Furthermore, both layers have a protective function. In the pearl, the layers of mother-of-pearl protect the mollusk from a foreign body penetrating inside the shell. In the onion, the layers protect the internal bulb from external damage and drying out.",2024-10-16T18:52:22+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",ValkyrieCain9,"Something I learnt earlier this year: dancing and boxing

Both have a foundation of a few basic moves or steps which can then be used to improvise various combinations. In the case of dancing or boxing with a partner both require a sort of understanding to be formed between the two so that you can anticipate the movements of your partner/opponent to understand which move to do next.",2024-10-17T14:45:59+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",ERendall,"A window and a glass door

Both are vertical surfaces. 
Both items can be opened and closed.
Both facilitate access to other areas. Likewise, both items can cut off access. 
Both give out light at the same time of day. ",2024-10-17T15:15:49+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",martinamrc,"Learning a language or how to play a sport and watching a movie or reading a book. In both cases, to make sense of learning and reaching the goal of a new acquired skill or knowledge I'd proceed in a precise order of steps, starting from the basics and on, though no one is actively forbidding me to start from any point and at any level.",2024-10-17T16:04:50+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",sararoggi,"play the guitar and crochet

- to compose the final result, single unities are put together sequentially (stitches // notes or chords)
- both are usually used with hands
- both offer graphic representations as instructions (written pattern // score)
- practice is essential for improvements",2024-10-17T16:58:19+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",theair-hub,"Singing and talking.

-They are human activities, but not all humans are able to do that.
-A phonatory system is needed (lungs, bronchi, trachea, larynx, mouth, tongue, lips, teeth, nasal cavities).
-Both have pitch, volume and timbre. 
-Both are ways of expression. 
-Both use air as a primary vessel.
-In order to hear them, a functional auditory system is needed.
-Both are the result of controlling the sound, a vibration that propagates as an acoustic wave.
",2024-10-17T21:55:08+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",Fahmyrose,"The HUMAN BODY and the WORLD/EARTH:

- both are made from the same elements (sharing 97% of atoms)
- both have diverse ecosystems (numerous pieces)
- both have a circulatory system (blood vessels for the human body and river/streams for the world)
- both have a heart, if it stops working than they stop functioning (heart for the human body and the core of the earth for the world)
- both made of more than 60% of water
- both always operating, functioning, working, rotating until time stops
- the human body and the earth are ""places/spaces"" that host us
- we make connections thanks to both of them",2024-10-18T08:56:48+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",simplycyrus99,"A funeral AND a wedding:

- are better with cake
- a grizzly bear would ruin both
- at least one annoying kid is present 
- no one minds tears and crying
- going drunk is recommended
- suits
- funnier if you hire clowns
  ",2024-10-20T02:57:47+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",shiho1000,"Buying a house and finding a lifelong partner

things in common
-are decisions that greatly impact your lifestyle
-to pursue the perfect one can take a long time
-a search based on a mixture of emotions and conditional theories
-something that is likely to happen only up to a few times or even none in your life",2024-10-20T11:37:51+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 3",lisitein,Sweeping and delieverying packages. Because both of them require the subject following the most efficient route to reach or cover all the given points in a filed.,2024-11-10T16:41:31+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",KikaYang,13,2024-10-16T09:50:14+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",nicoldamelio,"13
",2024-10-16T10:52:51+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",digitalctrlv,"13

or did you mean:

_""The function for calculating the nth Fibonacci number takes as input an integer “7”. If “n” is less than or equal to 0, then 0 is returned as a result. Otherwise, if “n” is equal to 1, then 1 is returned. Otherwise, return the sum of the same function with “7-5” as input and still the same function with “7-6” as input.""_ ?",2024-10-16T11:52:55+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",VirgiBo,13,2024-10-16T15:16:06+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",maridematteis,13,2024-10-16T18:51:43+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",ERendall,"Err. It should be 13... But I second @digitalctrlv -- I am confused by the command to 'return the sum of the same function n-1 as input and **still** the same function with 'n-2' as input....'!

Am I missing something? ",2024-10-17T08:02:48+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",digitalctrlv,"> Err. It should be 13... But I second @digitalctrlv -- I am confused by the command to 'return the sum of the same function n-1 as input and **still** the same function with 'n-2' as input....'!
> 
> Am I missing something?

Ah I was confused, thanks for pointing it out! It should be of course:
F7 = F7-1 + F7-2 =
F7 = F6 + F5
F7 = 8 + 5 = 13

In natural language: _""Otherwise, return the sum of the same function with ""7-1"" as input and still the same function with ""7-2"" as input.""_",2024-10-17T12:49:20+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",ERendall,"Wait a minute:

F7 = F7-1 + F7-2
F7 = 6+5 
F7 = 11. 

Where does the '8' (F8) come from? 

Sorry, I may be being very slow, but I really want to get this... ",2024-10-17T13:14:45+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",digitalctrlv,"> Wait a minute:
> 
> F7 = F7-1 + F7-2 F7 = 6+5 F7 = 11.
> 
> Where does the '8' (F8) come from?
> 
> Sorry, I may be being very slow, but I really want to get this...

No worries! The Fn represents the input number. 8 is the value of F6 as we see in the sequence below:
<img width=""284"" alt=""Screenshot 2024-10-17 at 15 20 32"" src=""https://github.com/user-attachments/assets/e1408281-7769-4145-9fce-bd6b52779e83"">

And if F5 is 5, that means we have 5 + 8 = 13. Does that make sense?",2024-10-17T13:21:34+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",martinaucch,"



> Wait a minute:
> 
> F7 = F7-1 + F7-2 F7 = 6+5 F7 = 11.
> 
> Where does the '8' (F8) come from?
> 
> Sorry, I may be being very slow, but I really want to get this...

I'm writing down as I am trying to understand cause i'm having an hard time as well... @ERendall, Hope it can help. 
_The function for calculating the nth Fibonacci number takes as input
an integer “n”. If “n” is less than or equal to 0, then 0 is returned
as a result. Otherwise, if “n” is equal to 1, then 1 is returned.
Otherwise, return the sum of the same function with “n-1” as input
and still the same function with “n-2” as input._
That means that if my input number is 7 the result has to be the sum of the same function f(6) and f(5). But those are function not numbers so you are not supposed to sum those as 6 and 5 but as the f of 6 and the f of 5. 
so f(6)= f(5)+ f(4) 
    f(5) = f(4) + f(3)
you need to know to what natural number those function compare to. 
so given the fact that  f(1) = 1 and f(0)=0 (as stated in the natural language definition of the fibonacci sequence) 
   then                           
f(2)= f(n-1) + f( n-2)= f (1)+ f (0) = 1+0=  1
and so on so 
f (3)= f(2)+ f(1)= 1+1 = 2
                      f (4)= f (3)+ f (2) = 2+ 1= 3
                     f (5) = f (4) + f(3) = 3+ 2 = 5
                    f (6) = f(5) + f (4) = 5 + 3 =8 
                    f (7) = f(6) + f (5) = 8 + 5 = 13
this i think is the recursive method to calculate the fibonacci number. Now i'm trying to understand the first one, that apparently uses the concept of iteration (?). i'm not sure..",2024-10-17T13:47:40+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",ERendall,"Ah, I see! Thank you @martinaucch and @digitalctrlv! I got mixed up with the wording of the natural language definition...! 

This makes sense, now! I will move on to the first definition, seeing if I have greater luck there! ",2024-10-17T14:16:34+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",ValkyrieCain9,13,2024-10-17T14:38:46+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",martinamrc,"The result I got was 13, although I have to admit that I obtained this result kind of through 'cheating' because following the second natural language definition was a bit confusing in the beginning for its mathematical essence, and mostly because of the sentence ""return the sum of the same function"", which didn't immediately make me recall the actual mathematical function (like some of the comments stated) and while reading it felt 'unclear'. So I followed the first natural language definition and the C code, and I thought that maybe this exercise was also a way to reflect on how the natural language is more ambiguous for its expressiveness compared to a programming language (though I definitely lacked understanding of the second definition). ",2024-10-17T15:53:02+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",OLIVER792001,13,2024-10-17T18:02:07+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",theair-hub,"The function (F) for calculating the nth Fibonacci number takes as input an integer “7”. If “n” is less than or equal to 0, then 0 is returned as a result. Otherwise, if “n” is equal to 1, then 1 is returned. 
F0=0
F1=1
Otherwise, return the sum of the same function with “n-1” as input and still the same function (F) with “n-2” as input.
F2= F1 (that is n-1= 2-1)+F0 (2-2)= 1
F3= F2+ F1= 1+1= 2
F4= F3+F2= 2+1= 3
F5= F4+F3= 3+2= 5
F6= F5+F4= 5+3= 8
F7= F6+F5= 8+5= 13

Also, I asked a friend of mine who studies Math if that was correct and he said that there is also this other way (I think far more complicated than the other one) but I put it here just for fun :)
F7=F6+F5=F5+2(F4)+F3=F4+3(F3)+3(F2)+F1=F3+4(F2)+7(F1)+3(F0)=F2+12(F1)+7(F0)=13(F1)+8(F0)=13+0= 13 ",2024-10-17T22:42:50+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",rumana-mh,"Fn= F(n-1)+F(n-2)
F7=F(6)+F(5)
F7=8+5
=13",2024-10-18T07:34:03+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",Fahmyrose,"Things to remember:

F(0)= 0
F(1)= 1
F(n)= F(n-1)+F(n-2) --> until i get return of 0 or 1 then sum up

so: F(7) = F(7-1)+F(7-2) = F(6)+F(5) --> I have to find the result of F(6) and F(5) to be able to find out F(7) 

that is why:
![Immagine WhatsApp 2024-10-18 ore 10 34 25_6330df14](https://github.com/user-attachments/assets/6e97238a-ec7b-44b3-899a-eed46239928f)

The final answer is 13!

I was able to understand how to do the exercise thanks to the help of my colleagues but at first it was really hard for me to understand the command and since I have never used this function calculation I didn't know where to begin to do the sum ups. I didn't even know if I could google the Fibonacci sequence - (0 1 1 2 3 5 8 13 21) that is easier to undestand - because I was trying to see if I could do it without external help since that's how the written exam situation will be etc.
I guess that maybe the purpose of the exercise was to understand how programming languages are easier than natural languages since the human computer has to do the calculations by hand and so it is more ambiguous.",2024-10-18T08:44:11+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",simplycyrus99,"The Fibonacci sequence builds on each preceding pair, so without knowing the prior two values, you can't compute the next one. SO if you are confused by the whole matter, you have every right to be lmao
For example, if you needed to calculate F56, you'd have to know the result of F(55) and F(54). IF you don’t know F(55) and F(54) , then you wouldn't be able to directly calculate F(56) without first figuring out those previous values. However, you can calculate them by starting from the base values, like F(0) and F(1), and working your way up, but it would be a lot of calculations for large numbers like F(56)! 

oh and 13     XDD",2024-10-20T01:35:10+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 2",kettelaugust,13,2024-11-26T20:47:03+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",KikaYang,"""I write"" ""You write"" ""I read"" ""You read""",2024-10-16T09:41:19+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",nicoldamelio,"""I write"", ""I read"", ""you write"", ""you read"" ",2024-10-16T10:35:25+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",digitalctrlv,"“I write”
“I read”
“you write”
“you read”",2024-10-16T11:52:17+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",VirgiBo,"""I write""
""I read""
""You write""
""You read""",2024-10-16T15:14:52+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",maridematteis,"""I write""
""you write""
""I read""
""you read""",2024-10-16T18:51:18+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",Fahmyrose,"""I"" ""write"" --> ""I write""
""you"" ""write"" --> ""you write""

""I"" ""read"" --> ""I read""
""you"" ""read"" --> ""you read""",2024-10-16T21:00:04+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",ERendall,"""I write""
""I read""
""You write""
""You read""",2024-10-17T07:54:36+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",martinaucch,"< sentence > =>
""I"" < verb > =>
""I"" ""write""
""I"" ""read""

< sentence > =>
""you"" < verb > =>
""you"" ""write""
""you"" ""read""

",2024-10-17T12:41:47+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",ValkyrieCain9,"< sentence > ::= ""I"" ""write""
< sentence > ::= ""you"" ""write""
< sentence > ::= ""I"" ""read""
< sentence > ::= ""you"" ""read""",2024-10-17T14:35:05+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",martinamrc,"""I"" ""write"", ""I"" ""read"", ""you"" ""write"", ""you"" ""read""
",2024-10-17T15:26:49+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",mir-pin,"< sentence > ::= ""I"" ""write""
< sentence > ::= ""you"" ""write""
< sentence > ::= ""I"" ""read""
< sentence > ::= ""you"" ""read""",2024-10-17T16:23:09+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",OLIVER792001,"""I write""
""I read""
""You write""
""You read""",2024-10-17T17:56:24+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",rumana-mh,"""I write"", ""I read"", ""you write"", ""you read"".",2024-10-17T19:52:42+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",theair-hub,"""I write"", ""I read"", "" you write"" and ""you read"".",2024-10-17T20:37:24+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",essepuntato,"HI all, thanks for commenting. Just a note: the symbol `::=` is used only in the production rules, and should not be adopted outside their definitions.",2024-10-18T09:51:05+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",simplycyrus99,"I write
you write
I read
you read",2024-10-20T00:54:38+00:00
comp-think/2024-2025,"Lecture ""Introduction to Computational Thinking"", exercise 1",kettelaugust,"I write
I read
You write
You read",2024-11-26T20:41:11+00:00
