repo_name,issue_title,comment_user,comment_text,comment_datetime
comp-think/2022-2023,"Lecture ""Organising information: graphs"", exercise 2",alka2696,"```ruby
from networkx import DiGrapgh

my_graph = DiGrapgh()

my_graph.add_node(""Brad Pitt"")
my_graph.add_node(""Eva Green"")
my_graph.add_node(""George Clooney"")
my_graph.add_node(""Catherine Zeta-Jones"")
my_graph.add_node(""Johnny Depp"")
my_graph.add_node(""Helena Bonham Carter"")
my_graph.add_node(""Ocean's Twelve"")
my_graph.add_node(""Fight Club"")
my_graph.add_node(""Dark Shadows"")

my_graph.add_edge(""Brad Pitt"", ""Ocean's Twelve"")
my_graph.add_edge(""George Clooney"", ""Ocean's Twelve"")
my_graph.add_edge(""Catherine Zeta-Jones"", ""Ocean's Twelve"")

my_graph.add_edge(""Brad Pitt"", ""Fight Club"")
my_graph.add_edge(""Helena Bonham Carter"", ""Fight Club"")

my_graph.add_edge(""Helena Bonham Carter"", ""Dark Shadows"")
my_graph.add_edge(""Johnny Depp"", ""Dark Shadows"")
my_graph.add_edge(""Eva Green"", ""Dark Shadows"")

```",2022-12-19T13:21:51+00:00
comp-think/2022-2023,"Lecture ""Organising information: graphs"", exercise 2",EricaAndreose,"```ruby
from networkx import DiGraph

movie_graph = DiGraph()

movie_graph.add_node(""Brad Pitt"")
movie_graph.add_node(""Eva Green"")
movie_graph.add_node(""George Clooney"")
movie_graph.add_node(""Catherine Zeta-Jones"")
movie_graph.add_node(""Johnny Depp"")
movie_graph.add_node(""Helena Bonham Carter"")
movie_graph.add_node(""Ocean's Twelve"")
movie_graph.add_node(""Fight Club"")
movie_graph.add_node(""Dark Shadows"")

movie_graph.add_edge(""George Clooney"", ""Ocean's Twelve"")
movie_graph.add_edge(""Brad Pitt"", ""Ocean's Twelve"")
movie_graph.add_edge(""Catherine Zeta-Jones"", ""Ocean's Twelve"")
movie_graph.add_edge(""Brad Pitt"", ""Fight Club"")
movie_graph.add_edge(""Helena Bonham Carter"", ""Fight Club"")
movie_graph.add_edge(""Johnny Depp"", ""Dark Shadows"")
movie_graph.add_edge(""Helena Bonham Carter"", ""Dark Shadows"")
movie_graph.add_edge(""Eva Green"", ""Dark Shadows"")
```

I've also tried to visualize it using matplotlib and this is the result:
![Figure_1](https://user-images.githubusercontent.com/83347847/208760784-e4023081-89c3-44da-b6c8-4deb0fa6a3d0.png)

",2022-12-20T20:31:41+00:00
comp-think/2022-2023,"Lecture ""Organising information: graphs"", exercise 1",alka2696,"```ruby
from networkx import Graph

my_graph = Graph()

my_graph.add_node(""Tim Berners-Lee"")
my_graph.add_node(""Tom Heath"")
my_graph.add_node(""Christian Bizer"")
my_graph.add_node(""Sören Auer"")
my_graph.add_node(""Lalana Kagal"")
my_graph.add_node(""James A. Hendler"")

my_graph.add_edge(""Tim Berners-Lee"", ""Tom Heath"", weight=18)
my_graph.add_edge(""Tim Berners-Lee"", ""Christian Bizer"", weight=18)
my_graph.add_edge(""Tim Berners-Lee"", ""Sören Auer"", weight=10)
my_graph.add_edge(""Tim Berners-Lee"", ""Lalana Kagal"", weight=9)
my_graph.add_edge(""Tim Berners-Lee"", ""James A. Hendler"", weight=8)
```",2022-12-19T13:02:57+00:00
comp-think/2022-2023,"Lecture ""Organising information: graphs"", exercise 1",EricaAndreose,"```ruby
from networkx import Graph

Tim_Berners_Lee_Graph = Graph()

Tim_Berners_Lee_Graph.add_node(""Tim Berners Lee"")
Tim_Berners_Lee_Graph.add_node(""Tom Heath"")
Tim_Berners_Lee_Graph.add_node(""Christian Bizer"")
Tim_Berners_Lee_Graph.add_node(""Sören Auer"")
Tim_Berners_Lee_Graph.add_node(""Lalana Kagal"")
Tim_Berners_Lee_Graph.add_node(""James A. Hendler"")

Tim_Berners_Lee_Graph.add_edge(""Tim Berners Lee"", ""Tom Heat"", weight= 18)
Tim_Berners_Lee_Graph.add_edge(""Tim Berners Lee"", ""Christian Bizer"", weight= 18)
Tim_Berners_Lee_Graph.add_edge(""Tim Berners Lee"", ""Sören Auer"", weight= 10)
Tim_Berners_Lee_Graph.add_edge(""Tim Berners Lee"", ""Lalana Kagal"", weight= 9)
Tim_Berners_Lee_Graph.add_edge(""Tim Berners Lee"", ""James A. Hendler"", weight= 8)
```",2022-12-20T19:22:20+00:00
comp-think/2022-2023,"Lecture ""Organising information: trees"", exercise 2",ranacoskun,"```python
def test_breadth_first_visit(root_node, expected):
    if expected == breadth_first_visit(root_node):
        return True
    else:
        return False
        
def breadth_first_visit(root_node):
    output_list = []
    queue = []
    queue.append(root_node)
    
    while queue != []:
        output_list.append(queue[0])
        queue.extend(queue[0].children)
        queue.pop(0)
    return output_list

elizabeth = Node(""elizabeth"")
charles = Node(""charles"", elizabeth)
anne = Node(""anne"", elizabeth)
william = Node(""william"", charles)
harry = Node(""harry"", charles)
george = Node(""george"", william)
charlotte = Node(""charlotte"", william)
louis = Node(""louis"", william)
archie = Node(""archie"", harry)

royals = [elizabeth,charles,anne,william,harry,george,charlotte,louis,archie]
print(test_breadth_first_visit(elizabeth, royals))
```",2022-12-14T00:24:06+00:00
comp-think/2022-2023,"Lecture ""Organising information: trees"", exercise 2",n1kg0r,"```

from anytree import Node
from collections import deque


def test_breadth_first_visit(root_node, expected):
    return expected == breadth_first_visit(root_node)


def breadth_first_visit(root_node):
    result = list()
    
    if root_node is None:
        return 
    q = deque()
    q.append(root_node)

    while(len(q)):
        node = q.popleft()
        result.append(node)

        for child_node in node.children:
            q.append(child_node)

    return result


# Tests
book = Node(""book"")
chapter_1 = Node(""chapter1"", book)
chapter_2 = Node(""chapter2"", book)
paragraph_1 = Node(""paragraph1"", chapter_1)
text_1 = Node(""text1"", paragraph_1)
quotation_1 = Node(""quotation1"", paragraph_1)
text_2 = Node(""text2"", quotation_1)
text_3 = Node(""text3"", paragraph_1)
quotation_2 = Node(""quotation2"", paragraph_1)
text_4 = Node(""text4"", quotation_2)
paragraph_2 = Node(""paragraph2"", chapter_1)
text_5 = Node(""text5"", paragraph_2)
paragraph_3 = Node(""paragraph3"", chapter_1)
text_6 = Node(""text6"", paragraph_3)
text_7 = Node(""text7"", chapter_2)
text_8 = Node(""text8"", book)
bfv = [book,
       chapter_1, chapter_2, text_8,
       paragraph_1, paragraph_2, paragraph_3, text_7,
       text_1, quotation_1, text_3, quotation_2, text_5, text_6,
       text_2, text_4]

bfv_from_chapter_1 = [chapter_1, paragraph_1, paragraph_2, paragraph_3, text_1, quotation_1, text_3, quotation_2, text_5, text_6, text_2, text_4]


print(test_breadth_first_visit(book, bfv))
print(test_breadth_first_visit(chapter_1, bfv_from_chapter_1))

```",2022-12-16T16:36:09+00:00
comp-think/2022-2023,"Lecture ""Organising information: trees"", exercise 1",delete4ever,"```python
from anytree import Node
book = Node(""book"")
chapter_1 = Node(""chapter"", book)
chapter_2 = Node(""chapter"", book)
paragraph_1 = Node(""paragraph"", chapter_1)
text_1 = Node(""text_1"", paragraph_1)
quotation_1 = Node(""quotation"", paragraph_1)
text_2 = Node(""text_2"", quotation_1)
text_3 = Node(""text_3"", paragraph_1)
quotation_2 = Node(""quotation"", paragraph_1)
text_4 = Node(""text_4"", quotation_2)
paragraph_2 = Node(""paragraph"", chapter_1)
text_5 = Node(""text_5"", paragraph_2)
paragraph_3 = Node(""paragraph"", chapter_1)
text_6 = Node(""text_6"", paragraph_3)
text_7 = Node(""text_7"", chapter_2)
text_8 = Node(""text_8"", book)

def test_dfv(root_node, expected):
    if breadth_first_visit(root_node) == expected:
        return True
    else:
        return False

def breadth_first_visit(root_node):
    result = list()
    h = root_node.height
    for i in range(1, h+2):
        indegree(root_node, i, result)
    return result
def indegree(root_node, level, result):
    if level == 1:
        result.append(root_node)
    else:
        for child in root_node.children:
            indegree(child, level - 1, result)     

print(test_dfv(book, [book, chapter_1, chapter_2, text_8, paragraph_1,
paragraph_2, paragraph_3, text_7, text_1, quotation_1, text_3,
quotation_2, text_5, text_6, text_2, text_4])) #True
```",2022-12-13T20:08:59+00:00
comp-think/2022-2023,"Lecture ""Organising information: trees"", exercise 1",n1kg0r,"```
from anytree import Node


# Test case for the function
def test_breadth_first_visit(root_node, expected):
    result = breadth_first_visit(root_node)
    if expected == result:
        return True
    else:
        return False


def breadth_first_visit(root):
    h = root.height
    result = list()
    for i in range(0, h+1):
        append_nodes_of_ith_level(root, i, result)
    print(result)
    return result


def append_nodes_of_ith_level(root, level, l):
    if root is None:
        return
    if level == 0:
        l.append(root)
    elif level > 0:
        for child_node in root.children:
            append_nodes_of_ith_level(child_node, level-1, l)
 

# Tests
book = Node(""book"")
chapter_1 = Node(""chapter1"", book)
chapter_2 = Node(""chapter2"", book)
paragraph_1 = Node(""paragraph1"", chapter_1)
text_1 = Node(""text1"", paragraph_1)
quotation_1 = Node(""quotation1"", paragraph_1)
text_2 = Node(""text2"", quotation_1)
text_3 = Node(""text3"", paragraph_1)
quotation_2 = Node(""quotation2"", paragraph_1)
text_4 = Node(""text4"", quotation_2)
paragraph_2 = Node(""paragraph2"", chapter_1)
text_5 = Node(""text5"", paragraph_2)
paragraph_3 = Node(""paragraph3"", chapter_1)
text_6 = Node(""text6"", paragraph_3)
text_7 = Node(""text7"", chapter_2)
text_8 = Node(""text8"", book)
bfv = [book,
       chapter_1, chapter_2, text_8,
       paragraph_1, paragraph_2, paragraph_3, text_7,
       text_1, quotation_1, text_3, quotation_2, text_5, text_6,
       text_2, text_4]
bfv_from_chapter_2 = [chapter_1, paragraph_1, paragraph_2, paragraph_3, text_1, quotation_1, text_3, quotation_2, text_5, text_6, text_2, text_4]


print(test_breadth_first_visit(book, bfv))
print(test_breadth_first_visit(chapter_1, bfv_from_chapter_2))

```",2022-12-16T16:24:04+00:00
comp-think/2022-2023,"Lecture ""Organising information: trees"", exercise 1",n1kg0r,"@essepuntato Professor, the function in the solutions seems to fail on non-root inputs

*in case it was supposed to work with such inputs

```
bfv_from_chapter_2 = [chapter_1, paragraph_1, paragraph_2, paragraph_3, text_1, quotation_1, text_3, quotation_2, text_5, text_6, text_2, text_4]
print(test_breadth_first_visit(chapter_1, bfv_from_chapter_2))

#   File ""/Users/nikolay/UNIBO/comp-think/homework/hw1612 copy.py"", line 23, in breadth_first_visit
#     queue.extend(root_node.children)
# AttributeError: 'str' object has no attribute 'extend'
```",2022-12-16T16:34:33+00:00
comp-think/2022-2023,"Lecture ""Organising information: trees"", exercise 1",essepuntato,"Hi @n1kg0r,

Indeed, it is not supposed to work on non-root if they are used in the first call. This is because of the following line of code:

```
if len(root_node.ancestors) == 0:  # It is the first call
        root_node.parent = Node(deque())
```

If you start from a non-root node, this won't be executed, returning an error in the following pieces of code. Anyway, some of the solutions you have proposed here try to address this limitation, indeed!",2022-12-19T06:58:47+00:00
comp-think/2022-2023,"Lecture ""Dynamic programming algorithms"", exercise 2",delete4ever,"```python
def test_exponentiation(int_1, int_2, solution_dict, expected):
    if exponentiation(int_1, int_2, solution_dict) == expected:
        return True
    else:
        return False

def exponentiation(base_number, exponent, solution_dict):
    if base_number not in solution_dict:
        if exponent == 0: 
            solution_dict[base_number] = 1
        elif exponent == 1:
            solution_dict[base_number] = base_number
        else:
            solution_dict[base_number] = base_number*(exponentiation(base_number, exponent-1, solution_dict))
    return solution_dict.get(base_number)

print(test_exponentiation(100, 10, dict(), 100**10)) #True
print(test_exponentiation(2, 100, dict(), 2**100)) #True
print(test_exponentiation(123456, 0, dict(), 1)) #True
```",2022-11-30T19:57:29+00:00
comp-think/2022-2023,"Lecture ""Dynamic programming algorithms"", exercise 2",n1kg0r,"```
from math import factorial as fc

def test_factorial_recursive_dp(n):
    return factorial_recursive_dp(n, dict()) == fc(n)

def factorial_recursive_dp(n, solution_dict):
    if n not in solution_dict:
        if n == 1:
            return 1
        else:
            return n * factorial_recursive_dp(n-1, solution_dict)
    return solution_dict

print(test_factorial_recursive_dp(5))
print(test_factorial_recursive_dp(1))
print(test_factorial_recursive_dp(28))
```",2022-12-01T00:07:17+00:00
comp-think/2022-2023,"Lecture ""Dynamic programming algorithms"", exercise 2",EricaAndreose,"Update! Now I know I can use tuples so:

```ruby
def test_exponentation(base_number, exponent, solution_dict, expected):
    result = exponentation(base_number, exponent, solution_dict)
    if expected == result:
        return True
    else:
        return False


def exponentation(base_number, exponent, solution_dict: dict):
    couple=(base_number, exponent)
    if couple not in solution_dict:
        if exponent == 0:
            solution_dict[couple] = 1
        elif exponent == 1:
            solution_dict[couple] = base_number
        else:
            solution_dict[couple] = base_number * exponentation(base_number, exponent - 1, solution_dict)
    return solution_dict.get(couple)

# Test runs returning True
print(test_exponentation(3, 4, dict(), 81))
print(test_exponentation(17, 1, dict(), 17))
print(test_exponentation(2, 0, dict(), 1))
print(test_exponentation(2, 4, dict(), 16))
print(test_exponentation(3, 2, dict(), 9))
print(test_exponentation(3, 4, dict(), 81))
print(test_exponentation(17, 1, dict(), 17))
print(test_exponentation(2, 0, dict(), 1))
print(test_exponentation(2, 6, dict(), 64))
print(test_exponentation(0, 15, dict(), 0))
print(test_exponentation(0, 0, dict(), 1))
```

Previous attempt.

```ruby
def test_exponentation(base_number, exponent, solution_dict, expected):
    result = exponentation(base_number, exponent, solution_dict)
    if expected == result:
        return True
    else:
        return False

def exponentation(base_number, exponent, solution_dict: dict):
    if base_number not in solution_dict:
        if exponent == 0:     # base case 1
            solution_dict[base_number] = 1
        elif exponent == 1:     # base case 2
            solution_dict[base_number] = base_number
        else:    # recursive step
            solution_dict[base_number] = base_number * exponentation(base_number, exponent - 1, solution_dict)
    return solution_dict.get(base_number)

# Test runs returning True
print(test_exponentation(3, 4, dict(), 81))
print(test_exponentation(17, 1, dict(), 17))
print(test_exponentation(2, 0, dict(), 1))
print(test_exponentation(2, 4, dict(), 16))
```",2022-12-04T15:05:04+00:00
comp-think/2022-2023,"Lecture ""Dynamic programming algorithms"", exercise 2",lucia1299,"```Ruby

def test_my_exponentiation (base_number, exponent, solution_dict, expected):
    result = exponentiation(base_number, exponent, solution_dict)
    if result == expected:
        return True
    else: 
        return False

def exponentiation(base_number, exponent, solution_dict):
    solution_dict = dict()
    if base_number not in solution_dict:
        if exponent == 0:
            solution_dict[base_number] = 1
        elif exponent == 1:
            solution_dict[base_number] = base_number
        else:
            solution_dict[base_number] = base_number * (exponentiation(base_number, exponent-1, solution_dict))
    return solution_dict.get(base_number)



print(test_my_exponentiation (3, 4, {}, 81)) #True
print(test_my_exponentiation(17, 1, {}, 17)) #True
print(test_my_exponentiation(2, 0, {}, 1)) #True 

```",2022-12-08T10:07:43+00:00
comp-think/2022-2023,"Lecture ""Dynamic programming algorithms"", exercise 2",giorgiacrosilla,"```ruby
def test_exp(base_number, exponent, solution_dict, expected):
    result = exp(base_number, exponent, solution_dict)
    if expected == result:
        return True
    else: 
        return False 

def exp(base_number, exponent, solution_dict):
    if base_number not in solution_dict:
        if exponent == 0:
            solution_dict[base_number] = 1
        elif exponent == 1:
            solution_dict[base_number] = base_number
        else:
            solution_dict[base_number] = base_number * exp(base_number, exponent-1, solution_dict)
    return solution_dict.get(base_number)

print(test_exp(3,4,dict(), 81))
print(test_exp(17,1, dict(), 17))
print(test_exp(2,0,dict(), 1))

```",2022-12-09T10:32:46+00:00
comp-think/2022-2023,"Lecture ""Dynamic programming algorithms"", exercise 2",alka2696,"```ruby
def test_exponentation(base_number, exponent, solution_dict, expected):
    result = exponentation(base_number, exponent, solution_dict)
    if expected == result:
        return True
    else:
        return False


def exponentation(base_number, exponent, solution_dict):
    together=(base_number, exponent)
    if together not in solution_dict:
        if exponent == 0:
            solution_dict[together] = 1
        elif exponent == 1:
            solution_dict[together] = base_number
        else:
            solution_dict[together] = base_number * exponentation(base_number, exponent - 1, solution_dict)
    return solution_dict.get(together)

soultion_dict= dict()
# Test runs returning True
print(test_exponentation(3, 4, dict(), 81)) #True
print(test_exponentation(5, 6, dict(), 15625)) #True

```",2023-03-14T18:40:30+00:00
comp-think/2022-2023,"Lecture ""Dynamic programming algorithms"", exercise 1",delete4ever,"```python
def test_multiplication(int_1, int_2, solution_dict, expected):
    if multiplication(int_1, int_2, solution_dict) == expected:
        return True
    else:
        return False

def multiplication(int_1, int_2, solution_dict):
    if int_1 not in solution_dict:
        if int_2 == 0:
            solution_dict[int_1] = 0
        elif int_2 == 1:
            solution_dict[int_1] = int_1
        else:
            solution_dict[int_1] = int_1 + multiplication(int_1, int_2-1, solution_dict)
    return solution_dict.get(int_1)

print(test_multiplication(123456, 78, dict(), 123456*78)) #True
print(test_multiplication(123456, 0, dict(), 0)) #True
print(test_multiplication(123456, 789, dict(), 123456*789)) #True
```",2022-11-30T19:49:00+00:00
comp-think/2022-2023,"Lecture ""Dynamic programming algorithms"", exercise 1",n1kg0r,"```
def test_multiplication(int1, int2, expected):
    return multiplication(int1, int2, dict()) == expected

def multiplication(int_1, int_2, solution_dict):
    if (int_1, int_2) not in solution_dict:
        if int_2 == 0: 
            solution_dict[(int_1, int_2)] = 0
        else: 
            solution_dict[(int_1,int_2)] = multiplication(int_1, int_2-1, solution_dict) + int_1 
    return solution_dict[(int_1, int_2)]

print(test_multiplication(0, 0, 0)) 
print(test_multiplication(1, 0, 0)) 
print(test_multiplication(5, 7, 35))
```",2022-11-30T23:53:45+00:00
comp-think/2022-2023,"Lecture ""Dynamic programming algorithms"", exercise 1",EricaAndreose,"Update! Now I see what I got wrong.

```ruby
def test_multiplication(int_1, int_2, solution_dict, expected):
    result = multiplication(int_1, int_2, solution_dict)
    if result == expected:
        return True
    else:
        return False

def multiplication(int_1, int_2, solution_dict: dict):
    if int_1 > int_2:
        sol = (int_2, int_1)
    else: 
        sol = (int_1, int_2)

    if sol not in solution_dict:
        if int_1 == 0 or int_2 == 0:
            solution_dict[sol] = 0
        else:
            solution_dict[sol] = int_1 + multiplication(int_1, int_2 - 1, solution_dict)
    return solution_dict.get(sol)

# Test runs returning True
print(test_multiplication(1, 0, dict(), 0))
print(test_multiplication(1, 2, dict(), 2))
print(test_multiplication(2, 5, dict(), 10))
print(test_multiplication(0, 5, dict(), 0))
print(test_multiplication(5, 1, dict(), 5))
print(test_multiplication(0, 0, dict(), 0))
print(test_multiplication(1, 0, dict(), 0))
print(test_multiplication(5, 7, dict(), 35))
print(test_multiplication(7, 7, dict(), 49))
```




Not sure it's the right solution. The two integers as input confused me a bit in interactions with the dictionary.

```ruby
def test_multiplication(int_1, int_2, solution_dict, expected):
    result = multiplication(int_1, int_2, solution_dict)
    if result == expected:
        return True
    else:
        return False


def multiplication(int_1, int_2, solution_dict: dict):
    sol = int_1 * int_2
    if sol not in solution_dict:
        if int_2 == 0:      # base case 1
            solution_dict[sol] = 0
        elif int_2 == 1:         # base case 2
            solution_dict[sol] = int_1
        else:      # recursive step
            solution_dict[sol] = int_1 + multiplication(int_1, int_2 - 1, solution_dict)
    return solution_dict.get(sol)

# Test runs returning True
print(test_multiplication(1, 0, dict(), 0))
print(test_multiplication(1, 2, dict(), 2))
print(test_multiplication(2, 5, dict(), 10))
print(test_multiplication(0, 5, dict(), 0))
print(test_multiplication(5, 1, dict(), 5))

```",2022-12-04T14:47:35+00:00
comp-think/2022-2023,"Lecture ""Dynamic programming algorithms"", exercise 1",giorgiacrosilla,"```ruby
# Test case for the algorithm
def test_multiplication(int_1, int_2, solution_dict, expected):
    result = multiplication(int_1, int_2, solution_dict)
    if expected == result:
        return True
    else:
        return False

# Code of the algorithm
def multiplication(int_1, int_2, solution_dict):
    if (int_1, int_2) not in solution_dict:
        if int_2  == 0:
            solution_dict[int_1 * int_2] = 0
        elif int_2 == 1:
            solution_dict[int_1 * int_2] = int_1
        else:
            solution_dict[int_1 * int_2] = int_1 + multiplication(int_1, int_2 - 1, solution_dict)
    return solution_dict.get(int_1 * int_2)

print(test_multiplication(0, 0, {}, 0))
print(test_multiplication(1, 0, {}, 0))
print(test_multiplication(2, 4, {}, 8))
print(test_multiplication(3, 3, {}, 9))
```",2022-12-04T15:23:51+00:00
comp-think/2022-2023,"Lecture ""Dynamic programming algorithms"", exercise 1",lucia1299,"```Ruby

def test_multiplication_dict(int_1, int_2, solution_dict, expected):
    result = multiplication_dict(int_1, int_2, solution_dict)
    if expected == result:
        return True
    else:
        return False

def multiplication_dict(int_1, int_2, solution_dict):
    solution_dict = dict()
    solution = int_1*int_2
    if solution in solution_dict:
        return solution_dict
    else:
        if int_2 == 0:
            solution = 0
            solution_dict[""int1*2""] = solution
        else:
            solution = int_1 + multiplication_dict(int_1, int_2 - 1, solution_dict)
            solution_dict[""int1*2""] = solution
        return solution


        
print(test_multiplication_dict(67, 0, {""int1*2"", ""0""}, 0)) #True 
print(test_multiplication_dict(9, 6, {""int1*2"", ""54""}, 54)) #True
print(test_multiplication_dict(5, 7, {""int1*2"", ""35""}, 35)) #True

```",2022-12-08T09:34:20+00:00
comp-think/2022-2023,"Lecture ""Dynamic programming algorithms"", exercise 1",alka2696,"```
def test_multiplication(int_1, int_2, solution_dict, expected):
    result = multiplication(int_1, int_2, solution_dict)
    if result == expected:
        return True
    else:
        return False


def multiplication(int_1, int_2, solution_dict):
    if int_1 == 0 or int_2 == 0:
        return 0
    elif int_1 == 1:
        return int_2
    elif int_2 == 1:
        return int_1
    elif (int_1, int_2) in solution_dict:
        return solution_dict[(int_1, int_2)]
    elif (int_2, int_1) in solution_dict:
        return solution_dict[(int_2, int_1)]
    else:
        result = int_1 + multiplication(int_1, int_2-1, solution_dict)
        solution_dict[(int_1, int_2)] = result
        solution_dict[(int_2, int_1)] = result
        return result

solution_dict = {}

print(test_multiplication(0, 5, solution_dict, 0)) #True
print(test_multiplication(3, 2, solution_dict, 6)) #True

```",2023-03-14T18:09:50+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 3",delete4ever,"Currently it only works when the element used as pivot is unique in the list...
```python
# Test case for the algorithm
def test_quicksort(input_list, start, end, expected):
    quicksort(input_list, start, end)
    result = input_list
    if result == expected:
        return True
    else:
        return False
# Code for partition algorithm in 2nd exercise
def partition(input_list, start, end, pivot_position):
    left_list= list()
    right_list= list()
    wanted_list= input_list[start:(end+1)]
    if pivot_position >= start:
            for i in wanted_list:
                if i < input_list[pivot_position]:
                    left_list.append(i)
                if i > input_list[pivot_position]:
                    right_list.append(i)
            input_list[:] = list(input_list[0:start] + left_list + [input_list[pivot_position]] + right_list + input_list[end+1:len(input_list)])
            return len(input_list[0:start]) + len(left_list)    
# Code for quicksort algorithm
def quicksort(input_list, start, end):
    if start <= end:
        new_pivot= partition(input_list, start, end, start)
        quicksort(input_list, start, new_pivot-1)
        quicksort(input_list, new_pivot+1, end)
# Three test runs
print(test_quicksort([5, 4, 3, 2, 1], 0, 4, [1, 2, 3, 4, 5])) #True
print(test_quicksort([5, 4, 3, 2, 1], 1, 3, [5, 2, 3, 4, 1])) #True
print(test_quicksort([1], 0, 0, [1])) #True
```",2022-11-25T17:16:03+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 3",leonardozilli,"```python
def test_quicksort(input_list, start, end, expected_result):
    result = quicksort(input_list, start, end)
    return result == expected_result

def quicksort_partition(input_list, start, end, pivot_position):
    pivot_item = input_list[pivot_position]
    i = start - 1

    if pivot_position >= start and pivot_position <= end:
        for item in input_list[start:end + 1]:
            if item < input_list[pivot_position]:
                i += 1
                if pivot_position == i:
                    pivot_position = input_list.index(item)
                input_list[input_list.index(item)], input_list[i] = input_list[i], input_list[input_list.index(item)]
        input_list.insert(i + 1, input_list[pivot_position])
        input_list.pop(pivot_position + 1)

        pivot_new_position = input_list.index(pivot_item)
        return pivot_new_position
    else:
        return None
        
def quicksort(input_list, start, end):
    if end > start:
        pivot_position = quicksort_partition(input_list, start, end, start)
        quicksort(input_list, start, pivot_position - 1)
        quicksort(input_list, pivot_position + 1, end)
    return input_list

print(test_quicksort([""The Graveyard Book"", ""Coraline"", ""Neverwhere"", ""Good Omens"", ""American Gods""], 1, 4, [""The Graveyard Book"", ""American Gods"", ""Coraline"", ""Good Omens"", ""Neverwhere""]))
print(test_quicksort([7, 2, 1, 8, 6, 3, 5, 4], 0, 7, [1, 2, 3, 4, 5, 6, 7, 8]))
print(test_quicksort([7, 2, 1, 8, 6, 3, 5, 4], 1, 6, [7, 1, 2, 3, 5, 6, 8, 4]))
print(test_quicksort([3, 2, 4, 1, 5], 0, 4, [1, 2, 3, 4, 5]))
print(test_quicksort([5, 4, 3, 2, 1], 1, 3, [5, 2, 3, 4, 1]))
print(test_quicksort([0], 0, 0, [0]))
```",2022-11-26T13:34:38+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 3",ranacoskun,"```python
def test_quicksort(input_list, start, end, expected):
    if expected == quicksort(input_list, start, end):
        return True
    else:
        return False


def partition(input_list, start, end, pivot_position):
    i = start - 1

    for position in range(start, end + 1):
        if input_list[position] < input_list[pivot_position]:
            i = i + 1
            if i == pivot_position:
                pivot_position = position
            temp = input_list[position]
            input_list[position] = input_list[i]
            input_list[i] = temp

    temp = input_list[pivot_position]
    input_list[pivot_position] = input_list[i + 1]
    input_list[i + 1] = temp

    return i + 1


def quicksort(input_list, start, end):
    if start < end:
        pivot_position = partition(input_list, start, end, start)
        quicksort(input_list, start, pivot_position - 1)
        quicksort(input_list, pivot_position + 1, end)
    return input_list


print(test_quicksort([""The Graveyard Book"", ""Coraline"", ""Neverwhere"", ""Good Omens"", ""American Gods""], 1, 4, ['The Graveyard Book', 'American Gods', 'Coraline', 'Good Omens', 'Neverwhere']))  # True
print(test_quicksort([""d"", ""e"", ""a"", ""c""], 0, 3, ['a', 'c', 'd', 'e']))  # True
print(test_quicksort([7, 6, 3, 9, 12, 1], 0, 5, [1, 3, 6, 7, 9, 12]))  # True
print(test_quicksort([7, 6, 3, 9, 12, 1], 2, 4, [7, 6, 3, 9, 12, 1]))  # True
```",2022-11-27T18:44:11+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 3",n1kg0r,"```
def test_quicksort(input_list, start, end, expected):
    result = quicksort(input_list, start, end)
    if expected == result:
        return True
    else:
        return False


def partition(input_list, start, end, pivot_position):
    i = start - 1
    t = input_list[pivot_position]
    input_list[pivot_position] = input_list[end]
    input_list[end] = t 
    for j in range(start, end):
        if input_list[j] < input_list[end]:
            i += 1
            t = input_list[i]
            input_list[i] = input_list[j]
            input_list[j] = t
    t = input_list[i+1]
    input_list[i+1] = input_list[end]
    input_list[end] = t 
    return i+1


def quicksort(input_list, start, end):
    if end > start:
        pivot_position = partition(input_list, start, end, start)
        quicksort(input_list, start, pivot_position - 1)
        quicksort(input_list, pivot_position + 1, end)
    return input_list


print(test_quicksort([1], 0, 0, [1]))
print(test_quicksort([1, 2, 3, 4, 5, 6, 7], 0, 6, [1, 2, 3, 4, 5, 6, 7]))
print(test_quicksort([3, 4, 1, 2, 9, 8, 2], 0, 6, [1, 2, 2, 3, 4, 8, 9]))
print(test_quicksort([""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""], 0, 4,
                     [""American Gods"", ""Coraline"", ""Good Omens"", ""Neverwhere"", ""The Graveyard Book""]))
   
```",2022-11-30T23:06:28+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 3",lucia1299,"```Ruby

def test_quicksort(input_list, start, end, expected):
    result = quicksort(input_list, start, end)
    return result == expected 
  
def partition(input_list, start, end, pivot_position):
    i = start-1
    for j in range(start, end+1):
        if input_list[j] < input_list[pivot_position]:
            i += 1
            input_list[j], input_list[i] = input_list[i], input_list[j]
    input_list[i+1], input_list[end] = input_list[end], input_list[i+1]    
    return i+1
   
def quicksort(input_list, start, end):
    if start < end:
        pivot_new = partition(input_list, start, end, end)
        quicksort(input_list, start, pivot_new-1)
        quicksort(input_list, pivot_new+1, end)
    return input_list
    
print(test_quicksort([0, 3, 5, 6, 2, 9, 10], 0, 6, [0, 2, 3, 5, 6, 9, 10])) #True
print(test_quicksort(['Bologna', 'Milano', 'Napoli', 'Palermo', 'Firenze', 'Venezia'], 0, 5, ['Bologna', 'Firenze', 'Milano', 'Napoli', 'Palermo', 'Venezia'])) #True
print(test_quicksort([56, 34, 901, 2, 3, 6, 345], 0, 6, [2, 3, 6, 34, 56, 345, 901])) #True

```",2022-12-07T10:29:54+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 3",alka2696,"```
def test_quicksort(input_list, start, end, expected):
    result = quicksort(input_list, start, end)
    quicksort(input_list, start, end)
    if input_list == expected:
        return True
    else:
        return False

def partition(my_list, start, end, pivot_position):
    pivot_value = my_list[pivot_position]
    store_index = start
    for i in range(start, end+1):
        if my_list[i] < pivot_value:
            my_list[store_index], my_list[i] = my_list[i], my_list[store_index]
            store_index += 1
    my_list[store_index], my_list[pivot_position] = my_list[pivot_position], my_list[store_index]
    return store_index

def quicksort(my_list, start, end):
    if start >= end:
        return my_list
    pivot_position = end
    store_index = partition(my_list, start, end, pivot_position)
    quicksort(my_list, start, store_index-1)
    quicksort(my_list, store_index+1, end)
    return my_list




print(test_quicksort([5, 4, 3, 2, 1], 0, 4,[1, 2, 3, 4, 5])) #True
print(test_quicksort([1, 2, 3, 4, 5, 6, 7], 0, 6, [1, 2, 3, 4, 5, 6, 7])) #True

```
",2023-03-14T10:12:03+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 2",delete4ever,"It's not beautiful enough and works strangely I think I should try again.
```python
# Test case for the algorithm
def test_partition(input_list, start, end, pivot_position, expected):
    result= partition(input_list, start, end, pivot_position)
    if expected == result:
        return True
    else:
        return False
# Code for the algorithm
def partition(input_list, start, end, pivot_position):
    if len(input_list) <= 1:
        return 0
    else:
        left_list= list()
        right_list= list()
        wanted_list= input_list[start:(end+1)]
        if pivot_position >= start:
            for i in wanted_list:
                if i < input_list[pivot_position]:
                    left_list.append(i)
                if i > (input_list[pivot_position]):
                    right_list.append(i)
            input_list[:] = list(input_list[0:start] + left_list + [input_list[pivot_position]] + right_list + input_list[end+1:len(input_list)])
            return len(input_list[0:start]) + len(left_list)
# Three test runs
print(test_partition([""The Graveyard Book"", ""Coraline"", ""Neverwhere"", ""Good Omens"", ""American Gods""], 1, 4, 1, 2)) #True
print(test_partition([3, 2, 4, 1, 5], 0, 4, 3, 0)) #True
print(test_partition([0], 0, 0, 0, 0)) #True
```",2022-11-23T19:40:42+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 2",leonardozilli,"```python
def partition(input_list, start, end, pivot_position):
    pivot_item = input_list[pivot_position]
    i = start - 1

    if pivot_position >= start and pivot_position <= end:
        for item in input_list[start:end + 1]:
            if item < input_list[pivot_position]:
                i += 1
                if pivot_position == i:
                    pivot_position = input_list.index(item)
                input_list[input_list.index(item)], input_list[i] = input_list[i], input_list[input_list.index(item)]
        input_list.insert(i + 1, input_list[pivot_position])
        input_list.pop(pivot_position + 1)

        pivot_new_position = input_list.index(pivot_item)
        return input_list, pivot_new_position
    else:
        return None


print(test_partition([""The Graveyard Book"", ""Coraline"", ""Neverwhere"", ""Good Omens"", ""American Gods""], 1, 4, 1, ([""The Graveyard Book"", ""American Gods"", ""Coraline"", ""Neverwhere"", ""Good Omens""], 2)))
print(test_partition([7, 2, 1, 8, 6, 3, 5, 4], 0, 7, 7, ([2, 1, 3, 4, 8, 6, 7, 5], 3)))
print(test_partition([7, 2, 1, 8, 6, 3, 5, 4], 1, 6, 7, None))
print(test_partition([3, 2, 4, 1, 5], 0, 4, 3, ([1, 3, 2, 4, 5], 0)))
print(test_partition([0], 0, 0, 0, ([0], 0)))
```",2022-11-26T12:54:25+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 2",ranacoskun,"```python
def test_partition(input_list, start, end, pivot_position, expected):
    if expected == partition(input_list, start, end, pivot_position):
        return True
    else:
        return False


def partition(input_list, start, end, pivot_position):
    i = start - 1

    for position in range(start, end + 1):
        if input_list[position] < input_list[pivot_position]:
            i = i + 1
            if i == pivot_position:
                pivot_position = position
            temp = input_list[position]
            input_list[position] = input_list[i]
            input_list[i] = temp

    temp = input_list[pivot_position]
    input_list[pivot_position] = input_list[i + 1]
    input_list[i + 1] = temp

    return i + 1


print(test_partition([""The Graveyard Book"", ""Coraline"", ""Neverwhere"", ""Good Omens"", ""American Gods""], 1, 4, 1, 2))  # True
print(test_partition([""d"", ""e"", ""a"", ""c""], 0, 3, 3, 1))  # True
print(test_partition([7, 6, 3, 9, 12, 1], 0, 5, 5, 0))  # True
print(test_partition([7, 6, 3, 9, 12, 1], 2, 5, 4, 5))  # True
```",2022-11-27T18:21:02+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 2",EricaAndreose,"Solution

```ruby
def test_partition(input_list, start, end, pivot_position, expected):
    result = partition(input_list, start, end, pivot_position)
    if result == expected:
        return True
    else:
        return False

def partition(input_list, start, end, pivot_position):
    i = start - 1
    for j in range(start, end+1):
        if input_list[j] < input_list[pivot_position]:
            i = i+1
            temp=input_list[j]
            input_list[j]=input_list[i]
            input_list[i]=temp
    return i+1


print(test_partition([""a"", ""c"", ""b"", ""f""], 0, 3, 2, 1))
print(test_partition([""a"", ""c"", ""b"", ""f""], 1, 3, 2, 1))
print(test_partition([""a"", ""c"", ""b"", ""f""], 1, 3, 3, 3))
print(test_partition([""a"", ""c"", ""b"", ""f""], 0, 2, 1, 2)) 
print(test_partition([""mela"", ""banana"", ""pera"", ""uva"", ""kiwi""], 1, 4, 1, 1))
print(test_partition([""The Graveyard Book"", ""Coraline"", ""Neverwhere"", ""Good Omens"", ""American Gods""], 1, 4, 1, 2))
print(test_partition([""mela"", ""banana"", ""pera"", ""uva"", ""kiwi""], 0, 4, 3, 4)) 
```

Second try

```ruby
def test_partition(input_list, start, end, pivot_position, expected):
    result = partition(input_list, start, end, pivot_position)
    if result == expected:
        return True
    else:
        return False

def partition(input_list: list, start, end, pivot_position):
    i= start-1
    item_pivot=input_list[pivot_position]
    for item in input_list[start:end+1]:
        if item < item_pivot:
            i = i+1
            input_list.remove(item)
            input_list.append(item)
    item == item_pivot
    pivot_position = i+1
    return pivot_position


print(test_partition([""a"", ""c"", ""b"", ""f""], 0, 3, 2, 1))
print(test_partition([""a"", ""c"", ""b"", ""f""], 1, 3, 2, 1))
print(test_partition([""a"", ""c"", ""b"", ""f""], 1, 3, 3, 3))
print(test_partition([""a"", ""c"", ""b"", ""f""], 0, 2, 1, 2)) 
print(test_partition([""mela"", ""banana"", ""pera"", ""uva"", ""kiwi""], 1, 4, 1, 1))
print(test_partition([""mela"", ""banana"", ""pera"", ""uva"", ""kiwi""], 0, 4, 3, 4)) 
```

First try

```
def test_partition(input_list, start, end, pivot_position, expected):
    result = partition(input_list, start, end, pivot_position)
    if result == expected:
        return True
    else:
        return False
    
def partition(input_list: list, start, end, pivot_position):
    i= start-1
    item_pivot=input_list[pivot_position]
    left_list = list()
    right_list = list()
    for item in input_list[start:end+1]:
        if item > item_pivot:
            right_list.append(item)
        elif item < item_pivot:
            left_list.append(item)
            i = i+1
    pivot_position = i+1
    left_list + [pivot_position] + right_list
    return pivot_position

print(test_partition([""1"", ""3"", ""2"", ""7""], 0, 3, 2, 1))
print(test_partition([""a"", ""c"", ""b"", ""f""], 0, 3, 2, 1))
print(test_partition([""a"", ""c"", ""b"", ""f""], 1, 3, 2, 1))
print(test_partition([""1"", ""3"", ""2"", ""7""], 1, 3, 2, 1))
print(test_partition([""a"", ""c"", ""b"", ""f""], 1, 3, 3, 3))
print(test_partition([""a"", ""c"", ""b"", ""f""], 0, 2, 1, 2)) 
print(test_partition([""mela"", ""banana"", ""pera"", ""uva"", ""kiwi""], 1, 4, 1, 1))
print(test_partition([""mela"", ""banana"", ""pera"", ""uva"", ""kiwi""], 0, 4, 3, 4)) 
print(test_partition([""mela"", ""banana"", ""pera"", ""uva"", ""arancia""], 2, 4, 4, 2)) 
print(test_partition([""1"", ""3"", ""2"", ""7""], 0, 3, 2, 1))
print(test_partition([""The Graveyard Book"", ""Coraline"", ""Neverwhere"", ""Good Omens"", ""American Gods""], 1, 4, 1, 2))
print(test_partition([""d"", ""e"", ""a"", ""c""], 0, 3, 3, 1))
```",2022-11-29T10:33:11+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 2",lucia1299,"Solution

```Ruby

def test_partition(input_list, start, end, pivot_position, expected):
    result = partition(input_list, start, end, pivot_position)
    return result == expected

def partition(input_list, start, end, pivot_position):
    i = start-1
    for j in range(len(input_list)-1):
        if input_list[j] < input_list[pivot_position]:
            i += 1
            input_list[j], input_list[i] = input_list[i], input_list[j]
    return i+1

print(test_partition([0, 3, 5, 6, 2, 9, 10], 0, 6, 2, 3)) #True
print(test_partition([""Bologna"", ""Milano"", ""Napoli"", ""Parlemo"", ""Firenze"", ""Venezia""], 0, 5, 3, 4)) #True
print(test_partition([56, 34, 901, 2, 3, 6, 345], 0, 6, 4, 1)) #True

```




Previous solution

```Ruby

def test_partition(input_list, start, end, pivot_position, expected):
    result = partition(input_list, start, end, pivot_position)
    return result == expected

def partition(input_list, start, end, pivot_position):
    left_list = list()
    right_list = list()
    pivot_item = input_list[pivot_position]
    for item in input_list[start:]:
        if item < input_list[pivot_position]:
            left_list.append(item)
        elif item > input_list[pivot_position]:
            right_list.append(item)
        elif item == input_list[pivot_position]:
            right_list.append(pivot_item)
            pivot_item = right_list[0]
    new_list = list(left_list + right_list)
    return new_list.index(pivot_item)

print(test_partition([0, 3, 5, 6, 2, 9, 10], 0, 6, 2, 3)) #True
print(test_partition([""Bologna"", ""Milano"", ""Napoli"", ""Palermo"", ""Firenze"", ""Venezia""], 0, 5, 3, 4)) #True
print(test_partition([56, 34, 901, 2, 3, 6, 345], 0, 6, 4, 1)) #True

```
",2022-11-29T16:40:55+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 2",n1kg0r,"```
def test_partition(input_list, start, end, pivot_position, expected):
    p_value = input_list[pivot_position]
    result = partition(input_list, start, end, pivot_position)
    output = expected == result and p_value == input_list[result]
    for item in input_list[0:result]:
        output = output and item <= p_value
    for item in input_list[result + 1:len(input_list)]:
        output = output and item >= p_value
    return output


def partition(input_list, start, end, pivot_position):
    i = start - 1
    t = input_list[pivot_position]
    input_list[pivot_position] = input_list[end]
    input_list[end] = t 
    for j in range(start, end):
        if input_list[j] < input_list[end]:
            i += 1
            t = input_list[i]
            input_list[i] = input_list[j]
            input_list[j] = t
    t = input_list[i+1]
    input_list[i+1] = input_list[end]
    input_list[end] = t 
    return i+1


print(test_partition([1, 2, 3, 4, 5], 0, 4, 0, 0))
print(test_partition([4, 5, 3, 1, 7], 0, 4, 0, 2))
print(test_partition([4, 5, 3, 1, 7], 0, 4, 2, 1))
print(test_partition([7, 5, 3, 1, 4], 0, 4, 4, 2))
print(test_partition([1, 9, 7, 5, 9, 3, 1, 4, 2, 3], 0, 9, 1, 8))
print(test_partition([1, 9, 7, 5, 9, 3, 1, 4, 2, 3], 0, 9, 0, 0))
print(test_partition([1, 9, 7, 5, 9, 3, 1, 4, 2, 3], 0, 9, 3, 6))
print(test_partition([1, 2, 2, 3, 9, 8, 4], 1, 2, 1, 1))
```",2022-11-30T22:57:48+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 2",ChiaraParravicini,"```ruby
# considering the end item as pivot
def test_partition(input_list, start, end, pivot_position, expected):
    result = partition(input_list, start, end, pivot_position)
    if result == expected:
        return True
    else:
        return False

def partition(input_list, start, end, pivot_position):
    pivot_position >= start and pivot_position <= end
    i = start - 1
    j = start
    for j in range(len(input_list[start:end+1])):
        if input_list[j] <= input_list[pivot_position]:
            i += 1
            temp = input_list[j]
            input_list[j] = input_list[i]
            input_list[i] = temp
    return i
print(test_partition([4, 2, 5, 0, 9, 3], 0, 5, 5, ([2, 0, 3, 4, 9, 5], 2)))
print(test_partition([0, 5, 7, 1, 2], 0, 3, 3, ([0, 1, 7, 5, 2], 1)))
print(test_partition([""c"", ""a"", ""b"", ""d"", ""b""], 0, 4, 4, ([""a"", ""b"", ""b"", ""d"", ""c""], 2)))
print(test_partition([''], 0, 0, 0, ([''], 0)))
```",2022-12-12T08:34:51+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 2",alka2696,"```
def test_partition(input_list, start, end, pivot_position, expected):
    result = partition(input_list, start, end, pivot_position)
    if result == expected:
        return True
    else:
        return False

def partition(my_list, start, end, pivot_position):
    pivot_value = my_list[pivot_position]
    store_index = start
    for i in range(start, end+1):
        if my_list[i] < pivot_value:
            my_list[store_index], my_list[i] = my_list[i], my_list[store_index]
            store_index += 1
    my_list[store_index], my_list[pivot_position] = my_list[pivot_position], my_list[store_index]
    return store_index

print(test_partition([""Alka"",""Prabha"",""Neelam"",""Madan""],0,3,3,1)) #True
print(test_partition([""a"",""e"",""j"",""i"",""d""],1,4,3,3)) #True
```",2023-03-14T08:32:40+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 1",delete4ever,"```python
# Test case for the algorithm
def test_binary_search(item, ordered_list, start, end, expected):
    result = binary_search(item, ordered_list, start, end)
    if result == expected:
        return True
    else:
        return False
# Code for the algorithm
def binary_search(item, ordered_list, start, end):
    if end >= start:
        mid = (start+end) // 2
        if ordered_list[mid] == item:
            return mid
        elif ordered_list[mid] < item:
            return binary_search(item, ordered_list, mid+1, end)
        else:
            return binary_search(item, ordered_list, start, mid-1)
    else:
        return None
# Three test runs
print(test_binary_search(4, [1, 2, 3, 4, 5 ,6], 0, 5, 3)) #True
print(test_binary_search(1, [2, 3, 4, 5], 0, 3, None)) #True
print(test_binary_search(1, [1], 0, 0, 0)) #True
```",2022-11-23T15:26:42+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 1",SleepingSteven,"```
def test (lista, term, pos):
    if binary_search(lista, term, 0, len(lista)) == pos:
        return True
    else:
        return False

def binary_search (list, term, start, end):
    new_list_len = len(list[start:end])
    mid = start+new_list_len//2
    if list[mid] == term:
        if list[mid] == term:
            return mid+1 
    elif list[mid] > term:
        return binary_search (list, term, start, mid)
    else:
        return binary_search (list, term, mid, end)   

lista = [1,2,5,7,9,12,15]

print(test(lista,5,3)) 
```",2022-11-24T15:34:26+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 1",leonardozilli,"```python
def test_binary_search(item, ordered_list, start, end, expected_result):
    result = binary_search(item, ordered_list, start, end)
    return result == expected_result

def binary_search(item, ordered_list, start, end):
    middle_item = ordered_list[(start + end) // 2]

    if item in ordered_list[start:end + 1]:
        if middle_item == item:
            return ordered_list.index(middle_item)
        elif middle_item < item:
            return binary_search(item, ordered_list, ordered_list.index(middle_item) + 1, end)
        elif middle_item > item:
            return binary_search(item, ordered_list, start, ordered_list.index(middle_item) - 1)
    else:
        return None


print(test_binary_search(3 , [1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 6, 2))
print(test_binary_search('b', ['a', 'b', 'c', 'd', 'e', 'f'], 1, 3, 1))
print(test_binary_search(4, [1, 2, 3, 4, 5 ,6], 4, 5, None))
print(test_binary_search(1, [2, 3, 4, 5], 0, 3, None)) 
print(test_binary_search(1, [1], 0, 0, 0))
```",2022-11-24T23:20:45+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 1",ranacoskun,"```python
def test_binary_search(item, ordered_list, start, end, expected):
    if expected == binary_search(item, ordered_list, start, end):
        return True
    else:
        return False


def binary_search(item, ordered_list, start, end):
    while len(ordered_list) > 0 and start <= end:
        mid = (start + end) // 2
        if item == ordered_list[mid]:
            return mid
        elif ordered_list[mid] < item:
            return binary_search(item, ordered_list, mid + 1, end)
        else:
            return binary_search(item, ordered_list, start, mid - 1)


print(test_binary_search(4, [0, 2, 3, 5, 7, 8, 9], 0, 6, None))  # True
print(test_binary_search(8, [0, 2, 3, 5, 7, 8, 9], 0, 6, 5))  # True
print(test_binary_search(8, [0, 2, 3, 5, 7, 8, 9], 0, 3, None))  # True
print(test_binary_search(8, [], 0, 3, None))  # True
print(test_binary_search('f', ['a', 'b', 'c', 'd', 'e', 'f'], 0, 5, 5))  # True
```",2022-11-27T18:19:29+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 1",lucia1299,"```Ruby

def test_binary_search(item, ordered_list, start, end, expected):
    result = binary_search(item, ordered_list, start, end)
    return result == expected
	
def binary_search(item, ordered_list, start, end):
    if start<=end:
        mid = (start+end) // 2
        if ordered_list[mid] == item:
            return mid         
        elif ordered_list[mid] < item:
            return binary_search(item, ordered_list, start+1, end)
        elif ordered_list[mid] > item:
            return binary_search(item, ordered_list, start, end-1)
    else:
        return None

print(test_binary_search(""Bologna"", [""Bologna"", ""Firenze"", ""Milano"", ""Roma""], 0, 3, 0)) #True
print(test_binary_search(""Milano"", [""Bologna"", ""Firenze"", ""Milano"", ""Roma""], 0, 3, 2)) #True
print(test_binary_search(2, [0, 1, 2, 3, 4, 5], 0, 5, 2)) #True
print(test_binary_search(""Palermo"", [""Bologna"", ""Firenze"", ""Milano"", ""Roma""], 0, 3, None)) #True

```",2022-11-28T22:05:55+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 1",EricaAndreose,"```
def test_binary_search(item, ordered_list, start, end, expected):
    result = binary_search(item, ordered_list, start, end)
    if result == expected:
        return True
    else:
        return False

def binary_search(item, ordered_list, start, end):
    longness = start + (end+1)
    mid = longness // 2
    if item in ordered_list:
        if item == ordered_list[mid]:
            return mid
        elif ordered_list[mid] < item:
            return binary_search(item, ordered_list, mid+1, end)
        elif ordered_list[mid] > item:
            return binary_search(item, ordered_list, start, mid-1)
    else:
        return None 

print(test_binary_search(""Ciao"", [""Bella"", ""Ciao"", ""Miao"", ""Sole""], 0, 3, 1))
print(test_binary_search(""Bella"", [""Bella"", ""Ciao"", ""Miao"", ""Sole""], 0, 3, 0))
print(test_binary_search(""Sole"", [""Bella"", ""Ciao"", ""Miao"", ""Sole""], 0, 3, 3))
print(test_binary_search(""_"", [""Bella"", ""Ciao"", ""_"", ""Sole""], 0, 3, 2))
print(test_binary_search(""Anna"", [""Bella"", ""Ciao"", ""Miao"", ""Sole""], 0, 3, None))
print(test_binary_search(1, [0, 1, 2, 3], 0, 3, 1))
print(test_binary_search(0, [0, 1, 2, 3], 0, 3, 0))
print(test_binary_search(""a"", [""a"", ""b"", ""c"", ""d""], 0, 3, 0))
print(test_binary_search(""b"", [""a"", ""b"", ""c"", ""d""], 0, 3, 1))
print(test_binary_search(""s"", [""a"", ""b"", ""c"", ""d""], 0, 3, None))
print(test_binary_search(""i"", [""i"", ""i"", ""i"", ""i""], 0, 3, 2))
```",2022-11-29T10:31:53+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 1",n1kg0r,"```
def test_binary_search(item, ordered_list, start, end, expected):
    return expected == binary_search(item, ordered_list, start, end)

def binary_search(item, ordered_list, start, end):
    if start > end or len(ordered_list) < end or len(ordered_list) == 0:
        return None
    if item == ordered_list[(start + end) // 2]:
        return (start + end) // 2
    elif item > ordered_list[(start + end) // 2]:
        return binary_search(item, ordered_list, (start + end) // 2 + 1, end)
    elif item < ordered_list[(start + end) // 2]:
        return binary_search(item, ordered_list, start, (start + end) // 2 - 1)
    
print(test_binary_search(3, [1, 2, 3, 4, 5], 0, 4, 2))
print(test_binary_search(""Denver"", [""Alice"", ""Bob"", ""Catherine"", ""Charles""], 0, 3, None))
print(test_binary_search(""Harry"", [""Harry"", ""Hermione"", ""Ron""], 0, 2, 0))
print(test_binary_search(""Harry"", [], 0, 0, None))
```",2022-11-30T20:15:11+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 1",ChiaraParravicini,"```ruby
def binary_search(item, ordered_list, start, end):
    mid = (start+end)//2
    if start <= end:
        if ordered_list[mid] == item:
            return mid
        elif ordered_list[mid] < item:
            start = mid + 1
            return binary_search(item, ordered_list, start, end)
        elif ordered_list[mid] > item:
            end = mid - 1
            return binary_search(item, ordered_list, start, end)
    else:
        return None


print(test_binary_search(""d"", [""a"", ""b"", ""c"", ""d"", ""e"", ""f""], 0, 5, 3))
print(test_binary_search(""d"", [""a"", ""b"", ""c"", ""d"", ""d""], 0, 4, 3))
print(test_binary_search(""d"", [""a"", ""b"", ""c"", ""c"", ""e""], 1, 4, None))
print(test_binary_search(5, [0, 1, 1, 2, 5, 7], 3, 5, 4))
```",2022-12-05T15:32:15+00:00
comp-think/2022-2023,"Lecture ""Divide and conquer algorithms"", exercise 1",alka2696,"```
def test_binary_search(item, ordered_list, start, end, expected):
    result = binary_search(item, ordered_list, start, end)
    if result == expected:
        return True
    else:
        return False
    
def binary_search(item, ordered_list, start, end):
    if start > end:
        return None

    mid = (start + end) // 2

    if ordered_list[mid] == item:
        return mid

    elif ordered_list[mid] < item:
        return binary_search(item, ordered_list, mid + 1, end)

    else:
        return binary_search(item, ordered_list, start, mid - 1)

ordered_list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]

print(test_binary_search(9, ordered_list, 0, len(ordered_list) - 1, 4)) #True
print(test_binary_search(1, ordered_list, 0, len(ordered_list) - 1, 0)) #True
print(test_binary_search(19, ordered_list, 0, len(ordered_list) - 1, 9)) #True
print( test_binary_search(10, ordered_list, 0, len(ordered_list) - 1, None) #True
 ```",2023-03-13T11:47:48+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",delete4ever,"```python
# Test case for the algorithm
def test_fib(int_1, expected):
    result = fib(int_1)
    if result == expected:
        return True
    else:
        return False
# Code for the algorithm
def fib(n):
    if n <= 0:
        return 0
    if n ==1:
        return 1
    else:
        return fib(n-1)+fib(n-2)
# Three test runs
print(test_fib(2, 1))
print(test_fib(16, 987))
print(test_fib(24, 46368))
# Console results
True
True
True
```",2022-11-21T17:04:54+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",giorgiacrosilla,"```ruby
def test_fib(n, expected):
    result = fib(n)
    if expected == result:
        return True 
    else:
        return False 

def fib(n):
    if n <= 0:
        return 0
    if n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(test_fib(1,1))
print(test_fib(2,1))
print(test_fib(6, 8))
print(test_fib(0,0))
```",2022-11-21T18:24:00+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",lucia1299,"```Ruby

def test_my_fib(n, expected):
    result = fib(n)
    if result == expected:
        return True
    else: 
        return False

def fib(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else: 
        return fib(n-1) + fib(n-2)

print(test_my_fib(19, 4181))
print(test_my_fib(22, 17711))
print(test_my_fib(4, 3))

#Console output
True
True
True

```",2022-11-21T19:27:22+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",ranacoskun,"```python
def test_fibonacci(n,expected):
  if fibonacci(n) == expected:
    return True
  else:
    return False

def fibonacci(n):
  if n <= 0:
    result = 0
  elif n == 1:
    result = 1
  else:
    result = fibonacci(n-1) + fibonacci(n-2)
  return result    

print(test_fibonacci(0,0)) #True
print(test_fibonacci(1,1)) #True
print(test_fibonacci(4,3)) #True
print(test_fibonacci(7,13)) #True
```",2022-11-21T19:49:33+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",mary-lev,"```
def fib(n):
    # n can't be less than 0
    if n == 0 or n == 1:
        return n
    return fib(n - 1) + fib(n - 2)

def test_fib(n, expected):
    if fib(n) == expected:
        return True
    return False

print(test_fib(0, 0))
print(test_fib(1, 1))
print(test_fib(2, 1))
print(test_fib(4, 3))
print(test_fib(12, 144))
print(test_fib(19, 4181))
```",2022-11-22T02:45:05+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",ChiaraParravicini,"```ruby
def test_fib(n, expected):
    result = fib(n)
    if expected == result:
        return True
    else: 
        return False

def fib(n):
    if n <= 0:
        return 0
    if n == 1:
        return 1
    else:
        return fib(n-1)+fib(n-2)

print(test_fib(0, 0))
print(test_fib(1, 1))
print(test_fib(-1, 0))
print(test_fib(2, 1))
print(test_fib(12, 144))
```",2022-11-22T07:44:26+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",corrado877,"```
# Define Test Algorithm
def test_fib(n, expected):
    result= fib(n)
    if result==expected:
        return True
    else:
        return False
    
# Code of Fibonacci Seuquence Algorithm
def fib(n):
    if n<=0:
        return 0
    elif n==1:
        return 1
    else:
        return fib(n-1) + fib (n-2)

# Five Test runs
print (test_fib(6, 8))
print (test_fib(11, 89))
print (test_fib( 0, 0))
print (test_fib( 1, 1))
print (test_fib(-5, 0 ))
```",2022-11-22T09:34:23+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",lvcasmariani,"```ruby
def test_fib(n, expected):
    result = fib(n)
    if result == expected:
        return True
    else:
        return False

def fib(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(test_fib(1, 1))
print(test_fib(2, 1))
print(test_fib(4, 3))
print(test_fib(11, 89))
```",2022-11-22T17:44:05+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",EricaAndreose,"```
def test_fib(n, expected):
    result = fib(n)
    if expected == result:
        return True
    else:
        return False

def fib(n):
    if n <= 0:
        return 0
    if n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

# Test runs that returns True
print(test_fib(0, 0))
print(test_fib(1, 1))
print(test_fib(2, 1))
print(test_fib(3, 2))
print(test_fib(7, 13))
```",2022-11-22T18:38:52+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",NicoleLiggeri,"```
def test_fib(n, expected):
    result = fib(n)
    if result == expected:
        return True
    else:
        return False

def fib(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1)+fib(n-2)

print(test_fib(3, 2))
print(test_fib(0, 0))
print(test_fib(9, 34))
```",2022-11-22T18:40:58+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",n1kg0r,"```
def test_fib(n, expected):
    return expected == fib(n)

def fib(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else: 
        return fib(n-1) + fib(n-2)

print(test_fib(7, 13)) # True
print(test_fib(13, 233)) # True
print(test_fib(0, 0)) # True
```",2022-11-22T19:12:45+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",irematmar,"```
def test_fib(n, expected):
    result=fib(n)
    if result==expected:
        return True
    else:
        return False

def fib(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(test_fib(10, 55))
print(test_fib(1, 1))
print(test_fib(0, 0))
print(test_fib(4, 3))

True
True
True
True
```",2022-11-23T15:17:01+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",matteo-guenci,"```
def test_fib(n, expected):
    result = fib(n)
    if result == expected:
        return True
    else:
        return False


def fib(n):
    if n <= 0:
        return 0
    if n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)  

print(test_fib(5, 5))
print(test_fib(7, 13))
print(test_fib(8, 21))
print(test_fib(9, 34))
```",2022-11-23T15:31:39+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",eugeniavd,"![image](https://user-images.githubusercontent.com/114939440/203592913-76547a6b-3e71-4c30-8429-97db869a375b.png)
",2022-11-23T16:03:25+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",alka2696,"```
# Test case for the algorithm
def test_fib(int_1, expected):
    result = fib(int_1)
    if result == expected:
        return True
    else:
        return False
# Code for the algorithm
def fib(n):
    if n <= 0:
        return 0
    if n ==1:
        return 1
    else:
        return fib(n-1)+fib(n-2)
# Three test runs
print(test_fib(2, 1)) #True
print(test_fib(1, 1)) #True
print(test_fib(4, 3)) #True

```",2022-11-24T14:38:13+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 2",SalvatoreDiMarzo,"```
def test_fib(n,expected):
  if fib(n) == expected:
    return True
  else:
    return False

def fib(n):
  if n <= 0:
    result = 0
  elif n == 1:
    result = 1
  else:
    result = fib(n-1) + fib(n-2)
  return result    

print(test_fib(5, 5))
print(test_fib(2, 1))
print(test_fib(7, 13))
```",2022-11-29T16:00:01+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",delete4ever,"```python
def test_exponentiation (int_1, int_2, expected):
    result=exponentiation(int_1, int_2)
    if expected == result:
        return True
    else:
        return False
# Code of the algorithm 
def exponentiation(base_number, exponent):
    if exponent == 0:
        return 1
    else:
        return base_number*(exponentiation(base_number, exponent-1))
# Test runs
print(test_exponentiation(3, 4, 81))
print(test_exponentiation(17, 1, 17))
print(test_exponentiation(2, 0 ,1))
# Console output
True
True
True
```",2022-11-21T16:50:58+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",lucia1299,"```Ruby

def test_my_exponentiation (base_number, exponent, expected):
    result = exponentiation(base_number, exponent)
    if result == expected:
        return True
    else: 
        return False

def exponentiation(base_number, exponent):
    if exponent == 0:
        return 1
    elif exponent == 1:
        return base_number
    else:
        return base_number*exponentiation(base_number, exponent-1)



print(test_my_exponentiation (3, 4, 81))
print(test_my_exponentiation(17, 1, 17))
print(test_my_exponentiation(2, 0, 1))

#Console output: 
True 
True 
True

```",2022-11-21T17:54:19+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",giorgiacrosilla,"```ruby
def test_exponentiation(base_number, exponent, expected):
    result = exponentiation(base_number, exponent)
    if expected == result:
        return True
    else: 
        return False 

def exponentiation(base_number, exponent):
    if exponent == 0:
        return 1
    else: 
        return base_number * exponentiation(base_number, (exponent-1))
    

print(test_exponentiation(3,4,81))
print(test_exponentiation(17,1,17))
print(test_exponentiation(2,0,1))
```",2022-11-21T18:22:19+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",ranacoskun,"```python
def test_exponentiation(base_number, exponent,expected):
  if exponentiation(base_number, exponent) == expected:
    return True
  else:
    return False

def exponentiation(base_number, exponent):
  if exponent == 0:
    result = 1
  else: 
    result = (base_number * (exponentiation(base_number, exponent-1))) 
  return result  

print(test_exponentiation(3, 4, 81)) #True
print(test_exponentiation(17, 1, 17)) #True
print(test_exponentiation(2, 0, 1)) #True
```",2022-11-21T19:47:39+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",ChiaraParravicini,"```ruby
def test_exponentiation(base_number, exponent, expected):
    result = exponentiation(base_number, exponent)
    if expected == result:
        return True
    else:
        return False

def exponentiation(base_number, exponent):
    if exponent == 0:
        return 1
    else:
        return (exponentiation(base_number, (exponent - 1)) * base_number)

print(test_exponentiation(3, 4, 81))
print(test_exponentiation(17, 1, 17))
print(test_exponentiation(2, 0, 1))
```",2022-11-22T07:23:53+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",corrado877,"```
# Define Test Function
def test_exponentiation (based_number, exponent, expected):
    result=exponentiation (based_number, exponent)
    if result==expected:
        return True
    else:
        return False

# Code of Algorithm
def exponentiation (based_number, exponent):
    if exponent==0:
        return 1
    elif exponent==1:
        return based_number
    else:
         return based_number * exponentiation(based_number, exponent-1)

# Three test runs 
print (test_exponentiation(3, 4, 81))
print (test_exponentiation(17, 1, 17))
print (test_exponentiation(2, 0, 1))

```
",2022-11-22T09:31:02+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",lvcasmariani,"```ruby
#Define Test Function
def test_exponentiation (int_1, int_2, expected):
    result = exponentiation (int_1, int_2)
    if expected == result:
        return True
    else:
        return False

#Algorithm Code
def exponentiation(base_number, exponent):
    if exponent == 0:
        return 1
    else:
        return base_number * (exponentiation(base_number, exponent -1))

#Test
print (test_exponentiation(3, 4, 81))
print (test_exponentiation(17, 1, 17))
print (test_exponentiation(2, 0, 1))

#Output
True
True
True
```",2022-11-22T16:57:24+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",EricaAndreose,"```
# Test of the function

def test_exponentation(base_number, exponent, expected):
    result = exponentation(base_number, exponent)
    if expected == result:
        return True
    else:
        return False

# Implementation of the function

def exponentation(base_number, exponent):
    if exponent == 0:
        return 1
    if exponent == 1:
        return base_number
    else:
        return base_number * exponentation(base_number, exponent - 1)

# Test runs that returns True

print(test_exponentation(3, 4, 81))
print(test_exponentation(17, 1, 17))
print(test_exponentation(2, 0, 1))
print(test_exponentation(2, 4, 16))
```
",2022-11-22T18:30:25+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",NicoleLiggeri,"```
def test_exponentiation(base_number, exponent, expected):
    result = exponentiation(base_number, exponent)
    if result == expected:
        return True
    else:
        return False

def exponentiation(base_number, exponent):
    if exponent == 0:
        return 1
    else:
        return base_number*exponentiation(base_number, exponent - 1)

print(test_exponentiation(3, 4, 81))
print(test_exponentiation(17, 1, 17))
print(test_exponentiation(2, 0, 1))

```",2022-11-22T18:45:58+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",n1kg0r,"```
def test_exponentiation(base_number, exponent, expected):
    return expected == exponentiation(base_number, exponent)

def exponentiation(base_number, exponent):
    if exponent == 0:
        return 1
    else:
        return base_number * exponentiation(base_number, exponent-1)

print(test_exponentiation(3, 4, 81)) # True 
print(test_exponentiation(17, 1, 17)) # True 
print(test_exponentiation(2, 0 ,1)) # True
```",2022-11-22T19:03:08+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",matteo-guenci,"```
def test_exponentiation(base_number, exponent, expected):
    result = exponentiation(base_number, exponent)
    if result == expected:
        return True
    else:
        return False


def exponentiation(base_number, exponent):
    if exponent == 0:
        return 1
    if exponent == 1:
        return base_number
    else:
        return base_number *(exponentiation(base_number, exponent - 1))

print(test_exponentiation(3, 4, 81))
print(test_exponentiation(17, 1, 17))
print(test_exponentiation(2, 0, 1))
```",2022-11-23T14:58:51+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",irematmar,"```
def test_expo(num1, num2, expected):
    result = exponentiation(num1, num2)
    if result == expected:
        return True
    else:
        return False

def exponentiation(base_number, exponent):
    if exponent == 0:
        return 1
    else:
        return base_number*(exponentiation(base_number, exponent-1))

print(test_expo(3, 4, 81))    
print(test_expo(17, 1, 17))
print(test_expo(2, 0, 1))


True
True
True
```
",2022-11-23T15:05:57+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",eugeniavd,"
![image](https://user-images.githubusercontent.com/114939440/203589037-275f5973-3186-4c81-ac2a-6667d5027631.png)

",2022-11-23T15:37:49+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",alka2696,"```
# Test case for the algorithm
def test_exponentiation (int_1, int_2, expected):
    result = exponentiation(int_1, int_2) 
    if expected == result:
        return True 
    else:
        return False

#code of the algorithm 
def exponentiation(base_number, exponent):
    if exponent == 0:
        return 1
    else:
        return base_number*(exponentiation(base_number, exponent-1))

print(test_exponentiation(3, 4, 81)) #True
print(test_exponentiation(17, 1, 17)) #True
print(test_exponentiation(2, 0, 1)) #True
```
",2022-11-24T14:13:35+00:00
comp-think/2022-2023,"Lecture ""Recursion"", exercise 1",SalvatoreDiMarzo,"```
def test_exponentiation(bn, ex, expected):
    result = exponentiation(bn, ex)
    if expected == result:
        return True
    else: 
        return False
    

def exponentiation(bn, ex):
    if ex == 0:
        return 1
    elif ex == 1:
        return bn
    else: 
        return bn * exponentiation(bn, ex - 1)
    

print(test_exponentiation(7, 2, 49))
print(test_exponentiation(4, 4, 256))
print(test_exponentiation(2, 8, 213))
```",2022-11-29T15:51:25+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",n1kg0r,"```
set_hobbit = set({""Frodo"", ""Sam"", ""Pippin"", ""Merry""})
set_magician = set({""Saruman"", ""Gandalf""}) 

lotr_dict = dict({'hobbit': set_hobbit, 'magician': set_magician})
```",2022-11-14T15:31:23+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",delete4ever,"```python
lotr_dict={}
set_hobbit= set({""Frodo"", ""Sam"", ""Pippin"", ""Merry""})
set_magician= set({""Saruman"", ""Gandalf""})
lotr_dict.update({""hobbit"":set_hobbit})
lotr_dict.update({""magician"":set_magician})
```",2022-11-14T17:25:18+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",EricaAndreose,"```
set_hobbit = set()

set_hobbit.add(""Frodo"")
set_hobbit.add(""Sam"")
set_hobbit.add(""Pippin"")
set_hobbit.add(""Merry"")

set_magician = set()

set_magician.add(""Saruman"")
set_magician.add(""Galdalf"")

lotr_dict = dict()

lotr_dict[""hobbit""]=set_hobbit
lotr_dict[""magician""]=set_magician

print(lotr_dict)

Terminal run: {'hobbit': {'Frodo', 'Sam', 'Pippin', 'Merry'}, 'magician': {'Saruman', 'Galdalf'}}
```",2022-11-14T18:03:37+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",lvcasmariani,"lotr_dict = dict()
lotr_dict[""hobbit""] = ""Frodo"", ""Sam"", ""Pippin"", ""Merry""
lotr_dict[""magician""] = ""Saruman"", ""Gandalf""

print(lotr_dict)

#now lotr_dict contains:
#{'hobbit': {'Frodo', 'Sam', 'Pippin', 'Merry'}, 'magician': {'Saruman', 'Gandalf'}}",2022-11-14T18:08:53+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",GaiaOrtona,"`set_hobbit = set({""Frodo"", ""Sam"", ""Pippin"", ""Merry""})
set_magician = set({""Saruman"", ""Gandalf""})
my_first_dict = dict()
my_first_dict[""hobbit""] = set_hobbit
my_first_dict[""magician""] = set_magician
print(my_first_dict)
`",2022-11-14T20:20:57+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",giorgiacrosilla,"``` ruby
set_hobbit = {""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
set_magicians = {""Saruman"", ""Gandalf""}
my_dict = dict ()
my_dict[""hobbit""] = set_hobbit
my_dict[""magician""] = set_magicians
print(my_dict)
```",2022-11-14T21:27:28+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",mjavadf,"```python
set_hobbit = set({""Frodo"", ""Sam"", ""Pippin"", ""Merry""})
set_magician = set({""Saruman"", ""Gandalf""})

fellowship = {'hobbit': set_hobbit,
              'magician': set_magician}
```",2022-11-15T12:03:00+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",tiglio95,"set_hobbits = set({""Frodo"", ""Sam"", ""Pipin"", ""Merry""})
set_magicians = set({""Asurman"", ""Gandalf""})
new_dict = dict(({""Hobbit"": set_hobbits, ""magician"":set_magicians}))
print(new_dict)

output: {'Hobbit': {'Pipin', 'Frodo', 'Merry', 'Sam'}, 'magician': {'Asurman', 'Gandalf'}}",2022-11-15T14:43:34+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",ranacoskun,"```python
set_hobbit = set({""Frodo"", ""Sam"", ""Pippin"", ""Merry""})
set_magician = set({""Saruman"", ""Gandalf""})

my_dict = dict({""hobbit"":set_hobbit,""magician"":set_magician})
#{'hobbit': {'Frodo', 'Merry', 'Pippin', 'Sam'}, 'magician': {'Saruman', 'Gandalf'}}
```",2022-11-15T17:12:12+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",lucia1299,"```Ruby

set_hobbit = {""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
set_magician = {""Saruman"", ""Gandalf""}

dict_tolkien = dict()
dict_tolkien[""hobbit""] = set_hobbit
dict_tolkien[""magician""] = set_magician

print(dict_tolkien)

#Console output
{'hobbit':  'Frodo', 'Pippin', 'Sam', 'Merry'}, 'magician':{'Gandalf', 'Saruman'}}

```",2022-11-16T07:22:06+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",matteo-guenci,"```
set_hobbit = set({""Frodo"", ""Sam"", ""Pippin"", ""Merry""})
set_magician = set({""Gandalf"", ""Saruman""})
dict = ({""hobbits"" : set_hobbit, ""magician"" : set_magicians})
print(dict)
```
",2022-11-16T15:33:10+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",corrado877,"```
set_hobbit= set({""Frodo"", ""Sam"",""Pippin"", ""Merry""})
set_magician= set ({""Saruman"", ""Gandalf""})


hobbit_dict=dict()
magician_dict=dict()
hobbit_dict[""Hobbits""]=set_hobbit
magician_dict[""Magicians""]=set_magician

lotr_dict=dict()
lotr_dict.update(hobbit_dict)
lotr_dict.update (magician_dict)

print (lotr_dict)
{'Hobbits': {'Frodo', 'Pippin', 'Sam', 'Merry'}, 'Magicians': {'Saruman', 'Gandalf'}}

```",2022-11-18T09:03:49+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",SalvatoreDiMarzo,"```
my_set ={""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
my_set.remove(""Bilbo"")
my_set.add(""Galadriel"")
my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
set_hobbit = set({""Frodo"", ""Sam"", ""Pippin"", ""Merry""})
set_magician = set({""Saruman"", ""Gandalf""})
my_dict = dict({""Hobbit:"": set_hobbit, ""Magician:"": set_magician})
print(my_dict)
```
Result
{'Hobbit:': {'Merry', 'Frodo', 'Sam', 'Pippin'}, 'Magician:': {'Saruman', 'Gandalf'}}",2022-11-18T17:15:35+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",ChiaraParravicini,"```ruby
set_hobbit = {""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
set_magician = {""Saruman"", ""Gandalf""}
lotr_characters_dict = dict()
lotr_characters_dict[""hobbit""] = ""Frodo"", ""Sam"", ""Pippin"", ""Merry""
lotr_characters_dict[""magician""] = ""Saruman"", ""Gandalf""
```",2022-11-20T12:04:37+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",eugeniavd,"set_hobbit = {""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
set_magician = {""Saruman"", ""Gandalf""}

ring_dict = dict()
ring_dict[""hobbit""] = set_hobbit
ring_dict[""magician""] = set_magician

#checking
print(ring_dict)

{'hobbit': {'Frodo', 'Sam', 'Pippin', 'Merry'}, 'magician': {'Gandalf', 'Saruman'}}",2022-11-20T14:00:16+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",essepuntato,"Hi all,

Just a few comments:
* @lvcasmariani and @ChiaraParravicini, you did not create sets, really... Try to run it in the terminal and see what happens when printing the final object
* @GaiaOrtona, please, use the right environment for rendering the code (i.e. <code>```</code>)",2022-11-21T08:41:59+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 3",alka2696,"```
set_hobbit = set()
set_hobbit.add(""Frodo"")
set_hobbit.add(""Sam"")
set_hobbit.add(""Pippin"")
set_hobbit.add(""Merry"")

set_magician = set()
set_magician.add(""Saruman"")
set_magician.add(""Gandalf"")

my_dict = dict()
my_dict[""hobbit""] = set_hobbit
my_dict[""magician""] = set_magician

print(my_dict)

Output- {'hobbit': {'Sam', 'Frodo', 'Merry', 'Pippin'}, 'magician': {'Gandalf', 'Saruman'}}
```",2022-11-23T15:50:05+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",n1kg0r,"```
my_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""} 

my_set.remove(""Bilbo"")
# {'Frodo', 'Sam', 'Merry', 'Pippin'}  
# ""Bilbo"" was removed from the set

my_set.add(""Galadriel"")
# {'Merry', 'Galadriel', 'Sam', 'Frodo', 'Pippin'}
# ""Galadriel"" was added to the set

my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
# {'Pippin', 'Sam', 'Saruman', 'Merry', 'Frodo', 'Gandalf', 'Galadriel'}
# my_set was updated by adding new elements from the new set (namely 'Saruman', 'Gandalf')
# all my_set's elements 'Merry', 'Galadriel', 'Sam', 'Frodo', 'Pippin' were left untouched

```",2022-11-14T15:25:30+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",lvcasmariani,"my_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}

my_set.remove(""Bilbo"")
#""Bilbo"" was removed from the set
#{""Pippin"", ""Frodo"", ""Merry"", ""Sam""}

my_set.add(""Galadriel"")
#""Galadriel"" was added to the set
#{""Pippin"", ""Galadriel"", ""Frodo"", ""Merry"", ""Sam""}

my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
#""Saruman"" and ""Gandalf"" were added to the set
#my_set is updated by adding new elements from new set
#""Pippin"", ""Galadriel"", ""Frodo"", ""Merry"", ""Sam"" are untouched
#{""Frodo"", ""Gandalf"", ""Galadriel"", ""Sam"", ""Saruman"", ""Pippin"", Merry""}

print(my_set)",2022-11-14T16:57:51+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",delete4ever,"```python
my_set= {""Bilbo"",""Frodo"",""Sam"",""Pippin"",""Merry""}
my_set.remove(""Bilbo"")
# ""Bilbo"" was removed from the set. 
#{""Frodo"",""Sam"",""Pippin"",""Merry""}
my_set.add(""Galadriel"")
# ""Galadriel"" was added to the set.
#{""Frodo"",""Sam"",""Pippin"",""Merry"",""Galadriel""}
my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
# ""Saruman"", ""Frodo"" and ""Gandalf"" were added from a new set to original set.
#{'Pippin', 'Gandalf', 'Galadriel', 'Merry', 'Frodo', 'Sam', 'Saruman'}
```",2022-11-14T17:18:51+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",EricaAndreose,"```
my_set = set()
my_set.add(""Bilbo"")
my_set.add(""Frodo"")
my_set.add(""Sam"")
my_set.add(""Pippin"")
my_set.add(""Merry"")

my_set.remove(""Bilbo"")
# the item ""Bilbo"" is not on the set anymore
my_set.add(""Galadriel"")
# the new item ""Galadrield"" id added to the set
my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
# a new set is added to the previous one
# ""Saruman"" and ""Gandalf"" are new items
# item ""Frodo"" is already inside my_set and won't be duplicated
print(my_set)

# Terminal run: {'Galadriel', 'Merry', 'Saruman', 'Gandalf', 'Frodo', 'Pippin', 'Sam'}
```",2022-11-14T17:47:54+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",GaiaOrtona,"`my_second_set.remove(""Bilbo"")
print(my_second_set)
#the result is {""Pippin"", ""Frodo"", ""Sam"", ""Merry""}
my_second_set.add(""Galadriel"")
print(my_second_set)
#the result is {""Frodo"", ""Sam"", ""Merry"", ""Galadriel"", ""Pippin""}
my_second_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
print(my_second_set)
#the result is {""Sam"", ""Gandalf"", ""Saruman"", ""Merry"", ""Galadriel"", ""Pippin"", ""Frodo""}`",2022-11-14T19:18:47+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",giorgiacrosilla,"``` ruby
my_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
my_set.remove(""Bilbo"")
#""Bilbo"" is removed from the set
# terminal: {""Sam"", ""Merry"", ""Pippin"", ""Frodo""}
my_set.add(""Galadriel"")
#""Galadriel"" is added to the set
# terminal: {""Galadriel"", ""Sam"", ""Pippin"", ""Frodo"", ""Merry""}
my_set.update(set((""Saruman"", ""Frodo"", ""Gandalf"")))
#adding elements included in another set
print(my_set)
#terminal: {'Merry', 'Gandalf', 'Frodo', 'Galadriel', 'Saruman', 'Sam', 'Pippin'}
```",2022-11-14T21:16:57+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",mjavadf,"by calling `my_set.remove(""Bilbo"")` the ""Bilbo""'s item will be removed from `my_set`
by calling `my_set.add(""Galadriel"")` the ""Galadriel"" will be added to `my_set`
by calling `my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))` items of given set will be added to `my_set`

![image](https://user-images.githubusercontent.com/25877328/201913792-94f39637-1777-48a8-8050-9bb3a851103e.png)
",2022-11-15T11:56:24+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",tiglio95,"elements = set()
elements.add(""Bilbo"")
elements.add(""Frodo"")
elements.add(""Sam"")
elements.add(""Pippin"")
elements.add(""Merry"")
elements.remove(""Bilbo"")
elements.add(""Galadriel"")
elements.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
print(elements)

output: {'Frodo', 'Saruman', 'Pippin', 'Galadriel', 'Merry', 'Sam', 'Gandalf'}",2022-11-15T14:32:03+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",lucia1299,"```Ruby

my_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}

my_set.remove (""Bilbo"")
print(my_set)
#Console output
{""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
#""Bilbo"" was removed from my_set 

my_set.add(""Galandriel"")
print(my_set)
#Console output
{""Frodo"", ""Sam"", ""Pippin"", ""Merry"", ""Galandriel""}
#""Galandriel"" was added to my_set

my_set.update({""Saruman"", ""Frodo"", ""Gandalf""})
print(my_set)
#Console output 
{""Frodo"", ""Sam"", ""Merry"", ""Pippin"", ""Galandriel"", ""Saruman"", ""Gandalf""}
#""Saruman"" and ""Gandalf"" were added to my_set, ""Frodo"" was not added a second time

#In general, elements are returned in a different order every time

```",2022-11-15T16:45:06+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",ranacoskun,"```python
my_set = set((""Bilbo"",""Frodo"",""Sam"",""Merry"",""Pippin""))
my_set.remove(""Bilbo"")
# {'Pippin', 'Frodo', 'Sam', 'Merry'}

my_set.add(""Galadriel"")
#{'Pippin', 'Frodo', 'Sam', 'Galadriel', 'Merry'}

my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
#{'Pippin', 'Gandalf', 'Frodo', 'Sam', 'Galadriel', 'Saruman', 'Merry'}
```",2022-11-15T17:10:27+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",matteo-guenci,"```
my_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""} 

my_set.remove(""Bilbo"")
#{'Frodo', 'Sam', 'Merry', 'Pippin'} == Bilbo has been removed 

my_set.add(""Galadriel"")
# {'Merry', 'Galadriel', 'Sam', 'Frodo', 'Pippin'} == Galadriel has been added 

my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
# {'Pippin', 'Sam', 'Saruman', 'Merry', 'Frodo', 'Gandalf', 'Galadriel'} == my_set has been updated, Saruman and Gandalf were added to the set while Frodo wasn't because he was already in 
```

",2022-11-16T15:22:10+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",corrado877,"```
my_first_set= set()
my_first_set.add (""Bilbo"")
my_first_set.add (""Frodo"")
my_first_set.add (""Sam"")
my_first_set.add (""Pippin"")
my_first_set.add (""Merry"")
my_first_set.remove (""Bilbo"")
my_first_set.add (""Galadriel"")
my_first_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))

print (my_first_set)
{'Saruman', 'Pippin', 'Sam', 'Merry', 'Galadriel', 'Gandalf', 'Frodo'}
```",2022-11-18T08:55:14+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",SalvatoreDiMarzo,"```
my_set ={""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
my_set.remove(""Bilbo"")
my_set.add(""Galadriel"")
my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
print(my_set)
```
#{'Pippin', 'Sam', 'Merry', 'Gandalf', 'Galadriel', 'Frodo', 'Saruman'}",2022-11-18T17:10:15+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",ChiaraParravicini,"```ruby
my_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
my_set.remove(""Bilbo"")
# the item ""Bilbo"" has been removed
my_set.add(""Galadriel"")
# the item ""Galadriel"" has been added
my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
# of the elements of the new set, only ""Saruman"" and ""Gandalf"" have been added to the current set, since ""Frodo"" was already present
print(my_set)
# Now the set contains:
# set({""Frodo"", ""Sam"", ""Pippin"", ""Galadriel"", ""Gandalf"", ""Merry"", ""Saruman""}) 
```",2022-11-20T11:52:15+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",eugeniavd,"my_set = set()
#new empty set is created

my_set.add(""Bilbo"")
my_set.add(""Frodo"")
my_set.add(""Pippin"")
my_set.add(""Merry"")
#four elements are added to the my_set

my_set.remove(""Bilbo"")
#Bilbo was removed from the my_set

my_set.add(""Galadriel"")
#Galadriel was added to the my_set

my_set.update(set({""Saruman"", ""Frodo"", ""Gandalf""}))
#all the elements of the set except Frodo are added to the my_set 
#Frodo isn't added because he is already there

#checking
print(my_set)

{'Saruman', 'Galadriel', 'Pippin', 'Merry', 'Frodo', 'Gandalf'}",2022-11-20T13:49:40+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 2",alka2696,"```
my_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
my_set.remove(""Bilbo"")
#""Bilbo"" is removed from the set
#  {""Sam"", ""Merry"", ""Pippin"", ""Frodo""}

my_set.add(""Galadriel"")
#""Galadriel"" is added to the set
#  {""Galadriel"", ""Sam"", ""Pippin"", ""Frodo"", ""Merry""}

my_set.update(set((""Saruman"", ""Frodo"", ""Gandalf"")))
#adding elements included in another set
print(my_set)
# {'Merry', 'Gandalf', 'Frodo', 'Galadriel', 'Saruman', 'Sam', 'Pippin'}

```",2022-11-23T15:41:00+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",n1kg0r,"```
lotr_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""} 
```",2022-11-14T15:11:00+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",lvcasmariani,"lotr_set_friends = set ()
lotr_set_friends.add(""Bilbo"")
lotr_set_friends.add(""Frodo"")
lotr_set_friends.add(""Sam"")
lotr_set_friends.add(""Pippin"")
lotr_set_friends.add(""Merry"")

print(lotr_set_friends)",2022-11-14T16:34:49+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",delete4ever,"```python
my_set= {""Bilbo"",""Frodo"",""Sam"",""Pippin"",""Merry""}
```",2022-11-14T17:15:57+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",EricaAndreose,"```
fellowship = set()
fellowship.add(""Bilbo"")
fellowship.add(""Frodo"")
fellowship.add(""Sam"")
fellowship.add(""Pippin"")
fellowship.add(""Merry"")

print(fellowship)

# Terminal run:
{'Merry', 'Sam', 'Frodo', 'Bilbo', 'Pippin'}

```
",2022-11-14T17:35:18+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",GaiaOrtona,"`my_first_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
#otherwise you can also do it this way
my_second_set = set()
my_second_set.add(""Bilbo"")
my_second_set.add(""Frodo"")
my_second_set.add(""Sam"")
my_second_set.add(""Pippin"")
my_second_set.add(""Merry"")
print(my_second_set)`",2022-11-14T19:16:59+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",giorgiacrosilla,"``` ruby
my_set = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
print(my_set)

```",2022-11-14T21:06:00+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",mjavadf,"```python
fellowship = {""Bilbo"",
              ""Frodo"",
              ""Sam"",
              ""Pippin"",
              ""Merry""}
```",2022-11-15T11:48:23+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",tiglio95,"...
elements = set()
elements.add(""Bilbo"")
elements.add(""Frodo"")
elements.add(""Sam"")
elements.add(""Pippin"")
elements.add(""Merry"")
print(elements)
...",2022-11-15T14:25:44+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",lucia1299,"```Ruby

my_set = {""​Bilbo""​, ""​Frodo""​, ""​Sam""​, ""​Pippin""​, ""​Merry""}

```",2022-11-15T16:35:13+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",ranacoskun,"```python
my_set = set((""Bilbo"",""Frodo"",""Sam"",""Merry"",""Pippin""))
```",2022-11-15T17:03:40+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",matteo-guenci,"```
hobbits = {""​Bilbo""​, ""​Frodo""​, ""​Sam""​, ""​Pippin""​, ""​Merry""}

```",2022-11-16T15:15:16+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",corrado877,"```
my_first_set= set()
my_first_set.add (""Bilbo"")
my_first_set.add (""Frodo"")
my_first_set.add (""Sam"")
my_first_set.add (""Pippin"")
my_first_set.add (""Merry"")
print (my_first_set)
my_first_set={""Sam"",""Bilbo"", ""Pippin"", ""Frodo"", ""Merry""}
```",2022-11-18T08:50:24+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",SalvatoreDiMarzo,"`my_lotr_set = { ""​Bilbo""​, ""​Frodo""​, ""​Sam""​, ""​Pippin""​, ""​Merry""}`",2022-11-18T17:04:06+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",ChiaraParravicini,"```ruby
hobbits_set  = {""Bilbo"", ""Frodo"", ""Sam"", ""Pippin"", ""Merry""}
```",2022-11-20T11:25:47+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",eugeniavd,"my_set = set()
my_set.add(""Bilbo"")
my_set.add(""Frodo"")
my_set.add(""Pippin"")
my_set.add(""Merry"")

#checking
print(my_set)

{'Bilbo', 'Pippin', 'Merry', 'Frodo'}",2022-11-20T13:33:10+00:00
comp-think/2022-2023,"Lecture ""Organising information: unordered structures"", exercise 1",alka2696,"```
new_set = set()
new_set.add(""Bilbo"")
new_set.add(""Frodo"")
new_set.add(""Sam"")
new_set.add(""Pippin"")
new_set.add(""Merry"")

print(new_set)

Output- {'Bilbo', 'Merry', 'Sam', 'Pippin', 'Frodo'}
```",2022-11-23T15:24:58+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 5",n1kg0r,"```
def test_my_reversed(input_reversed_list, expected):
    return input_reversed_list == expected
    
def my_reversed(input_list):
    output_list = []
    for _ in range(len(input_list)):
        output_list.append(input_list.pop())
    return output_list

# Expect True
print(test_my_reversed(my_reversed([0,1,2,3]), [3, 2, 1, 0]))
print(test_my_reversed(my_reversed([0,1,2,3]), list(reversed([0, 1, 2, 3]))))
# Console output: True

```",2022-11-09T15:20:24+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 5",delete4ever,"```python
def my_reversed(input_list):
    result= list()
    for i in range(len(input_list)):
        result.insert(i-1, input_list[-i])
    return result
#Test case
def test_reversed(input_list, expected):
    if my_reversed(input_list)== expected:
        return True
    else:
        return False
# Three test runs
print(test_reversed([0, 1, 2, 3], [3, 2, 1, 0]))
print(test_reversed([""Alice"", ""Bob"", ""Carl"", ""Danielle""], [""Danielle"", ""Carl"", ""Bob"", ""Alice""]))
print(test_reversed([0, 1, 2, 3], [1, 2, 3, 0]))
```

Second try:
```python
def my_reversed(input_list):
    result= list()
    for item in input_list:
        result.insert(0, item)
    return result
#Test case
def test_reversed(input_list, expected):
    if my_reversed(input_list)== expected:
        return True
    else:
        return False
# Three test runs
print(test_reversed([0, 1, 2, 3], [3, 2, 1, 0]))
print(test_reversed([""Alice"", ""Bob"", ""Carl"", ""Danielle""], [""Danielle"", ""Carl"", ""Bob"", ""Alice""]))
print(test_reversed([0, 1, 2, 3], [1, 2, 3, 0]))
```

Third try:
```python
def my_reversed(input_list):
    result=list()
    for item in input_list:
        result= [item]+ result
    return result
```",2022-11-10T01:43:52+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 5",lucia1299,"```Ruby

def test_my_reversed (input_list, expected):
    result = my_reversed(input_list)
    if result == expected:
        return True
    else:
        return False


def my_reversed(input_list):
    output_list = []
    i = len(input_list)-1
    while i >= 0: 
        output_list.append(input_list[i])
        i -= 1
    return output_list 

#Test case
print(test_my_reversed([0, 1, 2, 3], [3, 2, 1, 0]))

#Console output
True

```",2022-11-10T21:24:35+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 5",matteo-guenci,"```
def test_my_reverse(input_list, expected):
    result = my_reverse(input_list)
    if result == expected:
        return True
    else:
        return False

def my_reverse(input_list):
    reversed_list = input_list[::-1]
    return reversed_list


print(test_my_reverse([0, 1, 2, 3], [3, 2, 1, 0]))

```",2022-11-12T15:35:56+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 5",SpedicatiDaniele,"def test_my_reversed(input_list, expected):
    result = my_reversed(input_list)
    if result == expected:
        return True
    else:
        return False


def my_reversed(input_list):
    output_list = list()
    last_index = len(input_list)-1
    for item in input_list:
        output_list.append(input_list[last_index])
        last_index -= 1
    return output_list
        
print(test_my_reversed([1, 2, 3, 4], [4, 3, 2, 1]))
print(test_my_reversed([], []))",2022-11-12T19:34:14+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 5",EricaAndreose,"```
def test_my_reversed(input_list, expected):
    result = my_reversed(input_list)
    if expected == result:
        return True
    else:
        return False

def my_reversed(input_list):
    reverse_list = []
    pen = len(input_list) - 1
    for item in input_list:
        reverse_list.append(input_list[pen])
        pen -= 1
    return reverse_list

# Test runs that return True
print(test_my_reversed([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]))
print(test_my_reversed([0, 1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0]))
print(test_my_reversed([""Sherlock"", ""John"", ""Microft"", ""Moriarty""], [""Moriarty"", ""Microft"", ""John"", ""Sherlock""]))


# Another idea come after the night!

def test_my_reversed(input_list, expected):
  result = my_reversed(input_list)
  if expected == result:
      return True
  else:
      return False

def my_reversed(input_list):
  reversed_list=[]
  for item in input_list:
      reversed_list.insert(0, item)
  return reversed_list


print(test_my_reversed([""a"", ""b"", ""c""], [""c"", ""b"", ""a""]))
print(test_my_reversed([1, 2, 3], [3, 2, 1]))
    
```",2022-11-13T10:38:53+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 5",ranacoskun,"```python
def my_reversed(input_list):
  output_list = []
  for i in range(len(input_list)):
    output_list.append(input_list[len(input_list)-i-1])

  return output_list

def test_my_reversed(input_list, expected):
  if my_reversed(input_list) == expected:
    return True
  else: 
    return False 

print(test_my_reversed(['a','b','c','d'],['d', 'c', 'b', 'a']))
print(test_my_reversed(['1','2','3','4'],['4', '3', '2', '1']))
```
Or:

```python
def my_reversed(input_list):
  output_list = []
  for item in input_list:
    output_list.insert(0, item)

  return output_list

def test_my_reversed(input_list, expected):
  if my_reversed(input_list) == expected:
    return True
  else: 
    return False 

print(test_my_reversed(['a','b','c','d'],['d', 'c', 'b', 'a']))
print(test_my_reversed(['1','2','3','4'],['4', '3', '2', '1']))
```",2022-11-13T11:05:46+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 5",corrado877,"```
def test_case_my_reverse(input_list, expected):
# Test case Algorithm
    result=my_reverse(input_list)
    if result==expected:
        return True
    else:
        return False
    
    
# Code of algorithm
def my_reverse (input_list):
    output_list=[]
    for item in range (len(input_list)):
        output_list.insert(0, input_list [item])
    return output_list

#Three test runs
print (test_case_my_reverse([""ab"", ""bc"",""de"", ""ef""], ['ef', 'de', 'bc', 'ab']))
print (test_case_my_reverse ([1,2,3,4], [4,3,2,1]))
print (test_case_my_reverse ([""Moon"", ""Earth"", ""Venus"", ""Mars""], ['Mars', 'Venus', 'Earth', 'Moon']))
```",2022-11-13T11:50:40+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 5",ChiaraParravicini,"```ruby
def test_my_reversed(input_list, expected):
    result = my_reversed(input_list)
    if expected == result:
        return True
    else:
        return False
def my_reversed(input_list):
    my_iterator = []
    i = len(input_list)
    for item in input_list:
        current_item = input_list[i-1]
        my_iterator.append(current_item)
        i -= 1
    return my_iterator
print(test_my_reversed([""Harry"", ""Ron"", ""Hermione"", ""Hagrid""], [""Hagrid"", ""Hermione"", ""Ron"", ""Harry""]))
print(test_my_reversed([1, 2, ""tre"", 4], [4, ""tre"", 2, 1]))
print(test_my_reversed([], []))

```",2022-11-13T22:09:43+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 5",falaimo99,"```
def test_my_reversed(input, expected):
    result = my_reversed(input)
    if result == expected:
        return True
    else:
        return False

def my_reversed(input):
    result = list()

    item = len(input)
    for i in range(item):
        item = item - 1
        result.append(input[item])
            
    return result
    
print(test_my_reversed([0,1,2,3,4,5], [5,4,3,2,1,0]))
print(test_my_reversed([""Aragorn"", ""Frodo"", ""Samwise""], [""Samwise"", ""Frodo"", ""Aragorn""]))
print(test_my_reversed([0,1,1,2,2,3], [3,2,2,1,1,0]))
print(test_my_reversed([""Uruk-hai"", ""Saruman"", ""Sauron"", ""Uruk-hai""], [""Uruk-hai"", ""Sauron"", ""Saruman"",""Uruk-hai""]))
```",2022-11-14T20:52:29+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 5",alka2696,"```
# Test case for the function
def test_my_reversed(input_list, expected):
    result = my_reversed(input_list)
    if expected == result:
        return True
    else:
        return False

# Code of the function
def my_reversed(input_list):
    l = list()
    for item in input_list:
        l.insert(0, item)
    return l


# Tests
print(test_my_reversed([], []))
print(test_my_reversed([1, 2, 5, 6, 4, 7, 2], [2, 7, 4, 6, 5, 2, 1]))
```",2022-11-23T14:19:47+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 4",n1kg0r,"```
def test_my_range(input_range_list, expected):
    return input_range_list == expected
    
def my_range(stop_number):
    output_list = []
    current_iterating_number = 0
    while current_iterating_number < stop_number:
        output_list.append(current_iterating_number)
        current_iterating_number += 1
    return output_list

# Expect True
print(test_my_range(my_range(4), [0, 1, 2, 3]))
print(test_my_range(my_range(4), list(range(4))))
# Console output: True

```",2022-11-09T17:20:34+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 4",delete4ever,"```python
def my_range(stop_number):
    result= list()
    i = 0
    while 0 <= i < stop_number:
        i += 1
        result.append((i-1))
    return result
# Test case
def test_range(stop_number, expected):
    if my_range(stop_number)== expected:
        return True
    else:
        return False
# Three test runs
print(test_range(4, [0, 1, 2, 3]))
print(test_range(4, [0, 1, 2, 3, 4]))
print(test_range(4, list(range(4))))
```",2022-11-09T21:24:34+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 4",alka2696,"```
 #Test case for the function
def test_my_range(stop_number, expected):
    result = my_range(stop_number)
    if expected == result:
        return True
    else:
        return False


# Code of the function
def my_range(stop_number):
    result = list()
    while stop_number > 0:
        stop_number = stop_number - 1
        result.insert(0, stop_number)
    return result


print(test_my_range(4, [0, 1, 2, 3,]))
print(test_my_range(10, [0, 1, 2, 3,]))
```",2022-11-10T15:58:22+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 4",lucia1299,"```Ruby

def test_my_range (stop_number, expected):
    result = my_range(stop_number)
    if result == expected:
        return True
    else: 
        return False 

def my_range(stop_number):
    output_list = []
    iterating_number = 0
    while iterating_number < stop_number:
        output_list.append (iterating_number)
        iterating_number += 1  
    return output_list

#Test case
print(test_my_range(4, [0, 1, 2, 3]))
print(test_my_range(8, [0, 1, 2, 3, 4, 5, 6, 7]))

#Console output
True
True

```",2022-11-10T16:57:55+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 4",giorgiacrosilla,"``` ruby 
# test case for the algorithm
def test_my_range(stop_number, expected):
    result = my_range(stop_number)
    if expected == result:
        return True
    else:
        return False 

def my_range(stop_number):
    output_list = list()
    n = 0
    while n < stop_number:
        output_list.append(n)
        n = n + 1
    return output_list

print(test_my_range((4),([0,1,2,3])))
```",2022-11-10T20:03:24+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 4",EricaAndreose,"```
def test_my_range(stop_number, expected):
    result = my_range(stop_number)
    if expected == result:
        return True
    else:
        return False


def my_range(stop_number):
    range_list=[]
    number=0
    while number < stop_number:
        range_list.append(number)
        number += 1
    return range_list

# Test runs that return True
print(test_my_range((4), [0, 1, 2, 3]))
print(test_my_range((10), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
print(test_my_range((7), [0, 1, 2, 3, 4, 5, 6]))
```",2022-11-12T15:55:43+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 4",matteo-guenci,"```
def test_my_range(stop_number, expected):
    result = my_range(stop_number)
    if result == expected:
        return True
    else:
        return False

def my_range(stop_number):
    ranged_list = []
    x = 0
    while x < stop_number:
        ranged_list.append(x)
        x += 1
    return ranged_list

print(test_my_range((7), ([0, 1, 2, 3, 4, 5, 6])))
```",2022-11-12T16:24:44+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 4",SpedicatiDaniele,"def test_my_range(n, expected):
    result = my_range(n)
    if result == expected:
        return True
    else:
        return False

def my_range(n):
    output_list = list()
    x = 0

    while x < n:
        output_list.append(x)
        x += 1
    return output_list
        
print(test_my_range(6, [0, 1, 2, 3, 4, 5]))
print(test_my_range(0, []))",2022-11-12T18:46:03+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 4",ranacoskun,"```python
def my_range(stop_number):
  count=0
  output_list = []
  while count<stop_number:
    output_list.append(count)
    count+=1

  return output_list

def test_my_range(stop_number,expected):
  if my_range(stop_number) == expected:
    return True
  else: 
    return False  

print(test_my_range(5,[0,1,2,3,4]))
print(test_my_range(3,[0,1,2]))
```",2022-11-13T11:02:53+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 4",corrado877,"```
#Test case algorithm
def test_case_my_range(stop_number, expected):
    result=my_range(stop_number)
    if result==expected:
        return True
    else:
        return False
    
# Code of algorithm
def my_range (stop_number):
    output_list=[]
    x=0
    while x < stop_number:
        output_list.append (x)
        x=x+1
    return output_list
        
 # three test runs

print (test_case_my_range (3, [0, 1, 2]))
print (test_case_my_range (5, [0, 1, 2, 3, 4]))
print (test_case_my_range(0, []))
```",2022-11-13T11:46:11+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 4",ChiaraParravicini,"```ruby

def test_my_range(stop_number, expected):
    result = my_range(stop_number)
    if expected == result:
        return True
    else:
        return False
def my_range(stop_number):
    range_object = []
    start_number = 0
    while start_number < stop_number:
        range_object.append(start_number)
        start_number += 1
    return range_object
print(test_my_range(5, [0, 1, 2, 3, 4]))
print(test_my_range(0, []))

```",2022-11-13T20:44:06+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 3",n1kg0r,"```
def test_my_enumerate(input_list, expected):
    return input_list == expected
    
def my_enumerate(input_list):
    output_list = []
    for i in range(len(input_list)):
        output_list.append((i, input_list[i]))
    return output_list

# Expect True
print(test_my_enumerate(my_enumerate([1,2,3]), [(0, 1), (1, 2), (2, 3)]))
print(test_my_enumerate(my_enumerate(['1','2','3']), list(enumerate(['1','2','3']))))
# Console output: True

```",2022-11-09T14:57:32+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 3",delete4ever,"I'm still confused and only have some rough ideas about it. Anyway I took my ~~first~~ second try like this:
```python
def my_enumerate(input_list):
    result= list()
    for item in input_list:
        position_of_item= input_list.index(item)
        result.append((position_of_item, item))
    return result
# Test case
def test(input_list, expected):
    if my_enumerate(input_list)== expected:
        return True
    else:
        return False
# Three test runs
print(test([""Siamese"", ""Ragdoll"", ""Chartreux"", ""Persian""], [(0, ""Siamese""), (1, ""Ragdoll""), (2, ""Chartreux""), (3, ""Persian"")]))
print(test([""Coliie"", ""Doberman"", ""Akita"", ""Shiba""], [(0, ""Coliie""), (1, ""Doberman""), (2, ""Akita""), (3, ""Shiba"")]))
print(test([""Coliie"", ""Doberman"", ""Akita"", ""Shiba""], [(2, ""Coliie""), (3, ""Doberman""), (4, ""Akita""), (5, ""Shiba"")]))
```",2022-11-09T18:58:12+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 3",alka2696,"```
# Test case for the function
def test_my_enumerate(input_list, expected):
    result = my_enumerate(input_list)
    if expected == result:
        return True
    else:
        return False


# Code of the function
def my_enumerate(input_list):
    result = []
    for item in range(len(input_list)):
        result.append((item, input_list[item]))
    return result

print(test_my_enumerate([""a"", ""b"", ""c""], [(0, ""a""), (1, ""b""), (2, ""c"")]))
print(test_my_enumerate([""Coraline"", ""American Gods"",""The Graveyard Book"", ""Good Omens""], [(0, ""American Gods""), (1, ""The Graveyard Book""), (2, ""Coraline"")]))
```
",2022-11-10T15:03:08+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 3",lucia1299,"```Ruby

def test_my_enumerate (input_list, expected):
    result = my_enumerate(input_list)
    if  expected == result:
        return True
    else: 
        return False 

def my_enumerate (input_list):
    output_list = list ()
    for string in input_list:
        output_list.append(string)
        output_list.append(input_list.index(string))
    return output_list

#Two test runs
print (test_my_enumerate(([""a"", ""b"", ""c""]), ([""a"", 0, ""b"", 1, ""c"", 2])))
print (test_my_enumerate(([""Artic Monkeys"", ""The Radiohead"", ""The Beatles""]), ([""Artic Monkeys"", 0, ""The Radiohead"", 1, ""The Beatles"", 2])))
#Console output
True
True

```",2022-11-10T16:46:43+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 3",giorgiacrosilla,"``` ruby 
#Test case for the algorithm
def test_my_enumerate(input_list, expected):
    result = my_enumerate(input_list)
    if expected == result:
        return True
    else:
        return False

def my_enumerate(input_list):
    output_list = list()
    for i in range(len(input_list)):
        output_list.append(input_list[i])
        output_list.append(i)
        
    return output_list

print(test_my_enumerate(([""a"", ""b"", ""c""]), ([""a"", 0, ""b"", 1, ""c"", 2])))
print(test_my_enumerate(([""a"", ""a"", ""b""]), ([""a"", 0, ""a"", 1, ""b"", 2])))



```",2022-11-10T20:01:35+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 3",EricaAndreose,"```
def test_my_enumerate(input_list, expected):
    result = my_enumerate(input_list)
    if expected == result:
        return True
    else:
        return False

# My very first try
def my_enumerate(input_list):
    output_list = list() 

    for item in input_list:
        output_list.append(input_list.index(item))
        output_list.append(item)
    return output_list

# Test runs that returns True
print(test_my_enumerate([""Zio"", ""Zia""], [0, ""Zio"", 1, ""Zia""]))
print(test_my_enumerate([0, 1, 2, 3, 4], [0, 0, 1, 1, 2, 2, 3, 3, 4, 4]))
print(test_my_enumerate([""Harry"", ""Ron"", ""Hermione"", ""Draco"", ""Luna""], [0, ""Harry"", 1, ""Ron"", 2, ""Hermione"", 3, ""Draco"", 4, ""Luna""]))

# My second idea
def my_enumerate(input_list):
    output_list = list() 
   
    for item in range(len(input_list)):
        output_list.append((item, input_list[item]))
    return output_list

# Test runs that returns True
print(test_my_enumerate([""Miao"", ""Ciao""], [(0, ""Miao""), (1, ""Ciao"")]))
print(test_my_enumerate([1, 2, 3, 4], [(0, 1), (1, 2), (2, 3), (3, 4)]))
print(test_my_enumerate([""Harry"", ""Ron"", ""Hermione"", ""Draco"", ""Luna""], [(0, ""Harry""), (1, ""Ron""), (2, ""Hermione""), (3, ""Draco""), (4, ""Luna"")]))


```",2022-11-12T15:53:03+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 3",matteo-guenci,"```
def test_my_enumerate(input_list, expected):
    result = my_enumerate(input_list)
    if result == expected:
        return True
    else:
        return False

def my_enumerate(input_list):
    enumerated_list = []
    for _ in range(len(input_list)):
        enumerated_list.append((_, input_list[_]))
    return enumerated_list

print(test_my_enumerate([1, 2, 3], [(0, 1), (1, 2), (2, 3)]))
```",2022-11-12T16:17:30+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 3",SpedicatiDaniele,"def test_my_enumerate (input_list, expected):
    result = my_enumerate(input_list)
    if result == expected:
        return True
    else:
        return False

def my_enumerate(input_list):
    output_list = list()

    for item in input_list:
        mytuple = (input_list.index(item), item)
        output_list.append(mytuple)
    return output_list

print(test_my_enumerate([""a"", ""b"", ""c""], [(0, 'a'), (1, 'b'), (2, 'c')]))
print(test_my_enumerate([""Alice"", ""Catherine"", ""Bob"", ""Charles""], [(0, 'Alice'), (1, 'Catherine'), (2,'Bob'), (3, 'Charles')]))",2022-11-12T18:10:06+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 3",ranacoskun,"```python
def my_enumerate(input_list):
  output_list = []
  for i in range(len(input_list)):
      output_list.append((i, input_list[i]))

  return output_list     

def test_my_enumerate(input_list,expected):
  if my_enumerate(input_list)== expected:
    return True
  else:
    return False

print(test_my_enumerate(['a','b','c','d'],[(0,'a'),(1,'b'),(2,'c'),(3,'d')]))
print(test_my_enumerate(['1','2','3','4'],[(0,'1'),(1,'2'),(2,'3'),(3,'4')]))
```",2022-11-13T11:01:48+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 3",corrado877,"```
# Test case algorithm
def test_my_enumerate_list (input_list, expected):
    result= my_enumerate_list(input_list)
    if result==expected:
        return True
    else:
        return False

# Code of algorithm
def my_enumerate_list(input_list):
    result_list=[]
    for item in range(len(input_list)):
        result_list.append ((item, input_list[item]))
    return result_list

# Three test runs

print (test_my_enumerate_list(['The Godfather', 'Goodfellas', 'The Departed','Inception', 'Shutter Island'], [(0, 'The Godfather'), (1, 'Goodfellas'), 
                             (2, 'The Departed'), (3, 'Inception'), (4, 'Shutter Island')]))
print (test_my_enumerate_list([""abc"", ""def"", ""ghi""], [(0, ""abc""), (1,""def""), (2, ""ghi"")]))
print (test_my_enumerate_list([""Moon"", ""Earth"", ""Venus"", ""Mars""], [(0, ""Moon""), (1, ""Earth""), (2, ""Venus""), (3, ""Mars"")]))
```",2022-11-13T11:44:43+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 3",irematmar,"```
def my_enumerate(input_list):
  output_list = []
  for item in range(len(input_list)):
    output_list.append((item, input_list[item]))
  
  return output_list

def test_my_enumerate(input_list, expected):
  if my_enumerate(input_list) == expected:
    return True
  else:
    return False

print(test_my_enumerate([""x"", ""y"", ""z""], [(0, ""x""), (1, ""y""), (2, ""z"")]))
print(test_my_enumerate([""apple"", ""laptop"", ""carrot""], [(0, ""x""), (1, ""y""), (2, ""z"")]))
```",2022-11-13T13:19:01+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 3",ChiaraParravicini,"```ruby
def test_my_enumerate(input_list, expected):
    result = my_enumerate(input_list)
    if expected == result:
        return True
    else:
        return False
#First try
def my_enumerate(input_list):
    new_list = []
    i = -1
    for item in input_list:
        i += 1
        new_tuple = (i, item)
        new_list.append(new_tuple)
    return new_list
print(test_my_enumerate([""a"", ""b"", ""c""], [(0, ""a""), (1, ""b""), (2, ""c"")]))

#Second try
def my_enumerate(input_list):
    new_list = []
    for i in range(len(input_list)):
        new_tuple = (i, input_list[i])
        new_list.append(new_tuple)
    return new_list
print(test_my_enumerate([""a"", ""b"", ""c""], [(0, ""a""), (1, ""b""), (2, ""c"")]))

```",2022-11-13T19:46:47+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 3",essepuntato,"Hi all,

Some hits on how to run some tests (try on your code and see if everything still works:
* Input list: `[""a"", ""a"", ""b"", ""c""]`
* Output list: `[(0, ""a""), (1, ""a""), (2, ""b""), (3, ""c"")]`",2022-11-14T08:35:40+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 2",n1kg0r,"#### Without the use of deque() function

```
from collections import deque

# check if the stack is correctly constructed from a list
def test_stack_from_list(input_stack, expected_values):
    # check if the data type is really stack (deque)
    if type(input_stack) != deque:
        return False
    # check if data length is as expected
    if len(input_stack) != len(expected_values):
        return False         
    # check if all data entries are as expected
    expected_values.reverse()
    for i in range(len(expected_values)):
        if input_stack.pop() != expected_values[i]:
            return False 
    return True
    
def stack_from_list(input_list):
    output_stack = deque()
    for item in input_list:
        output_stack.append(item)
    return output_stack

# Expect True
print(test_stack_from_list(stack_from_list([1,2,3]), [1,2,3]))
# Console output: True

# Expect False (wrong data type)
print(test_stack_from_list(set(stack_from_list([1,2,3])), [1,2,3]))
# Console output: False

# Expect False (wrong stack length)
print(test_stack_from_list(stack_from_list([1,2]), [1,2,3]))
print(test_stack_from_list(stack_from_list([1,2,3,4]), [1,2,3]))
# Console output: False

# Expect False (values are not equal elementwise)
print(test_stack_from_list(stack_from_list([1,2,'3']), [1,2,3]))
print(test_stack_from_list(stack_from_list([1,3,2]), [1,2,3]))
# Console output: False
```

#### Using deque() function

```
from collections import deque

# check if the stack is correctly constructed from a list
def test_stack_from_list(input_stack, expected_values):
    return input_stack == deque(expected_values)
    
def stack_from_list(input_list):
    output_stack = deque()
    for item in input_list:
        output_stack.append(item)
    return output_stack

# Expect True
print(test_stack_from_list(stack_from_list([1,2,3]), [1,2,3]))
# Console output: True

# Expect False (wrong data type)
print(test_stack_from_list(set(stack_from_list([1,2,3])), [1,2,3]))
# Console output: False

# Expect False (wrong stack length)
print(test_stack_from_list(stack_from_list([1,2]), [1,2,3]))
print(test_stack_from_list(stack_from_list([1,2,3,4]), [1,2,3]))
# Console output: False

# Expect False (values are not equal elementwise)
print(test_stack_from_list(stack_from_list([1,2,'3']), [1,2,3]))
print(test_stack_from_list(stack_from_list([1,3,2]), [1,2,3]))
# Console output: False
```",2022-11-09T14:33:26+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 2",delete4ever,"```python
from collections import deque
def stack_from_list(input_list):
    output_stack=deque()
    for item in input_list:
        output_stack.append(item)
    return output_stack
# Test case for algorithm
def test(input_list, output_stack):
    if input_list== output_stack: 
        return True
    else: 
        return False
# Three different test runs
print (test([""Alice"", ""Bob"", ""Claire"", ""Danielle""], ""Alice""))
print (test([""Alice"", ""Bob"", ""Claire"", ""Danielle""], [""Alice"", ""Danielle""]))
print (test([""Alice"", ""Bob"", ""Claire"", ""Danielle""], [""Alice"", ""Bob"", ""Claire"", ""Danielle""]))
```",2022-11-09T18:05:46+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 2",alka2696,"```
# Code of the function
from collections import deque 
def stack_from_list(input_list):
    output_stack = deque()  
 
    for item in input_list:
        output_stack.append(item)

    return output_stack

# Test case for the function
def test_list(input_list, output_stack):
    if input_list==output_stack:
        return True
    else:
        return False

# test runs 
print (test_list([1,2,3,4], [1,2,3,4]))
print (test_list([""Alice"", ""Catherine"", ""Bob"", ""Charles"",""Denver""], ""Bob""))
print (test_list([""Ron"", ""Harry"", ""Hermione""], [""Ron"", ""Harry"", ""Hermione""]))
```",2022-11-10T14:27:33+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 2",EricaAndreose,"```
from collections import deque

def test_stack_from_list(input_list, expected):
    result = stack_from_list(input_list)
    if expected == input_list:
        return True
    else:
        return False


def stack_from_list(input_list):
    output_stack = deque()

    for item in input_list:
        output_stack.append(item)

    return output_stack

# Three test runs that return True
print(test_stack_from_list((""a"", ""b"", ""c"", ""d"", ""e""), (""a"", ""b"", ""c"", ""d"", ""e"")))
print(test_stack_from_list((""Maria"", ""Angelo"", ""Jude""), (""Maria"", ""Angelo"", ""Jude"")))
print (test_stack_from_list([1, 2, 3, 4], [1, 2, 3, 4]))
```",2022-11-10T16:19:58+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 2",matteo-guenci,"```
from collections import deque

def test_stack_from_list(input_list, output_stack):
    input_list = output_stack
    if input_list == output_stack:
        return True
    else:
        return False

def stack_from_list(input_list):
    output_stack = deque()

    for item in input_list:
        output_stack.append(item)
    return output_stack



print(test_stack_from_list([""Domenico Bini"", ""Guglielmo il Conquistatore"", ""John Cena""], [""Domenico Bini"", ""Guglielmo il Conquistatore"", ""John Cena""]))
print(test_stack_from_list([""Gundam"", ""Stanis La Rochelle"", ""Dionigi di Alicarnasso""], ""Sir Ulrich von Liechtenstein""))
print(test_stack_from_list([""Adventure"", ""Il marchese del Grillo""], ""Muteking""))
```",2022-11-10T16:48:36+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 2",lucia1299,"```Ruby

from collections import deque

def test_stack_from_list (input_list, expected):
    if input_list == expected:
        return True
    else: 
        return False
    

def stack_from_list(input_list):
        output_stack = deque()
        for item in input_list:
            output_stack.append(item)
        return output_stack

#Test case
print (test_stack_from_list([""water"", ""tea"", ""coffee"", ""alcohol""], [""water"", ""tea"", ""coffee"", ""alcohol""]))

#Console output
True

``",2022-11-10T19:49:17+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 2",giorgiacrosilla,"``` ruby
from collections import deque 

def test_stack_from_list(input_list, output_stack, expected):
    result = stack_from_list(input_list) == deque(output_stack)
    if expected == result:
        return True
    else:
        return False 

def stack_from_list(input_list):
    output_stack = deque ()
    for item in input_list:
        output_stack.append(item)
    return output_stack

print(test_stack_from_list(([""a"", ""b"", ""c""]), ((""a"", ""b"")), False))
print(test_stack_from_list(([""a"", ""b""]), ((""a"", ""b"")), True))

```",2022-11-10T19:58:16+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 2",SpedicatiDaniele,"# Test case for the algorithm
def test_stack_from_list (input_list, expected):
    result = stack_from_list(input_list)
    if result == expected:
        return True
    else:
        return False

from collections import deque
def stack_from_list(input_list):
    output_stack = deque()  # the stack to create
    
    # Iterate each element in the input list and add it to the stack
    for item in input_list:
        output_stack.append(item)

    return output_stack

print(test_stack_from_list ([1, 2, 3, 4, 5], deque([1, 2, 3, 4, 5])))
print(test_stack_from_list([""Alice"", ""Catherine"", ""Bob"", ""Charles""], deque([""Alice"", ""Catherine"", ""Bob"", ""Charles""]) ))
print(test_stack_from_list([""Ron"", ""Harry"", ""Hermione""], deque([""Ron"", ""Harry"", ""Hermione""])))",2022-11-12T17:28:38+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 2",ranacoskun,"```python
from collections import deque

def stack_from_list(input_list):
  output_stack = deque() 
  for item in input_list:
    output_stack.append(item)

  return output_stack

def test_stack_from_list(input_list,expected):
  if stack_from_list(input_list) == expected:
    return True
  else: 
    return False

print(test_stack_from_list([0,1,2,3],deque([0,1,2,3])))
print(test_stack_from_list(['a','b','c','d'],deque(['a','b','c','d'])))
```",2022-11-13T11:00:00+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 2",corrado877,"```
from collections import deque

# Test case for the algorithm
def test_stack_from_list (input_list, expected):
    result= stack_from_list (input_list)
    if result==expected:
        return True
    else:
        return False

# Code of the algorithm
def stack_from_list (input_list):
    output_stack=deque ()
    for item in input_list:
        output_stack.append(item)
    return output_stack

# Input lists
F1_drivers_list=[""Schumacher"", ""Senna"", ""Prost"", ""Lauda"", ""Stewart"",""Fangio""]
F1_tracks_list= [""Silverstone"", ""Singapore"", ""Monza"", ""Spa"",""Interlagos"", ""Jeddah""]
Actors_list= [""Johnny Depp"", ""Tom Hanks"",""Marlon Brando"",""Adrien Brody"", ""Keanu Reeves"", ""Jack Black""]

# Output_stacks
F1_drivers_stack=deque(F1_drivers_list)
F1_tracks_stack=deque(F1_tracks_list)
Actors_stack=deque(Actors_list)

# Three different test runs
print (test_stack_from_list (F1_drivers_list, F1_drivers_stack))
print (test_stack_from_list (F1_drivers_list, F1_drivers_stack))
print (test_stack_from_list (Actors_list, Actors_stack))

```",2022-11-13T11:43:44+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 2",irematmar,"```
from collections import deque

def stack_from_list(input_list):
  output_stack = deque()
  for item in input_list:
    output_stack.append(item)
  
  return output_stack

def test_stack_from_list(input_list, expected):
  if stack_from_list(input_list) == expected:
    return True
  else:
    return False

print(test_stack_from_list([""Metallica"", ""Rammstein"", ""Muse"", ""Lamb of God""], deque([""Metallica"", ""Rammstein"", ""Muse"", ""Lamb of God""])))
print(test_stack_from_list([""1"", ""2"", ""3"", ""4""], deque([""a"", ""b"", ""c""])))
```",2022-11-13T13:02:54+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 2",essepuntato,"Dear all,

Just a reminder about test-driven development. All the tests must be passed to claim that an algorithm returns what is expected. If a test execution returns `False`, the test is not passed.

If you need to check the non-compliance of the execution of a function on purpose, then you have to create an additional testing function that returns True if the condition of the test is not passed.",2022-11-14T07:30:24+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",tiglio95,"list_of_books = list()
list_of_books.append(""Coraline"")
list_of_books.append(""American Gods"")
list_of_books.append(""The Graveyard Book"")
list_of_books.append(""Good Omens"")
list_of_books.append(""Neverwhere"")
linear_search(list_of_books, ""The Sandman"")
enumerate(list_of_books)
for series in list_of_books:
    print(list_of_books)
# I will get this enumeration [(0, ""Coraline""), (1, ""American Gods""), (2, ""The Graveyard Book""), (3, ""Good Omwens""), (4, ""Neverwhere"")]
#
# Iteration 1
# position = 0
# item = ""Coraline""
# item == ""The Sandman"" is False
# Continue to the next iteration
#
# Iteration 2
# position = 1
# item = ""American Gods""
# item == ""The Sandman"" is False
# Continue to the next iteration
# 
# Iteration 3
# position = 2
# item = ""The Graveyard Book""
# item =
# Continue to the next iteration
#
# Iteration 4
# position = 3
# item = ""Good Omens""
# item = ""The Sandman"" is False
# Continue to the next iteration
#
# Iteration 5
# position = 4
# item = ""Neverwhere""
# item = ""The Sandman"" is False
# Return None
",2022-11-09T13:26:32+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",lucia1299,"`list_of_books = list ([""Coraline"", ""American Gods"",
""The Graveyard Book"", ""Good Omens"",
""Neverwhere""])

linear_search (list_of_books, ""The Sandman"")

FOR-EACH LOOP EXECUTION
enumerate (input_list) will result in:
enumerate ([(0, ""Coraline""), (1, ""American Gods""), (2, ""The Graveyard Book""), (3, ""Good Omens""), (4, ""Neverwhere"")])

 Iteration 1
 position = 0
 item = ""Coraline""
 item == value_to_search is False
 Continue to the next iteration

 Iteration 2
 position = 1
 item = ""American Gods""
 item == value_to_search is False
 Continue to the next iteration

 Iteration 3
 position = 2
 item = ""The Graveyard Book""
 item == value_to_search is False
 Continue to the next iteration

Iteration 4
position = 3
 item = ""Good Omens""
item == value_to_search is False
 Continue to the next iteration 

Iteration 5
 position = 4
 item = ""Neverwhere""
 item == value_to_search is False
 Return None`",2022-11-09T13:56:10+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",n1kg0r,"```
list_of_books = list([""Coraline"", ""American Gods"",
""The Graveyard Book"", ""Good Omens"",
""Neverwhere""]) 

linear_search(list_of_books, ""The Sandman"")

# FOR-EACH LOOP EXECUTION
# enumerate(input_list) will result in:
# enumerate([(0, ""Coraline""), (1, ""American Gods""),
# (2, ""The Graveyard Book""), (3, ""Good Omens""),
# (4, ""Neverwhere"")]) 
# Iteration 1
# position = 0
# item = ""Coraline""
# item == value_to_search is False
# Continue to the next iteration 
# Iteration 2
# position = 1
# item = ""American Gods""
# item == value_to_search is False
# Continue to the next iteration 
# Iteration 3
# position = 2
# item = ""The Graveyard Book""
# item == value_to_search is False
# Return the position (i.e. 2) and end the execution of the algorithm
# Iteration 4
# position = 3
# item = ""Good Omens""
# item == value_to_search is False
# Continue to the next iteration 
# Iteration 4
# position = 3
# item = ""Neverwhere""
# item == value_to_search is False
# Reached the end of the list of tuples iterated by the foreach loop 
# -> exit the foreach loop
# Reached the end of the function without an explicit return command
# -> implicitly set None as the return value
# return None
```",2022-11-09T13:57:45+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",SalvatoreDiMarzo,"list_of_books = list([""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""]), ""The Sandman"")

linear_search(list_of_books, ""The Sandman"")

For_each LOOP EXECUTION 
enumerate(input_list) will result in:
enumerate ([(0, ""Coraline), (1, ""American Gods), (2, ""The Graveyard Book""), (3, ""Good Omens), (4, ""Neverwhere)])


Iteration 1 
Position 0
Item == ""Coraline""
Item != Search_value

Iteration 2
Position 1
Item == ""American Gods""
Item != Search_value


Iteration 3
Position 2
Item == ""The Graveyard Book""
Item != Search_value


Iteration 4
Position 3
Item == ""Good Omens""
Item != Search_value


Iteration 5
Position 4
Item == ""Neverwhere""
Item != Search_value

Reached the end of the values for the FOR each;
exit the For each loop:
no Search_value has been found,
return None


",2022-11-09T17:02:52+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",delete4ever,"```python
list_of_books = list([""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""])
linear_search(list_of_books, ""The Sandman"")

# FOR-EACH LOOP EXECUTION
# enumerate(input_list) will result in:
# enumerate([(0, ""Coraline""), (1, ""American Gods""), (2, ""The Graveyard Book""), (3, ""Good Omens""), (4, ""Neverwhere"")])

# Iteration 1
# position = 0 
# item = ""Coraline"" 
# item == value_to_search is False 
#​ Continue to the next iteration

# Iteration 2
# position = 1 
# item = ""American Gods"" 
# item == value_to_search is False 
#​ Continue to the next iteration

# Iteration 3
# position = 2
# item = ""The Graveyard Book"" 
# item == value_to_search is False 
#​ Continue to the next iteration

# Iteration 4
# position = 3
# item = ""Good Omens"" 
# item == value_to_search is False 
#​ Continue to the next iteration

# Iteration 5
# position = 4
# item = ""Neverwhere"" 
# item == value_to_search is False 
#​ Return None and end the execution of the algorithm
```",2022-11-09T17:34:44+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",alka2696," linear_search(list([""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""]), ""The Sandman"")

linear_search (list_of_books, ""The Sandman"")

FOR-EACH LOOP EXECUTION
enumerate (input_list) will result in:
enumerate ([(0, ""Coraline""), (1, ""American Gods""), (2, ""The Graveyard Book""), (3, ""Good Omens""), (4, ""Neverwhere"")])

Iteration 1
position = 0
item = ""Coraline""
item == value_to_search is False
Continue to the next iteration

Iteration 2
position = 1
item = ""American Gods""
item == value_to_search is False
Continue to the next iteration

Iteration 3
position = 2
item = ""The Graveyard Book""
item == value_to_search is False
Continue to the next iteration

Iteration 4
position = 3
item = ""Good Omens""
item == value_to_search is False
Continue to the next iteration

Iteration 5
position = 4
item = ""Neverwhere""
item == value_to_search is False

Return None",2022-11-10T11:57:02+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",EricaAndreose,"```
list_of_books = list([""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""])

linear_search(list_of_books, ""The Sandman"")

# FOR-EACH LOOP EXECUTION
# enumerate(input_list) will result in:
# enumerate([(0, ""Coraline""), (1, ""American Gods""), (2, ""The Graveyard Book""), 
# (3, ""Good Omens""), (4, ""Neverwhere"")])
#
# Iteration 1 
# position = 0
# item == ""Coraline""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 2 
# position = 1
# item == ""American Gods""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 3 
# position = 2
# item == ""The Graveyard Book""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 4 
# position = 3
# item == ""Good Omens""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 5 
# position = 4
# item == ""Neverwhere""
# item == value_to_search is False
# Return ""None""

```",2022-11-10T15:29:05+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",matteo-guenci,"list_of_books = list([""Coraline"", ""American Gods"",
""The Graveyard Book"", ""Good Omens"",
""Neverwhere""])

linear_search(list([""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""]), ""The Sandman"")

# FOR-EACH LOOP EXECUTION
# enumerate(input_list) will result in:
# enumerate([(0, ""Coraline""), (1, ""American Gods""),
# (2, ""The Graveyard Book""), (3, ""Good Omens""),
# (4, ""Neverwhere"")])
#
# Iteration 1
# position = 0
# item = ""Coraline""
# item == The Sandman is False
# Continue to the next iteration
#
# Iteration 2
# position = 1
# item = ""American Gods""
# item == The Sandman is False
# Continue to the next iteration
#
# Iteration 3
# position = 2
# item = ""The Graveyard Book""
# item == The Sandman is False
# Iteration 4
# position = 3
# item = ""Good Omens""
# item == The Sandman is False
# Iteration 5
# position = 4
# item = ""Neverwhere""
# item == The Sandman is False
#return None
",2022-11-10T15:45:06+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",matteo-guenci,"list_of_books = list([""Coraline"", ""American Gods"",
""The Graveyard Book"", ""Good Omens"",
""Neverwhere""])

linear_search(list([""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""]), ""The Sandman"")

# FOR-EACH LOOP EXECUTION
# enumerate(input_list) will result in:
# enumerate([(0, ""Coraline""), (1, ""American Gods""),
# (2, ""The Graveyard Book""), (3, ""Good Omens""),
# (4, ""Neverwhere"")])
#
# Iteration 1
# position = 0
# item = ""Coraline""
# item == The Sandman is False
# Continue to the next iteration
#
# Iteration 2
# position = 1
# item = ""American Gods""
# item == The Sandman is False
# Continue to the next iteration
#
# Iteration 3
# position = 2
# item = ""The Graveyard Book""
# item == The Sandman is False
# Iteration 4
# position = 3
# item = ""Good Omens""
# item == The Sandman is False
# Iteration 5
# position = 4
# item = ""Neverwhere""
# item == The Sandman is False
#return None
",2022-11-10T15:45:43+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",ChiaraParravicini,"```ruby
list_of_books = list([""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""])
linear_search(list_of_books, ""American Gods"")
print(linear_search(list_of_books, ""The Sandman""))
# FOR-EACH LOOP EXECUTION
# enumerate(input_list) will result in:
# enumerate([(0, ""Coraline""), (1, ""American Gods""), (2, ""The Graveyard Book""), (3, ""Good Omens""), (4, ""Neverwhere"")])
#
# Iteration 1
# position = 0
# item = ""Coraline""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 2
# position = 1
# item = ""American Gods""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 3
# position = 2
# item = ""The Graveyard Book""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 4
# position = 3
# item = ""Good Omens""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 5
# position = 4
# item = ""Neverwhere""
# item == value_to_search is False
# Return None and end the execution of the algorithm
#
# Once reached the end of all the possible iterations, the value to search is not present in the list, so Python will automatically return the object None as a result and end the execution of the algorithm
```",2022-11-10T16:56:26+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",giorgiacrosilla,"``` ruby
list_of_books = list([""Coraline"",""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""])
linear_search([""Coraline"",""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""],""The Sandman"")

# for each execution loop
# enumerate (input_list) will result in:
# enumerate([(0, ""Coraline""), (1, ""American Gods""), (2, ""The Graveyard Book""), (3, ""Good Omens""), (4, ""Neverwhere"")])
#
#
# Iteration 1
# position = 0 
# item = ""Coraline""
# item == value_to_search is False 
# Continue to the next iteration
#
# Iteration 2
# position = 1
# item = ""American Gods""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 3
# position = 2
# item = ""The Graveyard Book""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 4
# position = 3
# item = ""Good Omens""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 5
# position = 4
# item = ""Neverwhere""
# item == value_to_search is False
# 
# return None 

```",2022-11-10T19:54:18+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",GaiaOrtona,"list_of_books = (list([""Coraline"", ""American gods"", ""The Graveyard book"", ""Good omens"", ""Neverwhere""]) , ""The Sandman"")
enumerate(list_of_books, ""The Sandaman"") 
enumerate ([(0, ""Coraline""), (1, ""American gods""), (2, ""The Graveyard book""), (3,""Good omens""), (4, ""Neverwhere"")])
# iteration 1
# position 0
# item Coraline 
# item == value_to_search is False
# continue to the next iteration

# iteration 2
# position 1
# item American gods
# item == value_to_search is False
# continue to the next iteration

# iteration 3
# position 2
# item The Graveyard book
# item == value_to_search is False 
# continue to the next iteration 

# iteration 4
# position 3
# item Good omens
# item == value_to_search is False
# continue to the next iteration

# iteration 5
# position 4
# item Neverwhere
# item == value_to_search is False
# return none ",2022-11-11T16:29:03+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",ranacoskun,"```
linear_search(list([""Coraline"", ""American Gods"", ""The Graveyard Book"", ""Good Omens"", ""Neverwhere""]), ""The Sandman"")

# Iteration 1
# position = 0
# item = ""Coraline""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 2
# position = 1
# item = ""American Gods""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 3
# position = 2
# item = ""The Graveyard Book""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 4
# position = 3
# item = ""Good Omens""
# item == value_to_search is False
# Continue to the next iteration
#
# Iteration 5
# position = 4
# item = ""Neverwhere""
# item == value_to_search is False
# Reached the end of the iterators, value to search is not present in the list.
# Exit for loop and return None.
```",2022-11-13T10:58:33+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",corrado877,"
[Exercise 01 slide 06.odt](https://github.com/comp-think/2022-2023/files/9997040/Exercise.01.slide.06.odt)


",2022-11-13T11:17:35+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",irematmar,"list_of_books = list ([""Coraline"", ""American Gods"",
""The Graveyard Book"", ""Good Omens"",
""Neverwhere""])

linear_search (list_of_books, ""The Sandman"")

For-Each Loop Execution
enumerate(input_list) will result in:
enumerate([(0, ""Coraline""), (1, ""American Gods""), (2, ""The Graveyard Book""), (3, ""Good Omens""), (4, ""Neverwhere"")])

Iteration 1
position = 0
item = ""Coraline""
item == value_to_search is False
Continue to the next iteration

Iteration 2
position = 1
item = ""American Gods""
item == value_to_search is False
Continue to the next iteration

Iteration 3
position = 2
item = ""The Graveyard Book""
item == value_to_search is False
Continue to the next iteration

Iteration 4
position = 3
item = ""Good Omens""
item == value_to_search is False
Continue to the next iteration

Iteration 5
position = 4
item = ""Neverwhere""
item == value_to_search is False
Return None",2022-11-13T12:50:28+00:00
comp-think/2022-2023,"Lecture ""Brute-force argorithms"", exercise 1",essepuntato,"Dear all,

Please, in your answers to the various exercises online, if you have to write Python code, be sure that the correct indent is preserved by previewing your post before publishing it. You can use the ``` environment for defining your Python code:

<pre>
```
write your Python code here
```
</pre>",2022-11-14T07:26:50+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",delete4ever,"```python
harry_potter_queue = deque ()
harry_potter_queue.append(""Draco"")
harry_potter_queue.append(""Harry"")
harry_potter_queue.append(""Hermione"")
harry_potter_queue.append(""Ron"")
harry_potter_queue.append(""Severus"")
harry_potter_queue.popleft()
# ""Draco"" was returned and then removed from the left-most part of the queue, now the queue is [""Harry"", ""Hermione"", ""Ron"", ""Severus""]
harry_potter_queue.append(""Voldemort"")
# ""Voldemort"" was added to the end of the queue, now the queue is [""Harry"", ""Hermione"", ""Ron"", ""Severus"", ""Voldemort""]
harry_potter_queue.popleft()
# ""Harry"" was returned and then removed from the left_most part of the queue, now the queue is [""Hermione"", ""Ron"", ""Severus"", ""Voldemort""]
```",2022-10-28T15:54:24+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",mjavadf,"by calling `my_queue.popleft()` first item of queue will be returned and then will be removed
by calling `my_queue.append(""Voldemort"")` the `""Voldemort""` will be added to end of the queue
1. queue's status after first `my_queue.popleft()`: `deque(['Harry', 'Hermione', 'Ron', 'Severus'])`
2.  queue's status after `my_queue.append(""Voldemort"")`: `deque(['Harry', 'Hermione', 'Ron', 'Severus', 'Voldemort'])`
3.  queue's status after 2nd `my_queue.popleft()`: `deque(['Hermione', 'Ron', 'Severus', 'Voldemort'])`

![image](https://user-images.githubusercontent.com/25877328/198697146-62c61a9a-bd94-490d-b3ae-4c5b29a1011c.png)
",2022-10-28T17:30:44+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",n1kg0r,"from collections import deque

my_queue = deque([""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""])

my_queue.popleft() # deque(['Harry', 'Hermione', 'Ron', 'Severus']) <- ""Draco"" gone from the beginning of the queue
my_queue.append(""Voldemort"") # deque(['Harry', 'Hermione', 'Ron', 'Severus', 'Voldemort']) <- ""Voldemort"" appeared at the end of the queue
my_queue.popleft() # deque(['Hermione', 'Ron', 'Severus', 'Voldemort']) <- ""Harry"" gone from the beginning of the queue
",2022-10-28T21:58:54+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",GaiaOrtona,"Friends_queue = deque()
Friends_queue.append(""Draco"")
Friends_queue.append(""Harry"")
Friends_queue.append(""Hermione"")
Friends_queue.append(""Ron"")
Friends_queue.append(""Severus"")
Friends_queue.popleft()
#based on the FIFO strategy, ""Draco"" has been removed from the queue
print(Friends_queue)
Friends_queue.append(""Voldemort"")
# ""Voldemort"" has been added to the queue
print(Friends_queue)
Friends_queue.popleft()
#based on the FIFO strategy, ""Harry"" has been removed from the queue
print(Friends_queue)",2022-10-29T10:15:37+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",SalvatoreDiMarzo,"```
from _collections import deque


def test_my_stack(my_list, expected):
    if my_list == expected:
        return True
    else:
        return False


my_stack = deque([""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""])
my_stack.popleft()    # Draco is removed
my_stack.append(""Voldemort"")      # Voldemort is added at the end of the query
my_stack.popleft()       # Harry is removed
print(my_stack)
print(test_my_stack(my_stack, deque([""Hermione"", ""Ron"", ""Severus"", ""Voldemort""])))
```
",2022-10-29T15:59:19+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",AmirAliyan74,"![Screenshot (94)](https://user-images.githubusercontent.com/114939421/198868041-86860a2a-8cc2-4452-8dbc-c8c998fdb908.png)
",2022-10-30T07:50:12+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",giorgiacrosilla,"```ruby
from collections import deque

my_queue = deque([""Harry"", ""Draco"", ""Hermione"", ""Ron"", ""Severus""])
my_queue.popleft()
my_queue.append(""Voldemort"")
my_queue.popleft()
print(my_queue)
```",2022-10-30T16:45:41+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",lucia1299,"from collections import deque


my_queue = deque ()
my_queue.append(""Harry"")
my_queue.append(""Draco"")
my_queue.append(""Hermione"")
my_queue.append(""Ron"")
my_queue.append(""Severus"")

print(my_queue)

my_queue.popleft()
print(my_queue)

my_queue.append(""Voldemort"")
print(my_queue)

my_queue.popleft()
print(my_queue)

OUTPUT(s):

deque(['Harry', 'Draco', 'Hermione', 'Ron', 'Severus'])
deque(['Draco', 'Hermione', 'Ron', 'Severus'])
deque(['Draco', 'Hermione', 'Ron', 'Severus', 'Voldemort'])
deque(['Hermione', 'Ron', 'Severus', 'Voldemort'])",2022-10-30T20:15:29+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",corrado877,"![HarryPotter_Queue](https://user-images.githubusercontent.com/114939477/198983773-9bbc2bf5-a1a4-4ccd-b0ee-73463913cf4d.PNG)
",2022-10-31T10:08:21+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",EricaAndreose,"<img width=""717"" alt=""03_queue"" src=""https://user-images.githubusercontent.com/83347847/198993262-e7e77901-038c-471b-8f66-540984a10760.png"">
",2022-10-31T11:00:53+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",mary-lev,"`deque(['Hermione', 'Ron', 'Severus', 'Voldemort'])`",2022-11-01T00:54:34+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",ranacoskun,"`deque([""Hermione"", ""Ron"", ""Severus"", ""Voldemort""])`",2022-11-02T11:23:23+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",tiglio95,"HP_queue = deque()
HP_queue.append(""Draco"")
HP_queue.append(""Harry"")
HP_queue.append(""Hermione"")
HP_queue.append(""Ron"")
HP_queue.append(""Severus"")
print(HP_queue)
HP_queue.popleft()
HP_queue.append(""Voldemort"")
HP_queue.popleft()
print(HP_queue)

output: deque(['Hermione', 'Ron', 'Severus', 'Voldemort'])",2022-11-02T16:03:58+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",lvcasmariani,"<img width=""1044"" alt=""Screen Shot 2022-11-02 at 8 41 11 PM"" src=""https://user-images.githubusercontent.com/114939163/199587430-6a138100-1426-4f74-ace9-ded75cda7e0e.png"">
",2022-11-02T19:42:21+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",ChiaraParravicini,"```
from collections import deque
my_queue = deque([""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""])
my_queue.popleft()
# ""Draco"", the first item added to the list, has been removed
my_queue.append(""Voldemort"")
# ""Voldemort"" has been added after the last item of the list
my_queue.popleft()
# ""Harry"", now being the first item of the list, has been removed
print(my_queue)
# now my_queue contains: deque([""Hermione"", ""Ron"", ""Severus"", ""Voldemort""])
```",2022-11-07T09:04:15+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 3",alka2696,"<img width=""1301"" alt=""Screenshot 2022-11-08 at 2 04 21 PM"" src=""https://user-images.githubusercontent.com/114939402/200572159-da5514d1-14a2-4df1-aed3-aa9909deb593.png"">
",2022-11-08T13:04:55+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",delete4ever,"```python
harry_potter_stack = deque ()
harry_potter_stack.append(""Draco"")
harry_potter_stack.append(""Harry"")
harry_potter_stack.append(""Hermione"")
harry_potter_stack.append(""Ron"")
harry_potter_stack.append(""Severus"")
harry_potter_stack.pop()
# ""Severus"" was returned and then removed from the top of the stack, now the stack is [""Draco"", ""Harry"", ""Hermione"", ""Ron""]
harry_potter_stack.pop()
# ""Ron"" was returned and then removed from the top of the stack, now the stack is [""Draco"", ""Harry"", ""Hermione""]
harry_potter_stack.append(""Voldemort"")
# ""Voldemort"" was added to the top of the stack, now the stack is [""Draco"", ""Harry"", ""Hermione"", ""Voldemort""]
```",2022-10-28T15:41:04+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",mjavadf,"by calling `my_stack.pop()` the top item of stack will be returned and then will be removed
stack status after calling this method 2 times: `deque(['Draco', 'Harry', 'Hermione'])`
by calling `harry_potter_stack.append(""Voldemort"")` the '""Voldemort"" will be added to top of the stack
stack status after calling this method: `deque(['Draco', 'Harry', 'Hermione', 'Voldemort'])`
![image](https://user-images.githubusercontent.com/25877328/198696065-110ee899-3a1d-49eb-baa5-f74ce0e10e11.png)

",2022-10-28T17:23:05+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",n1kg0r,"```
from collections import deque

my_stack = deque([""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""])
my_stack.pop() # deque(['Draco', 'Harry', 'Hermione', 'Ron']) <- ""Severus"" taken from the 'top' of the stack
my_stack.pop() # deque(['Draco', 'Harry', 'Hermione']) <- ""Ron"" taken from the 'top' of the stack
my_stack.append(""Voldemort"") # deque(['Draco', 'Harry', 'Hermione']) <- ""Voldemort"" put on the 'top' of the stack

```",2022-10-28T21:54:06+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",GaiaOrtona,"from collections import deque


Friends_stack = deque()
Friends_stack.append(""Draco"")
Friends_stack.append(""Harry"")
Friends_stack.append(""Hermione"")
Friends_stack.append(""Ron"")
Friends_stack.append(""Severus"")
Friends_stack.pop()
#based on the LIFO strategy, ""Severus"" has been removed from the stack
print(Friends_stack)
Friends_stack.pop()
#based on the LIFO strategy, ""Ron"" has been removed from the stack
print(Friends_stack)
Friends_stack.append(""Voldemort"")
#""Voldemort"" has been added to the stack 
print(Friends_stack)",2022-10-29T10:13:47+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",SalvatoreDiMarzo,"`from _collections import deque
`

```
def test_my_stack(my_list, expected):
    if my_list == expected:
        return True
    else:
        return False

```

```
my_stack = deque([""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""])
my_stack.pop()      # Severus is removed#
my_stack.pop()      # Ron is removed#
my_stack.append(""Voldemort"")       # Voldemort is added#
print(my_stack)
print(test_my_stack(my_stack, deque([""Draco"", ""Harry"", ""Hermione"", ""Voldemort""])))
```
",2022-10-29T15:52:30+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",AmirAliyan74,"![Screenshot (93)](https://user-images.githubusercontent.com/114939421/198867690-1484459f-818e-4371-a582-19945bcd3724.png)
",2022-10-30T07:38:36+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",giorgiacrosilla,"```ruby
from collections import deque

my_stack= deque([""Harry"", ""Draco"", ""Hermione"", ""Ron"", ""Severus""])
my_stack.pop()
my_stack.pop()
my_stack.append(""Voldermort"")
print(my_stack)
```",2022-10-30T16:44:54+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",lucia1299,"from collections import deque


my_stack = deque ()
my_stack.append(""Harry"")
my_stack.append(""Hermione"")
my_stack.append(""Ron"")
my_stack.append(""Draco"")
my_stack.append(""Severus"")

print(my_stack)

my_stack.pop()
print(my_stack)

my_stack.pop()
print(my_stack)

my_stack.append(""Voldemort"")
print(my_stack)

OUTPUT(s):

deque(['Harry', 'Hermione', 'Ron', 'Draco', 'Severus'])
deque(['Harry', 'Hermione', 'Ron', 'Draco'])
deque(['Harry', 'Hermione', 'Ron'])
deque(['Harry', 'Hermione', 'Ron', 'Voldemort'])",2022-10-30T20:06:11+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",corrado877,"![HarryPotter_Stack](https://user-images.githubusercontent.com/114939477/198982959-40898435-ea71-4c3f-97b5-719163eb73f9.PNG)
",2022-10-31T10:07:04+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",EricaAndreose,"<img width=""711"" alt=""02_stack"" src=""https://user-images.githubusercontent.com/83347847/198994193-2214ac0c-622e-4acf-8865-dfe41ff93f88.png"">
",2022-10-31T11:06:34+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",mary-lev,"`deque(['Draco', 'Harry', 'Hermione', 'Voldemort'])
`",2022-11-01T00:52:50+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",ranacoskun,"`deque([""Draco"", ""Harry"", ""Hermione"", ""Voldemort""])`",2022-11-02T11:23:53+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",tiglio95,"my_stack = deque()
my_stack.append(""Draco"")
my_stack.append(""Harry"")
my_stack.append(""Hermione"")
my_stack.append(""Ron"")
my_stack.append(""Severus"")
print(my_stack)
my_stack.pop()
print(my_stack)
my_stack.pop()
print(my_stack)
my_stack.append(""Voldemort"")
print(my_stack)

output: deque(['Draco', 'Harry', 'Hermione', 'Voldemort'])",2022-11-02T15:55:11+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",lvcasmariani,"<img width=""1075"" alt=""Screen Shot 2022-11-02 at 8 29 51 PM"" src=""https://user-images.githubusercontent.com/114939163/199585088-3025a741-3a27-4d6f-bd58-e00a7aace158.png"">
",2022-11-02T19:30:15+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",ChiaraParravicini,"```
from collections import deque

my_stack = deque([""Draco"", ""Harry"",
""Hermione"", ""Ron"", ""Severus""])
my_stack.pop()
# ""Severus"", the item on top of the stack, has been removed 
my_stack.pop()
# ""Ron"", now being the item on top of the stack, has been removed
my_stack.append(""Voldemort"")
# ""Voldermort"" has been added on top of the stack
print(my_stack)
# now my_stack contains: deque([""Draco"", ""Harry"", ""Hermione"", ""Voldemort""])
```",2022-11-05T14:30:13+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 2",alka2696,"<img width=""1301"" alt=""Screenshot 2022-11-08 at 1 58 17 PM"" src=""https://user-images.githubusercontent.com/114939402/200570841-68dc1f0a-ec07-4fee-b19b-a9064caf3d8f.png"">
",2022-11-08T12:59:17+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",delete4ever,"After reading the answer of Javad I came to realize that the alphabetical order could be achieved with Python instead of ordering it by myself LOL! So I tried both...

- If I do the ordering manually:

``` python
harry_potter_list = list()
harry_potter_list.append(""Draco"")
harry_potter_list.append(""Harry"")
harry_potter_list.append(""Hermione"")
harry_potter_list.append(""Ron"")
harry_potter_list.append(""Severus"")
```

- Leave the business to Python:

```python
harry_potter_list = list()
harry_potter_list.append(""Harry"")
harry_potter_list.append(""Hermione"")
harry_potter_list.append(""Ron"")
harry_potter_list.append(""Draco"")
harry_potter_list.append(""Severus"")
harry_potter_list.sort()
print (harry_potter_list)
```",2022-10-28T15:29:46+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",mjavadf,"[Reference](https://www.geeksforgeeks.org/bubble-sort/)  for bubble sort algorithm
```python
def bubbleSort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                
array = []
array.append(""​Harry"")
array.append(""Draco"")
array.append(""​Hermione"")
array.append(""​Ron"")
array.append(""​Severus"")
 
bubbleSort(array)

print(*array)
```",2022-10-28T17:11:22+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",n1kg0r,"```
# check if the sorted list matches the expected result
def test_sorted_list(sorted_list, expected):
    if sorted_list == expected:
        return True
    else:
        return False

hp_list = [""Harry"", ""Draco"", ""Hermione"", ""Ron"", ""Severus""]
hp_list.sort()
print(test_sorted_list(hp_list, [""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""]))
```",2022-10-28T21:36:17+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",GaiaOrtona,"Friends_list = list()
Friends_list.append(""Draco"")
Friends_list.append(""Harry"")
Friends_list.append(""Hermione"")
Friends_list.append(""Ron"")
Friends_list.append(""Severus"")
print(Friends_list)
",2022-10-29T10:12:19+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",SalvatoreDiMarzo,"`def test_harry_friends(harry_list, expected):
    if harry_list == expected:
        return True
    else:
        return False`


`harry_friends = [""Hermione"", ""Harry"", ""Draco"", ""Ron"", ""Severus""]
harry_friends.sort()
print(harry_friends)
print(test_harry_friends(harry_friends, [""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""]))`
",2022-10-29T15:34:24+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",SalvatoreDiMarzo,"def test_harry_friends(harry_list, expected):
    if harry_list == expected:
        return True
    else:
        return False


harry_friends = [""Hermione"", ""Harry"", ""Draco"", ""Ron"", ""Severus""]
harry_friends.sort()
print(harry_friends)
print(test_harry_friends(harry_friends, [""Draco"", ""Harry"", ""Hermione"", ""Ron"", ""Severus""]))
",2022-10-29T15:34:48+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",AmirAliyan74,"![Screenshot (92)](https://user-images.githubusercontent.com/114939421/198867050-ff046c19-cdab-47e2-b377-e78daa5c7ce3.png)
",2022-10-30T07:18:54+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",lvcasmariani,"<img width=""1000"" alt=""Screen Shot 2022-10-30 at 12 07 45 PM"" src=""https://user-images.githubusercontent.com/114939163/198875442-80c05963-cb3f-4daa-bb6b-07e6b91cc194.png"">
",2022-10-30T11:09:01+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",giorgiacrosilla,"```ruby
# using automatic sorting 
my_list = [""Harry"", ""Draco"", ""Hermione"", ""Ron"", ""Severus""]
my_list_alpha = sorted(my_list)
print(my_list_alpha)

# sorting the list manually 
my_list1 = [""Harry"", ""Draco"", ""Hermione"", ""Ron"", ""Severus""]
my_list1.remove(""Harry"")
my_list1.insert(1,""Harry"")
print(my_list1)
```",2022-10-30T16:43:10+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",lucia1299,"![2022-10-30](https://user-images.githubusercontent.com/114939133/198898734-111130c7-5db1-40d6-9efb-425d37d84f6a.png)
",2022-10-30T19:51:49+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",corrado877,"![HarryPotter_List](https://user-images.githubusercontent.com/114939477/198981893-e5662414-6a24-48ba-97d2-f9b8d1dd30b4.PNG)
",2022-10-31T10:01:25+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",EricaAndreose,"<img width=""724"" alt=""01_list"" src=""https://user-images.githubusercontent.com/83347847/198994801-c8204528-0e89-4be8-b2b5-f15e2df56405.png"">
",2022-10-31T11:10:23+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",mary-lev,"`persons = sorted([""Harry"", ""Draco"", ""Hermione"", ""Ron"", ""Severus""])`",2022-11-01T00:49:25+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",ranacoskun,"```python
list_of_friends = [""Harry"", ""Draco"", ""Hermione"", ""Ron"", ""Severus""]
list_of_friends.sort()
print(list_of_friends)
```",2022-11-02T11:24:35+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",tiglio95,"Harry_Potter = list()
Harry_Potter.append(""Harry"")
Harry_Potter.append(""Draco"")
Harry_Potter.append(""Hermione"")
Harry_Potter.append(""Ron"")
Harry_Potter.append(""Severus"")
Harry_Potter_sorted_alphabetically = sorted(Harry_Potter)
print(sorted(Harry_Potter))


Output: ['Draco', 'Harry', 'Hermione', 'Ron', 'Severus']",2022-11-02T15:39:45+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",ChiaraParravicini,"```
hp_characters = list()
hp_characters.append (""Harry"")
hp_characters.append (""Draco"")
hp_characters.append (""Hermione"")
hp_characters.append (""Ron"")
hp_characters.append (""Severus"")
hp_characters_sorted = sorted(hp_characters)
print(hp_characters_sorted)

```",2022-11-05T14:11:20+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",olgamak17,"hp_heroes = ['Harry','Draco', 'Hermione', 'Ron', 'Severus']
hp_heroes.sort()
print(hp_heroes)
['Draco', 'Harry', 'Hermione', 'Ron', 'Severus']

",2022-11-07T21:16:17+00:00
comp-think/2022-2023,"Lecture ""Organising information: ordered structures"", exercise 1",alka2696,"<img width=""856"" alt=""Screenshot 2022-11-08 at 1 47 27 PM"" src=""https://user-images.githubusercontent.com/114939402/200567636-d5c99248-fad6-4f56-9989-b42a4845510c.png"">
",2022-11-08T12:48:33+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",vattelalberto,"```
def test_words_in_bib(word1, word2, bib_entry, expected):
  result = words_in_bib(word1, word2, bib_entry)
  if result == expected:
    return True
  else:
    return False


def words_in_bib(word1, word2, bib_entry):
  result = 0
  if word1 in bib_entry:
    result = result+1
  if word2 in bib_entry:
    result = result+1
  return result

  
print(test_words_in_bib(""a"", ""b"", ""abcd"", 2))
print(test_words_in_bib(""a"", ""b"", ""acde"", 1))
print(test_words_in_bib(""a"", ""b"", ""bcde"", 1))
print(test_words_in_bib(""a"", ""b"", ""cdef"", 0))
```",2022-10-24T16:58:21+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",matteo-guenci,"```
def test_algorithm(first_word, second_word, bib_entry, expected):
    result = bibliographic_entry(first_word, second_word, bib_entry)
    if result == expected:
        return True
    else:
        return False

def bibliographic_entry(first_word, second_word, bib_entry):
    result = 0
    if first_word in bib_entry.split():
        result += 1
    if second_word in bib_entry.split():
        result += 1
    return result



print(test_algorithm(""Shotton"", ""Open"", ""Shotton, D. (2013). Open Citations. Nature, 502: 295–297. doi:10.1038/502295a"", 2))
print(test_algorithm(""Citation"", ""Science"", ""Shotton, D. (2013). Open Citations. Nature, 502: 295–297. doi:10.1038/502295a"", 1))
print(test_algorithm(""References"", ""1983"", ""Shotton, D. (2013). Open Citations. Nature, 502: 295–297. doi:10.1038/502295a"", 0))
```

I added the "".split()"" function because in this way every word in the bibliographic entry is splitted avoiding that the ""in"" command would match also the input word with another word that contains it 
",2022-10-24T17:53:29+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",mjavadf,"```python
def contains_word(word_1, word_2, bibliographic):
  result = 0
  result += 1 if word_1 in bibliographic else 0
  result += 1 if word_2 in bibliographic else 0
  
  return result

def test_contains_word(word_1, word_2, bibliographic, expected):
  return contains_word(word_1, word_2, bibliographic) == expected

print(test_contains_word('Java',
                         'C++',
                         'Miller, B. N., Ranum, D. L. (2011). Problem Solving with Algorithms and Data Structures using Python',
                         0))
print(test_contains_word('Java',
                         'Python',
                         'Miller, B. N., Ranum, D. L. (2011). Problem Solving with Algorithms and Data Structures using Python',
                         1))
print(test_contains_word('Python',
                         'Java',
                         'Miller, B. N., Ranum, D. L. (2011). Problem Solving with Algorithms and Data Structures using Python',
                         1))
print(test_contains_word('Python',
                         'Algorithms',
                         'Miller, B. N., Ranum, D. L. (2011). Problem Solving with Algorithms and Data Structures using Python',
                         2))
```",2022-10-24T18:22:18+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",delete4ever,"```python
def test_contains_word(first_word, second_word, bib_entry, expected): 
    result = contains_word(first_word, second_word, bib_entry) 
    if expected == result: 
        return True
    else: return False

def contains_word(first_word, second_word, bib_entry):
    result = 0
    if first_word in bib_entry:
        result += 1
    if second_word in bib_entry:
        result += 1
    return result

print (test_contains_word(""Latour"", ""modern"", ""Latour, Bruno. We have never been modern. Harvard university press, 2012."", 2))
print (test_contains_word(""Latour"", ""Latour, Bruno. We have never been modern. Harvard university press, 2012."", 1))
print (test_contains_word(""STS"", ""Latour, Bruno. We have never been modern. Harvard university press, 2012."", 0))
```",2022-10-24T20:44:10+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",AmirAliyan74,"```python
def test_contains_word(word1, word2, biblio_entry, expected):
    result=contains_word(word1, word2, biblio_entry)
    if result == expected:
     return True
    else:
     return False

def contains_word(word1, word2, biblio_entry):
    value_result = 0
    if word1 in biblio_entry and word2 in biblio_entry:
        value_result += 2 
    elif word1 in biblio_entry or word2 in biblio_entry:
        value_result += 1
    
    return value_result


print(test_contains_word('a','b','a b c d', 2))
print(test_contains_word('a','f','a b c d', 1))
print(test_contains_word('x','b','a b c d', 1))
print(test_contains_word('s','e','a b c d', 0))
```",2022-10-25T11:33:06+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",n1kg0r,"```
def test_contains_word(first_word, second_word, bib_entry, expected):
    result = contains_word(first_word, second_word, bib_entry)
    if expected == result:
        return True
    else:
        return False

def contains_word(first_word, second_word, bib_entry):
    result = 0
    if first_word in bib_entry:
        result += 1
    if second_word in bib_entry:
        result += 1
    return result

print(test_contains_word(""Shotton"", ""Open"",
                         ""Shotton, D. (2013). Open Citations. Nature, 502: 295–297. doi:10.1038/502295a"", 2))
print(test_contains_word(""Citations"", ""Science"",
                         ""Shotton, D. (2013). Open Citations. Nature, 502: 295–297. doi:10.1038/502295a"", 1))
print(test_contains_word(""References"", ""1983"",
                         ""Shotton, D. (2013). Open Citations. Nature, 502: 295–297. doi:10.1038/502295a"", 0))

```",2022-10-25T12:05:36+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",irematmar,"![image](https://user-images.githubusercontent.com/115877396/197779639-4803aded-233a-4a5d-8b0a-ba75a6e6afc4.png)
",2022-10-25T13:01:32+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",NicoleLiggeri,"
![bibalgorithm (3)](https://user-images.githubusercontent.com/114939270/197799404-6d485ab6-cda2-41e5-9949-5a2123e419a3.png)
",2022-10-25T14:21:44+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",ranacoskun,"```python
def test_contains_word(first_word, second_word, bib_entry, expected):
    result = contains_word(first_word, second_word, bib_entry)
    if expected == result:
        return True
    else:
        return False

def contains_word(first_word, second_word, bib_entry):
    result = 0
    if first_word in bib_entry:
        result += 1
    if second_word in bib_entry:
        result += 1
    return result

print(test_contains_word(""a"", ""b"", ""abcd"", 2))
print(test_contains_word(""a"", ""b"", ""acde"", 1))
print(test_contains_word(""a"", ""b"", ""cdef"", 0))

```
",2022-10-25T14:42:53+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",SalvatoreDiMarzo,"![Bib entry program](https://user-images.githubusercontent.com/115620744/197805547-ac46467a-f38d-40cf-9c0a-7c39c102c9eb.png)
",2022-10-25T14:45:02+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",giorgiacrosilla,"<img width=""382"" alt=""ex3"" src=""https://user-images.githubusercontent.com/114939122/197806338-675d1252-13d3-4b53-96b8-59843f417a55.png"">
",2022-10-25T14:48:13+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",alka2696,"
<img width=""846"" alt=""Screenshot 2022-10-25 at 5 48 21 PM"" src=""https://user-images.githubusercontent.com/114939402/197821094-4f8dc4f2-f916-4a98-bc65-13cc29a200ea.png"">

",2022-10-25T15:49:22+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",falaimo99,"```
def test_contain_word(word_1, word_2, bib_entry, expected):
    result = contain_word(word_1, word_2, bib_entry)
    if expected == result:
        return True
    else:
        return False

def contain_word(word_1, word_2, bib_entry):
    result = 0
    if word_1 in bib_entry:
        result = result +1
    if word_2 in bib_entry:
         result = result +1
    return result

print(test_contain_word(""Orlando"", ""Furioso"", ""Decameron, a cura di Vittore Branca, 2 voll., Torino, Einaudi, 1980, («Nuova Universale Einaudi», 169)."", 0))
print(test_contain_word(""cura"", ""Pentameron"", ""Decameron, a cura di Vittore Branca, 2 voll., Torino, Einaudi, 1980, («Nuova Universale Einaudi», 169)."", 1))
print(test_contain_word(""Torino"", ""Einaudi"", ""Decameron, a cura di Vittore Branca, 2 voll., Torino, Einaudi, 1980, («Nuova Universale Einaudi», 169)."", 2))
```",2022-10-25T16:05:47+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",lucia1299,"![image](https://user-images.githubusercontent.com/114939133/197832062-b9dc70ef-601d-420f-8bda-a26b2a593dd8.png)
",2022-10-25T16:35:47+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",evanarnoldi,"```
# Defining the test case for the algorithm
def test_bibword(word1, word2, bib_entry, expected):
    result = bibword(word1, word2, bib_entry)
    if result == expected:
	    return True
    else:
	    return False

# Defining the code of the algorithm
def bibword(word1, word2, bib_entry):
    result = 0
    if word1 in bib_entry:
        result += 1
    if word2 in bib_entry:
        result += 1
    return result

# Test runs
print (test_bibword(""Nave"", ""Gaming"", ""Nave, I. (2122). Science In Gaming."", 2))
print (test_bibword(""2122"", ""Game"", ""Nave, I. (2122). Science In Gaming."", 1))
print (test_bibword(""Sally"", ""Game"", ""Nave, I. (2122). Science In Gaming."", 0))

# Testing runs which should return as ""False""
print (test_bibword(""Nave"", ""Gaming"", ""Nave, I. (2122). Science In Gaming."", 0))
print (test_bibword(""2122"", ""Game"", ""Nave, I. (2122). Science In Gaming."", 2))
print (test_bibword(""Sally"", ""Game"", ""Nave, I. (2122). Science In Gaming."", 1))",2022-10-25T17:33:15+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",eugeniavd,"![image](https://user-images.githubusercontent.com/114939440/197883989-6d6b38af-fad9-44aa-bec2-f3f4695a5076.png)
",2022-10-25T21:19:10+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",EricaAndreose,"<img width=""836"" alt=""3ex"" src=""https://user-images.githubusercontent.com/83347847/197891865-ac74f323-450a-4ef9-82cd-5a9efbad4f25.png"">
",2022-10-25T22:11:52+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",ChiaraParravicini,"```
def test_contains_word(first_word, second_word, bib_entry, expected):
    result = contains_word(first_word, second_word, bib_entry)
    if result == expected:
        return True
    else:
        return False       
def contains_word(first_word, second_word, bib_entry):
    result = 0
    if first_word in bib_entry:
        result = result+1
    if second_word in bib_entry:
        result = result+1
    return result
print(test_contains_word(""Beck"", ""2004"", ""Beck, K. (2003). Test-Driven Development by Example. Addison Wesley."", 1))
print(test_contains_word(""Peck"", ""2004"", ""Beck, K. (2003). Test-Driven Development by Example. Addison Wesley."", 0))
print(test_contains_word(""Beck"", ""2003"", ""Beck, K. (2003). Test-Driven Development by Example. Addison Wesley."", 2))
print(test_contains_word(""Peck"", ""2003"", ""Beck, K. (2003). Test-Driven Development by Example. Addison Wesley."", 1))
```",2022-10-26T15:06:09+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",essepuntato,"Hi all,

A few comments:

* Some of you have implemented the algorithm, which does its job correctly. However, sometimes you did not follow **precisely** the instructions defined in the flowchart diagram you should use as a guideline for preparing the Python code.
* Did you specify the tests to cover all the possible cases? Did you try to run the code? Did it run correctly? Did all the test pass (i.e. they returned `True`)? If any of these questions is answered with a ""no"", then you should look again at your code :-)
* `if ... if` and `if ... elif ... else` do different things.",2022-10-28T10:07:14+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 3",corrado877,"![Algorithm exercise](https://user-images.githubusercontent.com/114939477/198699925-343ce8e8-cc9c-4c18-952e-2e8f08427bc9.PNG)
",2022-10-28T17:47:28+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",tiglio95,True and not (False) = True and True = **True**,2022-10-24T13:34:27+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",matteo-guenci,"""spam"" in ""spa span sparql"" = False --- not False = True
""egg"" > ""span"" = False --- not False = True
True and True = **True**",2022-10-24T16:52:04+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",mjavadf,"1. `""spam"" not in ""spa span sparql""` --> **True**
2. `not (""egg"" > ""span"")` --> **True**

1 and 2 --> **True**",2022-10-24T18:34:04+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",delete4ever,"""spam"" not in ""spa span sparql"" = True
not (""egg"" > ""span"")  = not ( False) = True
True and True = True",2022-10-24T19:34:40+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",AmirAliyan74,"""spam"" not in ""spa span sparql""= True
not (""egg"" > ""span"")=not (False)= True
True and True= **True**",2022-10-25T07:00:22+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",SalvatoreDiMarzo,"-True_ and not(False) 
-True and True
-True",2022-10-25T08:56:21+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",falaimo99,"""spam"" not in ""spa span sparql""
    True
not (""egg"">""span"") 
    True

True and True = True",2022-10-25T09:07:13+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",alka2696,"""spam"" not in ""spa span sparql"" and not (""egg"" > ""span"")
True and not (False)
True and true
True",2022-10-25T11:24:02+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",n1kg0r,"""spam"" in ""spa span sparql"" = False
""spam"" not in ""spa span sparql"" = True

(""egg"" > ""span"") = False
not (""egg"" > ""span"") = True

""spam"" not in ""spa span sparql"" and not (""egg"" > ""span"")
= True and True
= True",2022-10-25T11:39:41+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",lucia1299,"""spam"" not in ""spa span sparql"" and not (""egg"" > ""span"")
= True and not (False)
= True and True
= True",2022-10-25T12:22:35+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",irematmar,"True
",2022-10-25T12:30:38+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",NicoleLiggeri,True,2022-10-25T13:08:16+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",ranacoskun,"""spam"" not in ""spa span sparql"" and not (""egg"" > ""span"")=>
True and not(False)=>
True and True=>
True",2022-10-25T14:11:50+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",GaiaOrtona,"""spam"" not in ""spa span sparq1"" and not (""egg"" > ""span"")=
= ""spam"" not in ""spa span sparq1"" and not false=
= true and true=
= **true**",2022-10-25T16:09:15+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",EricaAndreose,"True and not (False) =
True and True =
True",2022-10-25T21:35:02+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",corrado877,"""spam"" not in ""spa span sparql"" and not (""egg"" > ""span"")?
 “spam” not in ""spa span sparql"" and not False
 True and True=**False**
",2022-10-28T17:50:29+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 2",Atousa95,"""spam"" not in ""spa span sparql"" and not (""egg"" > ""span"")
= True and not False = True and True = True",2022-11-01T17:31:05+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",tiglio95,not (not True or False and True)  or False = not (False or False) or false = True or False = **True**,2022-10-24T13:21:49+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",matteo-guenci,not (not True or False and True) or False = not (False or False and True) or False = not (False and True) or False = not False or False = True or False = **True**,2022-10-24T16:40:06+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",mjavadf,"`not (not True or False and True) or False` -->
`not (False or False and True) or False` -->
`not (False or False) or False` -->
`not ( False) or False` -->
`True or False` -->
**True**",2022-10-24T18:30:02+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",delete4ever,"   not ( not True or False and True) or False
= not ( False or False and True) or False
= not ( False and True) or False
= not ( False) or False
= True or False
= True",2022-10-24T19:32:24+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",AmirAliyan74,not (not True or False and True) or False= not (False or False) or False=not (False) or False= True or False=**True**,2022-10-25T06:55:02+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",SalvatoreDiMarzo,"- not (not True or False and True) or False
-not (False or False and True) or False
-not(False and True) or False
-not(False) or False
-True or False 
-True
",2022-10-25T08:50:37+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",falaimo99,"- not (not True or False and True) or False
- not (False or False and True) or False
- not (False or False) or False
- not False or False
- not False
- True",2022-10-25T08:52:58+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",alka2696,"not ( not True or False and True) or False
-not ( False or False and True) or False
-not ( False and True) or False
-not ( False) or False
-True or False
-True",2022-10-25T11:01:10+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",n1kg0r,"not (not True or False and True) or False
= not (not True or False and True)
= not (False or False and True)
= not (False or False)
= not (False)
= True
",2022-10-25T11:36:33+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",lucia1299,"not (not True or False and True) or False
= not (False or False and True) or False
= not (False or False) or False
= not False or False
= True or False
= True",2022-10-25T12:18:45+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",irematmar,True,2022-10-25T12:29:05+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",NicoleLiggeri,True,2022-10-25T13:00:13+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",ranacoskun,"```
not (not True or False and True) or False => 
not (False or False and True) or False => 
not(False or False) or False =>
True or False => 
True 
```",2022-10-25T14:08:36+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",GaiaOrtona,"Not (not true or false and true) or false=
= Not (false or false) or false=
= not false or false=
= true or false=
= **true**",2022-10-25T15:58:12+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",eugeniavd,"true

not (not True or False and True) or False
not (False or False and True) or False
not (False or False) or False
not False or False
True or False
True",2022-10-25T20:54:14+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",EricaAndreose,"True

![1ex](https://user-images.githubusercontent.com/83347847/197885978-19e50268-d889-4943-94fb-238668ca5664.jpg)
",2022-10-25T21:31:49+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",essepuntato,"Hi all, 

Thanks for your answer. Please, remember that in Python, there is a particular precedence that is in place for solving the operators (including boolean operators). In particular, first *not* is executed, then *and*, and finally *or*. Thus, even if the final result of your computation may be correct (by chance), the actual substitution presented could have followed the wrong precedence order. Indeed, from the textbook:

> Round brackets can be used for grouping boolean operations, e.g. `(True and False) or False` applies the `and` operation first, and the result is used as the first value of the `or` operation – given `False` as a result. If there are no brackets, the application order proceeds as follows. First, one must execute all the `not` operations. Then, one must perform all the `and` operations. Finally, one must assess the remaining `or` operations. 

Detailed information about the precedence of all Python operators can be found in the [official documentation](https://docs.python.org/3/reference/expressions.html#operator-precedence).
 ",2022-10-28T09:50:35+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",corrado877,"Not (not True or False and True) or False
 Not (False or False and True) or False
Not (False or False) or False
Not False or False
True or False = **True**
",2022-10-28T17:49:02+00:00
comp-think/2022-2023,"Lecture ""Programming languages"", exercise 1",Atousa95,"not (not True or False and True) or False
not (False or False and True) or False
not (False or False) or False
not (False) or False
True or False
True",2022-11-01T17:30:17+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 3",vattelalberto,"Here is the algorithm (can be imported in turingmachine.io)

https://gist.github.com/vattelalberto/913fe3a0d6b8e16bf42209e4264a11cd",2022-10-22T02:30:06+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 3",ranacoskun,"Truth table and table of insturctions: <img width=""732"" alt=""Ekran Resmi 2022-10-23 02 26 49"" src=""https://user-images.githubusercontent.com/39403816/197387934-4c483251-4bc8-4c16-9fb5-5e3907612929.png"">
```
input: ' 11001'
blank: ' '
start state: start
table:
  start:
    0: { write: 1, R: s }
  s:
    0: { write: 0, R: s0 }
    1: { write: 0, R: s1 }
  s0:
    0: { write: 0, R: s00 }
    1: { write: 0, R: s01 }
  s1:
    0: { write: 0, R: s00 }
    1: { write: 0, R: s10 }
  s00:
    0: { write: 0, L: fail }
    1: { write: 0, R: s001 }
  s01:
    0: { write: 0, R: s010 }
    1: { write: 0, R: s011 }
  s10:
    0: { write: 0, R: s100 }
    1: { write: 0, R: s101 } 
  s11:
    0: { write: 0, R: s110 }
    1: { write: 0, L: end }   
  s001:
    0: { write: 0, L: fail }
    1: { write: 0, R: s0011 }  
  s010:
    0: { write: 0, L: fail }
    1: { write: 0, R: s0101 }  
  s011:
    0: { write: 0, R: s0110 }
    1: { write: 0, L: end }
  s100:
    0: { write: 0, L: fail }
    1: { write: 0, R: s1001 }  
  s101:
    0: { write: 0, R: s1010 }
    1: { write: 0, L: end }
  s110:
    0: { write: 0, R: s1100 }
    1: { write: 0, L: end }
  s0011:
    0: { write: 0, L: fail }
    1: { write: 0, L: end }
  s0101:
    0: { write: 0, L: fail }
    1: { write: 0, L: end }
  s0110:
    0: { write: 0, L: fail }
    1: { write: 0, L: end }  
  s1001:
    0: { write: 0, L: fail }
    1: { write: 0, L: end } 
  s1010:
    0: { write: 0, L: fail }
    1: { write: 0, L: end }    
  s1100:
    0: { write: 0, L: fail }
    1: { write: 0, L: end }
  fail:
    0: { write: 0, L: fail }
    1: { write: 0, L: end }
  end:
```",2022-10-23T10:50:38+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 3",delete4ever,"Thanks enumeration again. But I've found another issue with my code: it won't stop if the output is 0 !! Σ(⊙▽⊙"" Haven't figured about this part yet...
![image](https://user-images.githubusercontent.com/114939156/197405441-dc94b14b-039d-41c2-8730-4369d14ed618.png)

```
blank: '0'
input: '001010'
start state: testcell
table:
  testcell:
    0: { write: 1, R: n}
  n:
    0: { write: 0, R: n0}
    1: { write: 0, R: n1}
  n0:
    0: { write: 0, R: n00}
    1: { write: 0, R: n01}
  n1:
    1: { write: 0, R: n11}
    0: { write: 0, R: n10}
  n00:
    1: { write: 0, R: n001}
    0: { write: 0, L: fail}
  n01:
    1: { write: 0, R: n011}
    0: { write: 0, R: n010}
  n11:
    1: { write: 0, L: end}
    0: { write: 0, R: n110}
  n10:
    1: { write: 0, R: n101}
    0: { write: 0, R: n100}
  n001:
    1: { write: 0, R: n0011}
    0: { write: 0, L: fail}
  n011:
    1: { write: 0, L: end}
    0: { write: 0, R: n0110}
  n010:
    1: { write: 0, R: n0101}
    0: { write: 0, L: fail}
  n110:
    1: { write: 0, L: end}
    0: { write: 0, R: n1100}
  n101:
    1: { write: 0, L: end}
    0: { write: 0, R: n1010}
  n100:
    1: { write: 0, R: n1001}
    0: { write: 0, L: fail}
  n0011:
    1: { write: 0, L: end}
    0: { write: 0, L: fail}
  n0110:
    1: { write: 0, L: end}
    0: { write: 0, L: fail}
  n0101:
    1: { write: 0, L: end}
    0: { write: 0, L: fail}
  n1100:
    1: { write: 0, L: end}
    0: { write: 0, L: fail}
  n1010:
    1: { write: 0, L: end}
    0: { write: 0, L: fail}
  n1001:
    1: { write: 0, L: end}
    0: { write: 0, L: fail}
  fail:
    0: { write: 0, L: fail}
    1: { write: 0, L: fail}
  end:
```",2022-10-23T17:05:49+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 3",delete4ever,"> 

Ah I know what happened to my infinitely running Turing Machine... I should've changed the state 'fail' as below:
```
fail:
    0: { write: 0, L: fail}
    1: { write: 0, L: end}
```
Then it will stop running lol.
",2022-10-23T17:11:55+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 3",falaimo99,"I tried to implement the algorithm through a simple game leveling system, I thought it was more human readable and easier to compute for me. It was useful looking at some naming used in my fellow students' solutions when I felt lost.
The code works on turingmachine.io as well
```
input: ''
blank: '0'
start state: liv0
table:
  liv0:
    '0': {write: 1, R: fail0}
    '1': {write: 1, R: liv1}
  liv1:
    '0': {write: 0, R: fail1}
    '1': {write: 0, R: liv2}
  liv2:
    '0': {write: 0, R: fail2}
    '1': {write: 0, R: win}
  win:
    '0': {write: 0, L: win}
    '1': {write: 1, L: end}
  fail0:
    '0': {write: 0, R: fail1}
    '1': {write: 0, R: liv1}
  fail1:
    '0': {write: 0, R: fail2}
    '1': {write: 0, R: liv2}
  fail2:
    '0': {write: 0, L: lost}
    '1': {write: 0, L: win}
  lost:
    '0': {write: 0, L: lost}
    '1': {write: 0, L: end}
  end:
```    ",2022-10-23T17:50:25+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 3",mjavadf,"| Current State | Tape Symbol | Current Symbol | Move HEAD | Next State |
|---------------|-------------|----------------|-----------|------------|
| Start         | 0           | 1              | R         | sn         |
| sn            | 0           | 0              | R         | s0         |
| sn            | 1           | 0              | R         | s1         |
| s0            | 0           | 0              | R         | s00        |
| s0            | 1           | 0              | R         | s01        |
| s1            | 0           | 0              | R         | s01        |
| s1            | 01          | 0              | R         | s11        |
| s00           | 0           | 0              | L         | FAIL       |
| s00           | 1           | 0              | R         | s001       |
| s01           | 0           | 0              | R         | s001       |
| s01           | 1           | 0              | R         | s011       |
| s11           | 0           | 0              | R         | s011       |
| s11           | 1           | 0              | L         | END        |
| s001          | 0           | 0              | L         | FAIL       |
| s001          | 1           | 0              | R         | s0011      |
| s011          | 0           | 0              | R         | s0011      |
| s011          | 1           | 0              | L         | END        |
| s0011         | 0           | 0              | L         | FAIL       |
| s0011         | 1           | 0              | L         | END        |
| FAIL          | 0/1         | 0              | L         | END        |",2022-10-23T20:07:27+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 3",SleepingSteven,"

  input: ' 10101'
  blank: ' '
  start state: start
  table:
   
    start:
      ' ': {R: read}
    read:
      0 : {R: read} 
      ' ': {L: fail}
      1: {R: read1}
      
    fail: 
      [0, 1] : {L: fail}
      ' ' : {write: 0, L: end}
      
    read1: 
      0 : {R: read1}
      1 : {R: read2}
      ' ': {L: fail}
      
    read2:
      0: {R: read2}
      1: {L: win}
      ' ': {L: fail}
      
    win: 
      [0, 1]: {L: win}
      ' ': {write: 1, L: end}
      
    end:
   

",2022-10-23T21:47:32+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 3",n1kg0r,"#### Diagram format: 
![Снимок экрана 2022-10-25 в 16 37 17](https://user-images.githubusercontent.com/88505773/197803671-0d1cb8d3-2d9a-4e9c-b323-e7e0de1ed963.png)

#### turingmachine.io code format
```
input: '011011'
blank: '0'
start state: Start
table:
  Start: 
    0: {write: 1, R: Sum0}
  Sum0: 
    0: {write: 0, R: xSum0}
    1: {write: 0, R: xSum1}
  xSum0:
    0: {write: 0, R: xxSum0}
    1: {write: 0, R: xxSum1}
  xxSum0:
    0: {write: 0, L: Fail}
    1: {write: 0, R: xxxSum1}
  xxxSum1:
    0: {write: 0, L: Fail}
    1: {write: 0, R: xxxxSum2}
  xxxxSum2:
    0: {write: 0, L: Fail}
    1: {write: 0, L: End}
    
  xxSum1: 
    0: {write: 0, R: xxxSum1}
    1: {write: 0, R: xxxSum2}
  xxxSum2: 
    0: {write: 0, R: xxxxSum2}
    1: {write: 0, L: End}
    
  xSum1: 
    0: {write: 0, R: xxSum1}
    1: {write: 0, R: xxSum2}
  xxSum2: 
    0: {write: 0, R: xxxSum2}
    1: {write: 0, L: End}
  
  Fail: 
    0: {write: 0, L: Fail}
    1: {write: 0, L: End}
  End:
  ```",2022-10-25T14:38:35+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 3",SalvatoreDiMarzo,"input: '11001'
blank: ' '
start state: start
table:
  start:
   1: {write: 1, R: a}
  a: 
   0: {write: 0, R: a1}
   1: {write: 1, R: a0}
  a0: 
   1: {write: 1, R: a01}
   0: {write: 0, R: a00}
  a1:
   1: {write: 1, R: a11}
   0: {write: 0, R: a10}
  a01:
   1: {write: 1, R: end}
   0: {write: 0, R: end}
  a00: 
   1: {write: 1, R: end}
   0: {write: 0, R: a001}
  a001:
   1: {write: 0, L: aback}
   0: {write: 0, L: aback}
  a11:
   1: {write: 1, R: a111}
   0: {write: 0, R: a110}
  a10:
   1: {write: 1, R: end}
   0: {write: 0, R: end}
  a111:
   1: {write: 0, L: aback}
   0: {write: 0, R: a110}
  a110:
   1: {write: 1, R: end}
   0: {write: 0, R: end}
  aback:
   1: {write: 0, L: aback1}
   0: {write: 0, L: aback1}
  aback1:
   1: {write: 0, L: end}
   0: {write: 0, L: aback2}
  aback2:
   1: {write: 0, L: aback3}
   0: {write: 0, L: aback3}
  aback3:
   1: {write: 0, L: end}
   0: {write: 0, L: end}
  
  end:

Works on turingmachine.io ",2022-10-25T16:43:31+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 3",corrado877,"**Exercise 3**
https://gist.github.com/corrado877/10a5661c15a18462878bcc4decf65e0b",2022-10-29T15:00:16+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 3",ChiaraParravicini,"
![immagine](https://user-images.githubusercontent.com/114939273/198842935-10503208-6265-4382-8a91-591652384c5f.png)

```
input: '000110'
  blank: ' '
  start state: S
  table:
    S:
      1: {write: 1, R: SS}
      0: {write: 1, R: SS}
    SS:
      1: {write: 1, R: S1}
      0: {write: 1, R: S0}
    S1:
      1: {write: 1, R: S11}
      0: {write: 1, R: SF0}
    S0:
      1: {write: 1, R: SF0}
      0: {write: 1, R: S00}
    S11:
      1: {write: 1, R: end}
      0: {write: 1, R: SF3}
    S00:
      1: {write: 1, R: SF2}
      0: {write: 1, L: fail}
    SF0:
      1: {write: 1, R: SF3}
      0: {write: 1, R: SF2}
    SF1:
      1: {write: 1, R: finalstate}
      0: {write: 1, R: SF2}
    SF2:
      1: {write: 1, R: finalstate}
      0: {write: 1, L: fail}
    SF3:
      1: {write: 1, R: end}
      0: {write: 1, R: finalstate}
    finalstate:
      1: {write: 1, R: end}
      0: {write: 1, L: fail}
    fail:
      1: {write: 0, L: fail}
      0: {write: 1, L: end}
    end:
```",2022-10-29T16:37:54+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 2",vattelalberto,"Here is the turing machine instructions for a machine that returns the result in the first cell, I didn't manage to find a way to initialise the following five cells as the input sequence yet

https://gist.github.com/vattelalberto/e1a8fd9943207bd3f2e2ed0d869d4d28 (can be imported in turingmachine.io)",2022-10-22T02:02:53+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 2",vattelalberto,"> Here is the turing machine instructions for a machine that returns the result in the first cell, I didn't manage to find a way to initialise the following five cells as the input sequence yet
> 
> https://gist.github.com/vattelalberto/e1a8fd9943207bd3f2e2ed0d869d4d28

Maybe this works as intended 

https://gist.github.com/vattelalberto/4f27f9767610c33984a2e169f5f707e1",2022-10-22T02:27:08+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 2",ranacoskun,"Truth table and table of instructions:
<img width=""665"" alt=""Ekran Resmi 2022-10-23 01 49 45"" src=""https://user-images.githubusercontent.com/39403816/197387802-339945bd-b33f-449a-af49-f4f4998e3cdb.png"">
```
input: ' 11001'
blank: ' '
start state: start
table:
  start:
    0: { write: 1, R: s }
  s:
    0: { write: 0, R: s0 }
    1: { write: 0, R: s1 }
  s0:
    0: { write: 0, R: s00 }
    1: { write: 0, R: s01 }
  s1:
    0: { write: 0, R: s10 }
    1: { write: 0, R: s11 }
  s00:
    0: { write: 0, L: fail }
    1: { write: 0, R: s001 }
  s01:
    0: { write: 0, L: fail }
    1: { write: 0, R: s011 }
  s10:
    0: { write: 0, L: fail }
    1: { write: 0, R: s101 } 
  s11:
    0: { write: 0, L: fail }
    1: { write: 0, L: end }   
  s001:
    0: { write: 0, L: fail }
    1: { write: 0, R: s0011 }
  s011:
    0: { write: 0, L: fail }
    1: { write: 0, L: end }
  s101:
    0: { write: 0, L: fail }
    1: { write: 0, R: s1011 }
  s0011:
    0: { write: 0, L: fail }
    1: { write: 0, L: end }
  s1011:
    0: { write: 0, L: fail }
    1: { write: 0, L: end }
  fail:
    0: { write: 0, L: fail }
    1: { write: 0, L: end }
  end:
```",2022-10-23T10:49:06+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 2",delete4ever,"I have to admit that I tried to figure this out by enumerating every possibility of the sequence on paper at first, it seems a bit dumb doing so but it actually helped me a lot hahaha. I've also set the final visualization in an enumerated tree diagram way.
![image](https://user-images.githubusercontent.com/114939156/197410542-48e6382f-a5d1-44c9-a99c-cffdaa9102b7.png)


```
blank: '0'
input: '011111'
start state: testcell
table:
  testcell:
    0: { write: 1, R: n}
  n:
    0: { write: 0, R: n0}
    1: { write: 0, R: n1}
  n0:
    0: { write: 0, R: n00}
    1: { write: 0, R: n01}
  n1:
    1: { write: 0, R: n11}
    0: { write: 0, R: n10}
  n00:
    1: { write: 0, R: n001}
    0: { write: 0, L: fail}
  n01:
    1: { write: 0, R: n011}
    0: { write: 0, L: fail}
  n11:
    1: { write: 0, L: end}
    0: { write: 0, L: fail}
  n10:
    1: { write: 0, R: n101}
    0: { write: 0, L: fail}
  n001:
    1: { write: 0, R: n0011}
    0: { write: 0, L: fail}
  n011:
    1: { write: 0, L: end}
    0: { write: 0, L: fail}
  n101:
    1: { write: 0, R: n1011}
    0: { write: 0, L: fail}
  n0011:
    1: { write: 0, L: end}
    0: { write: 0, L: fail}
  n1011:
    1: { write: 0, L: end}
    0: { write: 0, L: fail}
  fail:
    0: { write: 0, L: fail}
    1: { write: 0, L: end}
  end:
```


",2022-10-23T16:38:37+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 2",falaimo99,"This algorithm works because I wasn't aware of the real task requested in this exercise, that was in fact developing an algorithm that worked with 3 consequent 1s. So I developed at first one that worked with not consequent 1s that was the 3rd exercise. Then I tried to implement something to my previous algorithm to make it work with this more specific assignment. So if someone wants to follow my thought process must see at first my comment on the 3rd issue.
This code works with turingmachine.io as well. 
```

input: '01110'
blank: '0'
start state: liv0
table:
  liv0:
    '0': {write: 1, R: fail0}
    '1': {write: 1, R: liv1}
  liv1:
    '0': {write: 0, R: fail1}
    '1': {write: 0, R: liv2}
  liv2:
    '0': {write: 0, R: lost}
    '1': {write: 0, R: win}
  win:
    '0': {write: 0, L: win}
    '1': {write: 1, L: end}
  fail0:
    '0': {write: 0, R: fail1}
    '1': {write: 0, R: liv1}
  fail1:
    '0': {write: 0, R: fail2}
    '1': {write: 0, R: liv2}
  fail2:
    '0': {write: 0, L: lost}
    '1': {write: 0, L: win}
  lost:
    '0': {write: 0, L: lost}
    '1': {write: 0, L: lost2}
  lost2:
    '0': {write: 0, L: lost2}
    '1': {write: 0, L: end}
  end:
```",2022-10-23T18:08:08+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 2",mjavadf,"```
input: '01101'
blank: '0'
start state: Start
table:
  Start:
    0: {write: 1, R: Sn}
    1: {write: 1, R: Sn}
    
  Sn:
    0: {write: 0, R: S0}
    1: {write: 0, R: S1}
    
  S0:
    0: {write: 0, R: S00}
    1: {write: 0, R: S01}
    
  S00:
    0: {write: 0, L: FAIL}
    1: {write: 0, R: S001}
    
  S001:
    0: {write: 0, L: FAIL}
    1: {write: 0, R: S0011}
    
  S0011:
    0: {write: 0, L: FAIL}
    1: {write: 0, R: END}
    
  S01:
    0: {write: 0, L: FAIL}
    1: {write: 0, R: S011}
    
  S011:
    0: {write: 0, L: FAIL}
    1: {write: 0, R: END}
    
  S1:
    0: {write: 0, R: S10}
    1: {write: 0, R: S11}
    
  S10:
    0: {write: 0, L: FAIL}
    1: {write: 0, R: S101}
    
  S101:
    0: {write: 0, L: FAIL}
    1: {write: 0, R: S1011}
    
  S1011:
    0: {write: 0, L: FAIL}
    1: {write: 0, R: END}
    
  S11:
    0: {write: 0, L: FAIL}
    1: {write: 0, R: END}
    
  FAIL:
    0: {write: 0, L: FAIL}
    1: {write: 0, L: END}
    
  END: 
```

<details><summary>Diagram</summary>
<p>

![image](https://user-images.githubusercontent.com/25877328/197413609-60ebfc13-5d3f-48f2-97b6-298e5b431c5d.png)


</p>
</details>",2022-10-23T19:43:01+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 2",EricaAndreose,"Totally sure that this is not the right way... but I tried! 
Works with ALMOST all combinations of the sequence. 

https://gist.github.com/EricaAndreose/0fe44a2fbf8875e1f95dbae955291c1a


<img width=""918"" alt=""image"" src=""https://user-images.githubusercontent.com/83347847/197418830-20ab2a66-91dd-4f28-ba7f-16e022f52a8e.png"">


",2022-10-23T21:20:21+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 2",SleepingSteven,"input: ' 01110'
blank: ' '
start state: start
table:

  start:
   ' ': {R: read}
  
  read:
   0 : {R: read}
   ' ': {L: fail}
   1: {R: read1}
  
  fail:
   [0, 1] : {L: fail}
   ' ' : {write: 0, L: end}
  
  read1:
   0 : {R: read}
   1 : {R: read2}
   ' ': {L: fail}
  
  read2:
   0: {R: read}
   1: {L: win}
   ' ': {L: fail}
  
  win:
   [0, 1] : {L: win}
   ' ' : {write: 1, L: end}
  
  end:",2022-10-23T21:43:13+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 2",n1kg0r,"#### Diagram format
![Снимок экрана 2022-10-25 в 16 10 37](https://user-images.githubusercontent.com/88505773/197796802-7f312cd8-38f2-459f-b2ef-2a14b8987b35.png)

#### turingmachine.io code format
```
input: '000111'
blank: '0'
start state: Start
table:
  Start: 
    0: {write: 1, R: S}
  S: 
    0: {write: 0, R: S0}
    1: {write: 0, R: S1}
  S0:
    0: {write: 0, R: Sx0}
    1: {write: 0, R: S01}
  Sx0:
    0: {write: 0, L: Fail}
    1: {write: 0, R: Sx01}
  Sx01:
    0: {write: 0, L: Fail}
    1: {write: 0, R: Sx011}
  Sx011:
    0: {write: 0, L: Fail}
    1: {write: 0, L: End}
  S01:
    0: {write: 0, L: Fail}
    1: {write: 0, R: S011}
  S011:
    0: {write: 0, L: Fail}
    1: {write: 0, L: End}
  S1:
    0: {write: 0, R: Sx0}
    1: {write: 0, R: S11}
  S11:
    0: {write: 0, L: Fail}
    1: {write: 0, L: End}
  Fail: 
    0: {write: 0, L: Fail}
    1: {write: 0, L: End}
  End:
```
",2022-10-25T14:12:11+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 2",SalvatoreDiMarzo,"
![Esercizio 2 turing corretto](https://user-images.githubusercontent.com/115620744/197829509-fbb6200d-f4a6-47a9-92c7-3f0118be008e.png)

input: '10111'
blank: ' '
start state: start
table:
  start:
   1: {write: 1, R: a}
  a: 
   0: {write: 0, R: a1}
   1: {write: 1, R: a0}
  a0: 
   1: {write: 1, R: a01}
   0: {write: 0, R: a00}
  a1:
   1: {write: 1, R: a11}
   0: {write: 0, R: a10}
  a01:
   1: {write: 1, R: end}
   0: {write: 0, R: end}
  a00: 
   1: {write: 1, R: end}
   0: {write: 0, R: end}
  a11:
   1: {write: 1, R: a111}
   0: {write: 0, R: a110}
  a10:
   1: {write: 1, R: end}
   0: {write: 0, R: end}
  a111:
   1: {write: 0, L: aback}
   0: {write: 0, R: a110}
  a110:
   1: {write: 1, R: end}
   0: {write: 0, R: end}
  aback:
   1: {write: 0, L: aback1}
   0: {write: 0, L: end}
  aback1:
   1: {write: 0, L: aback2}
   0: {write: 0, L: end}
  aback2:
   1: {write: 0, L: end}
   0: {write: 0, L: aback3}
  aback3:
   1: {write: 1, L: end}
   0: {write: 0, L: end}
  
  end:
",2022-10-25T16:23:58+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 2",ChiaraParravicini,"```

name: Exercise 2
source code: |
  input: '001110'
  blank: ' '
  start state: S
  table:
    S:
      1: {write: 1, R: SS}
      0: {write: 1, R: SS}
    SS:
      1: {write: 1, R: S1}
      0: {write: 1, R: S0}
    S1:
      1: {write: 1, R: S11}
      0: {write: 1, R: S10}
    S0:
      1: {write: 1, R: S01}
      0: {write: 1, R: S00}
    S01:
      1: {write: 1, R: S011}
      0: {write: 1, L: fail}
    S00:
      1: {write: 1, R: S001}
      0: {write: 1, L: fail}
    S10:
      1: {write: 1, R: S101}
      0: {write: 1, L: fail}
    S11:
      1: {write: 1, R: end}
      0: {write: 1, R: fail}
    S011:
      1: {write: 1, R: end}
      0: {write: 1, L: fail}
    S001:
      1: {write: 1, R: S0011}
      0: {write: 1, L: fail}
    S101:
      1: {write: 1, R: S1011}
      0: {write: 1, L: fail}
    S0011:
      1: {write: 1, L: end}
      0: {write: 1, L: fail}
    S1011:
      1: {write: 1, L: end}
      0: {write: 1, L: fail}
    fail:
      1: {write: 0, L: fail}
      0: {write: 1, L: end}
    end:

```",2022-10-29T06:18:24+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 2",corrado877,"**Exercise 2**
https://gist.github.com/corrado877/11589ae7b6c88e2fcad832a382662bba",2022-10-29T14:54:17+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 1",vattelalberto,"I don't know if I got the excercise right, I managed to write an algorithm that only works with a blank input. I could not find one that works for every input that only uses 4 nodes as described in the excercise (I only found one that works with inputs composed of 3 or more numbers)

https://gist.github.com/vattelalberto/1b3b144a7e3bc0de00e9e754ec2e5f89 (can be imported in turingmachine.io)",2022-10-22T01:59:44+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 1",corrado877,"I'm not sure if I got it right but I've tried anyway.

https://gist.github.com/corrado877/ab4702e8dbd0f39c36ca2523327e4298",2022-10-22T17:22:58+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 1",ChiaraParravicini,"https://gist.github.com/ChiaraParravicini/9cd8b32a514679a2aa1ab80dae28936f
",2022-10-23T08:23:00+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 1",ranacoskun,"Table of instructions:
<img width=""688"" alt=""Ekran Resmi 2022-10-23 00 14 05"" src=""https://user-images.githubusercontent.com/39403816/197387765-826a0ecf-f394-4a00-8ad5-1dfff2843f23.png"">
",2022-10-23T10:46:16+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 1",delete4ever,"Sorry to present my answer in an old-school way because I'm still used to visualizing my thoughts with a pen& paper(＞人＜；).
And I think these instructions only 100% work when all the cells are initialized as 0.

![8A9FCE0174EC34852C0C0C72A5A89E80](https://user-images.githubusercontent.com/114939156/197410244-10300aec-bec7-42a5-9c9f-eb71d9a5b334.png)
",2022-10-23T13:54:01+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 1",falaimo99,"This code works on turingmachine.io
```

input: '0'
blank: '0'
start state: A
table:
  A:
    '0': {write: 1, R: B}
    '1': {write: 1, R: C}
  B:
    '0': {write: 1, L: C}
    '1': {write: 1, R: C}
  C:
    '1': {write: 0, L: B}
    '0': {write: 0, R: D}
  D:
```",2022-10-23T16:59:57+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 1",alka2696,"The table of instructions of a Turing machine with four states:
![computability exercise 1 ](https://user-images.githubusercontent.com/114939402/197407652-4438a15a-a304-4c8a-b21d-728b4704a342.jpg)


Works on (http://turingmachine.io/)",2022-10-23T17:51:57+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 1",mjavadf,"
|Current State |Tape Symbol| Write Symbol |  Move HEAD | New State |
|-|-|-|-|-|
|A|0|1|Right|B|
|A|1|0|Left|C|
|B|0|1|Left|A
|C|0|1|Right|D
",2022-10-23T19:14:01+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 1",SalvatoreDiMarzo,"<html>
<body>
<!--StartFragment-->

Current state | Tape symbol | Write symbol | Move head | Next state
-- | -- | -- | -- | --
A | 0 | 1 | Right | B
A | 1 | 0 | Left | C
B | 0 | 1 | Left | A
C | 0 | 1 | Left | D

<!--EndFragment-->
</body>
</html>",2022-10-23T20:24:57+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 1",lucia1299,"<html>

<body lang=IT style='tab-interval:35.4pt;word-wrap:break-word'>
<!--StartFragment-->



Current state | Read | Write | Move head | Next state
-- | -- | -- | -- | --
A | 0 or 1 | 0 | R | B
B | 0 or 1 | 1 | L | A
A | 0 or 1 | 0 | L | C
C | 0 or 1 | 1 | R | A



<!--EndFragment-->
</body>

</html>
",2022-10-24T07:00:25+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 1",matteo-guenci,"|Current state|Tape symbol|Write symbol|Move head|Next state|
|-----|-----|-----|-----|-----|
|A|0|1|Right|B|
|A|1|0|Left|C|
|B|0|1|Right|A|
|C|0|1|Right|D|",2022-10-24T15:18:07+00:00
comp-think/2022-2023,"Lecture ""Computability"", exercise 1",n1kg0r,"#### Table format

| Current state | Tape symbol | Write symbol | Move head | Next state |
|:-------------:|:-----------:|:------------:|:---------:|:----------:|
|       A       |      0      |      1        |      R     |      B      |
|       A       |       1      |       0       |      L     |      C      |
|       B       |       0      |      1        |     L      |     A       |
|       C       |       0      |       1       |    R       |      D      |

#### turingmachine.io code format

```
input: '0'
blank: '0'
start state: A
table:
  A: 
    0: {write: 1, R: B}
    1: {write: 0, L: C}
  B:
    0: {write: 1, L: A}
  C:
    0: {write: 1, R: D}
  D:
  ```",2022-10-25T13:40:47+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",lucia1299,"Flowchart 1
![Diagramma senza titolo (1)](https://user-images.githubusercontent.com/114939133/196210702-c4b3a83f-4f7b-4771-881f-c8ebab23adc5.jpg)

Flowchart 2
![Diagramma senza titolo](https://user-images.githubusercontent.com/114939133/196206514-7eab8a74-b2ea-4671-86e0-02ac9b869e8d.jpg)

",2022-10-17T14:55:45+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",ranacoskun,"Flowchart 1:
![fib1](https://user-images.githubusercontent.com/39403816/196211979-6d286bb1-afaf-433d-91b8-cc0eabdeab04.png)
Flowchart 2: I am not sure if the second flowchart is correct, but I think we need to start over to compute f(n-2) and f(n-1) like we call the function recursively.

![fib2](https://user-images.githubusercontent.com/39403816/196212724-8eae91df-d3dd-4140-9175-a3f98573a384.png)
",2022-10-17T15:03:53+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",vattelalberto,"Flowchart 1 (loop)
![image](https://user-images.githubusercontent.com/99617159/196217413-47b258d9-631d-4395-a8e9-8becfa5a4a81.jpeg)

Flowchart 2 (recursive, could not find another way to express it)
![image](https://user-images.githubusercontent.com/99617159/196217631-bf9dcbd4-98da-4ef2-abae-4172679f9385.jpeg)",2022-10-17T15:22:46+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",n1kg0r,"![Диаграмма без названия drawio-7](https://user-images.githubusercontent.com/88505773/196223935-3abf5175-0133-41fe-a4b2-d1ac07fb776c.png)

![Диаграмма без названия drawio-10](https://user-images.githubusercontent.com/88505773/196225014-c47cbd07-f534-444d-ac18-9b6e4a970b8b.png)
",2022-10-17T15:55:50+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",matteo-guenci,"First definition's flowchart: 
![Diagram_exercise3_first_definition](https://user-images.githubusercontent.com/110395587/196397909-c4c9ffc1-e662-4bec-b2cb-386939835298.png)

Second definition's flowchart: 
![Diagram_for_exercise_3_second_definition](https://user-images.githubusercontent.com/110395587/196397968-c62483ae-08e0-4df6-bb86-e710a872c417.png)
",2022-10-18T09:51:40+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",tiglio95,"![IMG_20221018_143527_416](https://user-images.githubusercontent.com/115789035/196432476-2299204e-bfab-49ff-bc1d-c46b3ddaaf96.jpg)
",2022-10-18T12:43:29+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",tiglio95,"![IMG_20221018_143550_951](https://user-images.githubusercontent.com/115789035/196432605-81200751-969d-4f57-a440-c835923ec1b2.jpg)
",2022-10-18T12:43:51+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",irematmar,"First Natural Language Explanation 
![FlowChart2](https://user-images.githubusercontent.com/115877396/196456478-f143aa14-e81b-409f-a830-d2b06e7c9aa8.png)

Second Natural Language Explanation 
![FlowChart3](https://user-images.githubusercontent.com/115877396/196456588-0b94da7c-518c-4cac-b21b-deeb827f647a.png)
",2022-10-18T14:19:01+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",alka2696,"First definition Flowchart :
![first definition flowchart](https://user-images.githubusercontent.com/114939402/196469034-2a8e2fa7-9756-43dd-9503-3100731898fb.jpg)

Second Flowchart :
![second definition flowchart](https://user-images.githubusercontent.com/114939402/196469149-5a9c0346-47ee-444b-abc6-7f0caf7afaa6.jpg)

",2022-10-18T15:07:43+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",SalvatoreDiMarzo,"Flowchart 1 
![Exercise 3 drawio](https://user-images.githubusercontent.com/115620744/196469172-68936243-c7e6-41c6-aa5e-27bb86add041.png)
Flowchart 2
![Exercise 3,2 drawio](https://user-images.githubusercontent.com/115620744/196472608-fcd74e90-c834-4926-944f-bc5f84653a0e.png)
",2022-10-18T15:19:39+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",EricaAndreose,"First natural language

![ex 3-1](https://user-images.githubusercontent.com/83347847/196495074-71947daf-9490-4cc0-b92d-1edde420a06f.jpg)

Second natural language


![ex 3-2](https://user-images.githubusercontent.com/83347847/196495255-183d0ba9-5785-4596-a0c8-938b4874000a.jpg)
",2022-10-18T16:53:29+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",corrado877,"**First Flowchart**
![Flowchart 1 excercise 02](https://user-images.githubusercontent.com/114939477/196506825-1d781877-d78e-4d63-8f7f-2784394f0845.png)

**Second Flowchart**
![Flowchart 2 excercise 02](https://user-images.githubusercontent.com/114939477/196506831-ef905f4f-2f04-4f57-98e0-902e43094c76.png)
",2022-10-18T17:54:11+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",eugeniavd,"first algorithm

![alg 3](https://user-images.githubusercontent.com/114939440/196537055-c8d06482-651b-4fd0-97c7-660f3113c987.png)
",2022-10-18T20:27:50+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",eugeniavd,"second algorithm

![alg 3 1](https://user-images.githubusercontent.com/114939440/196537145-5beb2ff0-b91a-4958-be83-bf230c6b365d.png)
",2022-10-18T20:28:21+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",NicoleLiggeri,"![Fibonacci1](https://user-images.githubusercontent.com/114939270/196693075-6e7c4530-733a-459c-95e4-f37d7f115c0a.jpg)
![Fibonacci2](https://user-images.githubusercontent.com/114939270/196693087-af573dbd-49e1-4bca-af6f-786ec8e581f9.jpg)
",2022-10-19T12:39:28+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 3",giorgiacrosilla,"![esercizio3](https://user-images.githubusercontent.com/114939122/196706362-0d5faf85-df6d-4115-8d83-82c230a916e1.png)
![esercizio](https://user-images.githubusercontent.com/114939122/196706380-e2edd126-9ad5-4365-b821-19e1a3ebe4b0.png)
",2022-10-19T13:35:21+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",tiglio95,"![IMG_20221017_115837_700](https://user-images.githubusercontent.com/115789035/196149840-33a1fade-3400-4e02-8d48-b0ee1e046bb0.jpg)
",2022-10-17T10:03:17+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",matteo-guenci,"![Diagram for exercise 2](https://user-images.githubusercontent.com/110395587/196159932-d6290442-4c2b-4064-84b1-cd644b9a593f.png)
",2022-10-17T10:54:36+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",lucia1299,"
![jpg](https://user-images.githubusercontent.com/114939133/196200059-25f8d76d-644f-4660-a111-4565d7b54ce8.jpeg)
",2022-10-17T14:13:23+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",ranacoskun,"![ex2](https://user-images.githubusercontent.com/39403816/196211403-1a604945-5705-4b5c-a404-0c55948f7c3f.png)
",2022-10-17T14:58:14+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",GaiaOrtona,"![image](https://user-images.githubusercontent.com/114939299/196212782-54d9a9db-d5d4-4cdf-976a-37852ed18478.png)
",2022-10-17T15:03:37+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",n1kg0r,"![Диаграмма без названия drawio-4](https://user-images.githubusercontent.com/88505773/196215282-44a4cef7-c7d3-4847-9485-9d9218073ad0.png)
",2022-10-17T15:13:14+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",alka2696,"![flowchart 1](https://user-images.githubusercontent.com/114939402/196251766-fa357d0f-5d1b-4652-8a55-7f2e718c8d4c.jpg)
",2022-10-17T18:14:20+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",corrado877,"![Flowchart excercise 02](https://user-images.githubusercontent.com/114939477/196386587-c7b87696-314d-4cc5-8266-2a73c2845013.png)
",2022-10-18T09:05:07+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",irematmar,"![FlowChart1](https://user-images.githubusercontent.com/115877396/196444236-32201df5-07ec-4840-96e9-a59d2de774d2.png)
",2022-10-18T13:33:19+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",SalvatoreDiMarzo,"![Copia di Exercise 2 drawio](https://user-images.githubusercontent.com/115620744/196462111-9e712bee-4e0b-4ea8-8b9e-ca00a1e5cb90.png)
",2022-10-18T14:40:30+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",EricaAndreose,"![ex 2](https://user-images.githubusercontent.com/83347847/196493867-be370ceb-c14d-45d4-b10e-15c60d417182.jpg)
",2022-10-18T16:49:48+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",eugeniavd,"![alg 2](https://user-images.githubusercontent.com/114939440/196532847-49b51aff-ea53-4fe5-b956-7066812b310c.png)
",2022-10-18T20:06:11+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",NicoleLiggeri,"![Diagramma](https://user-images.githubusercontent.com/114939270/196542419-b790771d-1166-4423-9862-343edceacd28.jpg)
",2022-10-18T20:52:41+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",giorgiacrosilla,"![exercise2](https://user-images.githubusercontent.com/114939122/196703547-17a9a0c1-5cd0-42af-a952-425f5c509b92.png)
",2022-10-19T13:24:08+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",ChiaraParravicini,"![Esercizio 2-Page-1](https://user-images.githubusercontent.com/114939273/197030011-b8234420-9b5e-4779-89c9-e78b3e0dd36e.jpg)
",2022-10-20T18:34:01+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 2",AmirAliyan74,"I've done the exercises number 2 and 3, but I can't upload their images(JPEG).
IDK why?!?!",2022-10-20T21:44:47+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",tiglio95,2,2022-10-17T09:48:28+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",matteo-guenci,2,2022-10-17T10:36:56+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",Carloo99,answer is 2 ,2022-10-17T11:13:59+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",GaiaOrtona,The answer is 2,2022-10-17T13:59:29+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",lucia1299,"The result is 2 as both ""Peroni"" and ""HTML"" are in the bib entry",2022-10-17T13:59:53+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",n1kg0r,2,2022-10-17T14:57:02+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",ranacoskun,2,2022-10-17T14:57:39+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",alka2696,The result will be 2 ,2022-10-17T17:53:23+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",corrado877,"The result is 2, both “HTML” and “Peroni” input values are in the bibliographic entry.",2022-10-18T08:12:35+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",irematmar,Result is 2,2022-10-18T13:18:32+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",SalvatoreDiMarzo,"The result is 2
",2022-10-18T14:08:27+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",EricaAndreose,2,2022-10-18T16:10:33+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",eugeniavd,2,2022-10-18T20:03:23+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",NicoleLiggeri,2,2022-10-18T20:26:29+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",AmirAliyan74,**Output=2**,2022-10-18T20:57:48+00:00
comp-think/2022-2023,"Lecture ""Algorithms"", exercise 1",mary-lev,2,2022-10-21T13:38:56+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 3",SalvatoreDiMarzo,"Going to the bank; Going to a bakery; 
You go to each of these places because you require something; you wait in line; you ask for the desired item to the person in charge; you exchange either information or money; you receive the item that you desired. ",2022-10-14T15:11:51+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 3",delete4ever,"An elevator& An autobus;
They both depart from a starting point and arrive in a destination, and the destination is a new starting point; During their movement, they transport objects inside them and stop temporarily, and they make sound for their arrival; They run on energies; They have spaces relatively separated from the outside.",2022-10-14T17:29:24+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 3",vattelalberto,"**Drinking a cold beer** and **using a bath tub**
They both...
- involve a vessel full of a liquid
- are better with a bit of foam
- feel really good when you're tired
- can be more enjoyable with a good friend
- take advantage of an extreme temperature
- can take a long time to finish ",2022-10-14T19:09:46+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 3",n1kg0r,"**Building a Lego set** / **assembling an Ikea wardrobe**, involving:
- a box of construction pieces
- a printed book of instructions to follow precisely
- gradually attaching the pieces with one another, constantly checking the instructions 
- sometimes understanding a mistake in the first steps and retrying the most part all over 
- a package of suspicious leftover details causing uncertainty about whether you did everything correctly",2022-10-15T11:01:39+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 3",alka2696,"Going from a bus and a train:

1. Both have a starting point and a destination.
2. Stops temporarily at many points. 
3. You pay to travel. 
4. They both have passengers.
5. Both are public transportation.",2022-10-15T11:38:31+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 3",irematmar,"**Learning a natural language/ Learning a programming language**

* You need to practice it
* understanding an already written text/code is easier than writing it yourself 
* You need to learn the syntax
* Both are a communication tools
* When you use both of them, you create something
* You need to combine the terminals of both languages in order to use it.
* You make many mistakes before you become fluent.",2022-10-15T13:13:53+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 3",corrado877,"**First situation**: inserting the password of an email account.

**Second situation**: digiting the pin of your credit card. 

Both situations have in common:

- The necessity of remembering a sequence of numbers/letters; 
- The action of digiting the sequence in a keypad/keyboard;
- Waiting time for a response.",2022-10-15T13:26:17+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 3",EricaAndreose,"**Take a university exam / Take a medical examination**

- They take place at a specific location 
- You need to book 
- You need to wait your turn
- You can be a little anxious
- You are examined by another person/other people
- At the end you come out with a result",2022-10-15T15:59:52+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 3",AmirAliyan74,"Painting / Cooking
1- Both need special materials and instruments.
2- Both need to spend a priod of time to be done!
3- You don't need to have academic knowledge necessarily to do them. They can be learnt by trial and error method.
4- The result would be pleasurable if all things are on point and measured!
5- Creativity is a very effective factor in both of them.


",2022-10-15T22:12:43+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 3",falaimo99,"Speaking / Playing an instrument
1 Both involve producing a modulated sound
2 Both evoke a vast array of emotions
3 Both can involve making some chords vibe
4 Both use air as vehicle to transmit their sound
5 You can practice and get better
6 Doing it alone, in front of people you know and in front of a crowd feel different and can affect your performance
7 Both in order to ""make sense"" have to follow a ""grammar"" that can generate a lot of outcomes",2022-10-16T17:03:24+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 3",eugeniavd,"Cat sleeping on the sofa. Baby sleeping in the bed. Two subjects do the same action at the same setting with the same purpose. 

Man cooking pasta at the kitchen. Chef cooking pasta at the restaurant. Common features: the same action and setting, maybe a kind of same clothes, like backsplash, same dish, same result of the action, probably the same period of the day (if they are in Italy where people have strict rules for the eating time)
",2022-10-16T20:18:39+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 3",matteo-guenci,"To study and to do sports:

- They both require concentration
- Both are tiring
- For both of them you can only see results if you practice them consistently
- Both are satisfying
- Both require the right amount of time, which can also be different for anyone
- Both require a stimulating environment
- The person practicing them must be motivated
- Both require the right tools
- Both can be carried out either alone or in groups
- In both cases you benefit from the guidance of an expert",2022-10-16T21:37:34+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 2",SalvatoreDiMarzo,"I'm having trouble finding the first exercise which appears in the computational thinking book but not here, so I will write both the answers of the first exercise and of the second one in this comment:
First exercise: I write, You write, I read, You read.
Second exercise: 13 ",2022-10-14T15:06:36+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 2",vattelalberto,"With 7 as input, the result is 13",2022-10-14T18:47:01+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 2",irematmar,"I was not able to do it just by looking at the natural language definition, I also looked at the C language description above. 
The result was 13. ",2022-10-15T12:58:57+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 2",alka2696,"With 7 as input, the result will be 13. ",2022-10-15T15:02:38+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 2",EricaAndreose,"The result is 13. 
I also looked at the high-level programming language definition to better understand the function Fn = Fn-1 + Fn-2",2022-10-15T15:45:07+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 2",AmirAliyan74,"I can't get it!
Please help me to understand!",2022-10-15T21:44:44+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 2",corrado877,"The result is 13, but I managed to understand it using the math formula Fn = Fn-1 + Fn-2.",2022-10-16T10:00:40+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 2",falaimo99,"The answer is 13, to me it was easier to understand through the math formula",2022-10-16T16:29:57+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 2",eugeniavd,"The function for calculating the 7th Fibonacci number takes as input an integer “7”. And return the sum of the same function with “7-1” as input and still the same function with “7-2” as input. 

Result = 13 ",2022-10-16T20:07:37+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 2",matteo-guenci,"The answer is 13, following the instructions given in natural language we must subtract 1 from ""n"" to get up to make ""n"" result as <= 3 and by doing that ""c"" will correspond to 13",2022-10-16T21:16:15+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 1",vattelalberto,"- I write
- I read
- You write
- You read",2022-10-14T18:43:44+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 1",delete4ever,I write/ I read/ You write/ You read,2022-10-14T19:19:03+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 1",alka2696,"Possible sentences: I write, I read, You write, You read.",2022-10-15T11:00:24+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 1",n1kg0r,"- ""I"" ""read""
- ""I"" ""write""
- ""you"" ""read""
- ""you"" ""write""",2022-10-15T11:09:58+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 1",irematmar,"- I read
- I write
- You read
- You write ",2022-10-15T12:17:49+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 1",corrado877,"  I write, You write, I read, You read",2022-10-15T12:58:14+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 1",EricaAndreose,"- I write
- I read
- You write 
- You read",2022-10-15T15:38:45+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 1",AmirAliyan74,"* I write
* You write
* I read
* You read",2022-10-15T21:16:04+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 1",falaimo99,"I write
I read
you write
you read",2022-10-16T16:41:36+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 1",eugeniavd,"i write 
i read
you write 
you read
",2022-10-16T19:58:48+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 1",matteo-guenci,"The possible sentences are:

-  I write
- I read
- You write 
- You read",2022-10-16T21:08:32+00:00
comp-think/2022-2023,"Lecture ""Introduction to Computational Thinking"", exercise 1",GaiaOrtona,"I write
You read
You write 
I read ",2022-10-17T06:24:54+00:00
